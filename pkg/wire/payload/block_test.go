package payload

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/CityOfZion/neo-go/pkg/wire/payload/transaction"
	"github.com/CityOfZion/neo-go/pkg/wire/util/address"
	"github.com/stretchr/testify/assert"
)

type txAttributes struct {
	ID            string
	Type          string
	Size          int
	Version       int
	InputsLen     int
	OutputsLen    int
	AttributesLen int
	WitnessesLen  int
}

func TestBlockDecodeEncode(t *testing.T) {
	// transaction taken from mainnet: 2000000
	rawtx := ""
	rawtxBytes, _ := hex.DecodeString(rawtx)

	b := Block{}

	r := bytes.NewReader(rawtxBytes)
	b.Decode(r)

	expected := map[string]bool{ // 18 trans

		"009f61f481f47eb7478e887871e4e744669d461b13d68e04250035260171d706": false,
		"3a62e473c1d67ac561b98e8131f7f7ceded4cd250edb78a6814ec9915930ad93": false,
		"d56a545d2f9400c09d5aa4e8cc37cc994d5a6892f9c30de95ff69a3b647b27a2": false,
		"57f6baa9cb23ce9117d66aee7c31ba6d1e82e140a805db1c5992ada849f6a7c7": false,
		"f700be9c723ed44900ac9d70874b9d8601033bb78883c0a43ab38b5d96c09c11": false,
		"31674ac8553b371ddf06db6a3aef09b8d6f37da03a8cc2868b71044c54ef0034": false,
		"44858de48ec97cea2f823128e9d58981dde11f28a6ebf0a2cb745ea13223dd71": false,
		"317f3ff3768b2aebe3d4866f6e0e8b875cc7937a1b8b5f91be066dc51ed61be2": false,
		"8c24f44f1533567c71e722f49bc7a4d9b323a09e2950fd975291817578119508": false,
		"55a7a738aaee8f7e6d7bcd4c8a38813e57763bff8bfb296418b6cac6d5bfb89a": false,
		"dfa5f84366cf0b48f1b1e9b24a73557e657f6ac21b676528401f5a630aece571": false,
		"5839fbcbbca68aef41dfa9a371222565519626affad6be0977d38a82259480a5": false,
		"6873568cae35e4ce0a7d07ef080ef6eb699b2b9dcbc419fad1c4f645ff8579fc": false,
		"dbb3c0688003bede7e7bc56d2c9d6362b594512ac686820739d963ef91e2eb9e": false,
		"3d12353cb8bae8be928131580e960a82f37ca3ad6957ad22c8cadc1b21b2dd1a": false,
		"8ca87fd5843f000939244151ce027bad5c1f30f1867c7054918b7f9a66b949e8": false,
		"ad088940e45a73e00a3cdb7f3248c67a3f6e5d1f05d4cfd44c4e1f4d26cfef87": false,
		"908a398dd65dfd2aad6c06090c5a71d5e5280746577a6ddd5a1f2c1453f71ead": false,
	}

	hashes := []string{}

	for _, tx := range b.Txs {
		switch t := tx.(type) {
		case *transaction.Contract:
			hashes = append(hashes, t.Hash.ReverseString())
		case *transaction.Miner:
			hashes = append(hashes, t.Hash.ReverseString())
		case *transaction.Claim:
			hashes = append(hashes, t.Hash.ReverseString())
		case *transaction.Invocation:
			hashes = append(hashes, t.Hash.ReverseString())
		}
	}

	assert.Equal(t, len(expected), len(hashes))

	// changes value in map to true, if hash found
	for _, hash := range hashes {
		expected[hash] = true
	}

	// iterate map; all vlaues should be true
	val := true
	for _, v := range expected {
		if v == false {
			val = false
		}
	}
	assert.Equal(t, true, val)

	buf := new(bytes.Buffer)

	b.Encode(buf)

	assert.Equal(t, rawtx, hex.EncodeToString(buf.Bytes()))
}

func TestBlockDecodeEncode470(t *testing.T) {
	// block taken from mainnet: 000a74c87488498ebf1d2508e607ce137f6ab3a1afc48b3b6e93bd13426b9605

	rawBlock := ""
	rawBlockBytes, _ := hex.DecodeString(rawBlock)

	b := Block{}

	r := bytes.NewReader(rawBlockBytes)
	b.Decode(r)

	expected := []txAttributes{ // 9 trans
		{ID: "48699eb97a0de207a2b7309c6431df363c480077a850d033739754aa9d45f0c7", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen: 0, WitnessesLen: 0},
		{ID: "d7f78e912ea77e28569dea6baf380f585ba15b630a4e381705e6036bd611bec0", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen: 1, WitnessesLen: 3},
		{ID: "419c83ff34b0f5e20833b161175f8fef7dc4771974530cdd496d20ec23f8b5f2", Type: "InvocationTransaction", Size: 621, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen: 1, WitnessesLen: 3},
		{ID: "6c4b7ee2e9c7cd7c12c1c3701feb73eec97e8f4b963b29282c8835948f006b5d", Type: "InvocationTransaction", Size: 538, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen: 1, WitnessesLen: 3},
		{ID: "31101fba9a46ba3b0c3f367f6d7ca9b807b6d714d8289b27884b10f4cbf88cc7", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen: 0, WitnessesLen: 1},
		{ID: "cb0b5edc7e87b3b1bd9e029112fd3ce17c16d3de20c43ca1c0c26f3add578ecb", Type: "InvocationTransaction", Size: 239, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen: 2, WitnessesLen: 1},
		{ID: "7c5258af1e911b01b1e03517dd5b9b129ccfc52804dd6d6ccbb41545c757a380", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen: 0, WitnessesLen: 1},
		{ID: "398df39e8c2388702a40dc5dea94f6d53654bc19aa38c6884e25577a1194d49a", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen: 1, WitnessesLen: 3},
		{ID: "9c1053246b4093e048a4ec202210773387e8384f65de04d1b9cedd3bdcba1f55", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen: 4, WitnessesLen: 1},
	}

	for i, tx := range b.Txs {
		txID, err := tx.ID()
		if "31101fba9a46ba3b0c3f367f6d7ca9b807b6d714d8289b27884b10f4cbf88cc7" == txID.ReverseString() {
			fmt.Println("XX")
		}
		t.Logf("ID: %s", txID.ReverseString())
		assert.Equal(t, nil, err)
		assert.Equal(t, expected[i].ID, txID.ReverseString())

		assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	}

	assert.Equal(t, len(expected), len(b.Txs))

	// Block specifc tests
	assert.Equal(t, 0, int(b.Version))
	assert.Equal(t, "268558065d8f14c55a87d50e7a6f352c43115d7ed11e44a1f472216ce0350600", b.PrevHash.ReverseString())
	assert.Equal(t, "2e23b356daf4a00debc1f03623ee416005caef7532babd6f799b65f166349db8", b.MerkleRoot.ReverseString())
	assert.Equal(t, 1534827445, int(b.Timestamp))
	assert.Equal(t, 2642675, int(b.Index))

	nextConsensus, err := address.FromUint160(b.NextConsensus)
	assert.Equal(t, nil, err)
	assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)

	assert.Equal(t, "40a2ce216375810eb9a059c177954b604c3eda23478ba287b8e38d24da081ef200f536f848e91a64066de2e464923e18ead372a559efd31e17675786f2648ebde940c16374b3a1220a18c67cc3f05eb408ff4818fb3abfdd1f6db7d9c480b7fcec7476a3b98f3c1cc1e65640adcd41989012d732f826d84d773b656bcb6512d73b224022e74607b3d7a00dd378577e1544bfee1f96f610615b3a02d57a5f3c9576b5da502b48c7f97a72e18ffef7fe8fa62cc0d6a1401d52c2db728b4a8e96203426d040a63dd23953205728607342b7391a25a0086405603ae1e48eed513c1487cd2102abc963248e290378c02b8e15c6fbce84be1cd1de45761f859b3a42801a26ec3040e2e857d8f56d4144bfea5732320b32fbc21ab61ddd833e01e19d3b3c81efd5715b207f19799412c1bba0e561c6c8fdc0263b4e3fdd6c6fe69425969f690b4f9e", hex.EncodeToString(b.Witness.InvocationScript))
	assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
	assert.Equal(t, "000a74c87488498ebf1d2508e607ce137f6ab3a1afc48b3b6e93bd13426b9605", b.Hash.ReverseString())

	bs, err := b.Size()
	assert.Equal(t, nil, err)
	assert.Equal(t, 4313, bs)

	buf := new(bytes.Buffer)

	b.Encode(buf)

	assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}


func TestBlockDecodeEncode909(t *testing.T) {
	// block taken from mainnet: 00144ce2f5543a3750d7a05ea03a30f6d9f001f0c28a32dabc2f7dd463459c34
   
   rawBlock := "000000006f03e7a14ba58ba957cc459bbdccbb5d419c0824d18e8911e4bac0fdad8d37aadd207e42722c672e74994366f12c31d9f8df30431d91ae58f2918f8998b27713505d5c58726e0400fce13ee0ea2e9e4f59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140536950ba2c73fda3f8a87f6bc0c12896adae0f0b70fd09fd0d2b697a3bd0e538008e20ce375e8bfc589fbb9af682acb4b3b4fc84010abe4934afbaf703e9f35a40df39f6a31aa6e4513a50c76dc1658af7f7b8ae2f3f00eab8abc979e3a2199412ec812b8807eec57567d13b4a052cc31cf2078bdae70e81c91986c185efc9f0e5405b9bf57782ea3769d4bce9446440f9e5d1cb5186334775c16a2df02788c0ffca5d236256874cb8d290919428e675403b4d7f065afea4e989dbae01652b50da12407c8f5e5c7678acadb2333a8d9ee07d86d02d9aa15c47b7c6f66c7c6ba3d4ccd7ad07221a58b557c3af622fb004682a54ac54c21e60babf0416441828f573146b4027db2443e3e093e73ba81d5e639825bf7146894b73e3e2b86c84f131455ceb8d2e9a586c40921958d35856269c5bf18e2278878c2b47fe9a8e1a00dc651bc911f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000fce13ee000000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"1377b298898f91f258ae911d4330dff8d9312cf1664399742e672c72427e20dd", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "aa378dadfdc0bae411898ed124089c415dbbccbd9b45cc57a98ba54ba1e7036f", b.PrevHash.ReverseString())
   assert.Equal(t, "1377b298898f91f258ae911d4330dff8d9312cf1664399742e672c72427e20dd", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1482448208, int(b.Timestamp))
   assert.Equal(t, 290418, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40536950ba2c73fda3f8a87f6bc0c12896adae0f0b70fd09fd0d2b697a3bd0e538008e20ce375e8bfc589fbb9af682acb4b3b4fc84010abe4934afbaf703e9f35a40df39f6a31aa6e4513a50c76dc1658af7f7b8ae2f3f00eab8abc979e3a2199412ec812b8807eec57567d13b4a052cc31cf2078bdae70e81c91986c185efc9f0e5405b9bf57782ea3769d4bce9446440f9e5d1cb5186334775c16a2df02788c0ffca5d236256874cb8d290919428e675403b4d7f065afea4e989dbae01652b50da12407c8f5e5c7678acadb2333a8d9ee07d86d02d9aa15c47b7c6f66c7c6ba3d4ccd7ad07221a58b557c3af622fb004682a54ac54c21e60babf0416441828f573146b4027db2443e3e093e73ba81d5e639825bf7146894b73e3e2b86c84f131455ceb8d2e9a586c40921958d35856269c5bf18e2278878c2b47fe9a8e1a00dc651bc911", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00144ce2f5543a3750d7a05ea03a30f6d9f001f0c28a32dabc2f7dd463459c34",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode910(t *testing.T) {
	// block taken from mainnet: 00144d958abfee45aede1c4fa11dd38b749e7695ef6d5cd9d00bf0f2029cbfe4
   
   rawBlock := "000000003e6808acae7703b5ccf968e51aeb6f681a39527dfc170debdaf8df620f4828d9138456e33c17a7d1fa05cdfc3c6ff51349af19c9d63005bc202c8aea20d1d44d762552588ce60300a1540e607006f7ff59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140ae6433b40902e2bffa97f297425dc15c97b57a217296dc901b963cb1c7014fcc5a34a2984353a5d3a4ac0e29e7f49582116d99155d0fbf70db4f979d09ef3d9a40533ac630690b1b5b50f65bbebdc7257c6d2495d874237f1929ac4831224c98df59d5d6d7d177b1583676320836114c7fe55ee62da133e231a0388366bdba6a0540d6e9175f7b3a55779785b0cdebc55b4defecc8a0d0b10a1441c1a30ea4c0709ddbf2a32ebb1031729ba191741b7e372ed0b1335589ed41850c7a6ba4a84309734013289f384f7af4d24ea4dd7101a87757336c76cc1a3dda80f4eb26003f3176a03a1bd812ff908f2ec57081913e978da1c3fad351d8a080997df9d50fde50839d40315ce84e1b4b6d85920bd6244539d1d81e645ae8a3419a380a0cb49c4beae133b48cfa31b5c5e939bbbdc41b705c7fd9651ed04ecdab6cf70a4eed05704a835af1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000a1540e6000000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"4dd4d120ea8a2c20bc0530d6c919af4913f56f3cfccd05fad1a7173ce3568413", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "d928480f62dff8daeb0d17fc7d52391a686feb1ae568f9ccb50377aeac08683e", b.PrevHash.ReverseString())
   assert.Equal(t, "4dd4d120ea8a2c20bc0530d6c919af4913f56f3cfccd05fad1a7173ce3568413", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1481778550, int(b.Timestamp))
   assert.Equal(t, 255628, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40ae6433b40902e2bffa97f297425dc15c97b57a217296dc901b963cb1c7014fcc5a34a2984353a5d3a4ac0e29e7f49582116d99155d0fbf70db4f979d09ef3d9a40533ac630690b1b5b50f65bbebdc7257c6d2495d874237f1929ac4831224c98df59d5d6d7d177b1583676320836114c7fe55ee62da133e231a0388366bdba6a0540d6e9175f7b3a55779785b0cdebc55b4defecc8a0d0b10a1441c1a30ea4c0709ddbf2a32ebb1031729ba191741b7e372ed0b1335589ed41850c7a6ba4a84309734013289f384f7af4d24ea4dd7101a87757336c76cc1a3dda80f4eb26003f3176a03a1bd812ff908f2ec57081913e978da1c3fad351d8a080997df9d50fde50839d40315ce84e1b4b6d85920bd6244539d1d81e645ae8a3419a380a0cb49c4beae133b48cfa31b5c5e939bbbdc41b705c7fd9651ed04ecdab6cf70a4eed05704a835a", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00144d958abfee45aede1c4fa11dd38b749e7695ef6d5cd9d00bf0f2029cbfe4",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode911(t *testing.T) {
	// block taken from mainnet: 001466945b2365e4c162f106cc44ca2dc945d97376f1840d9a48083a4a1f153e
   
   rawBlock := "00000000401f480fb909e905419ddd04b698517ec094be90f0f5111ba8f2776af8b4b942374f21d14133e1c8e5473d4252a0989d9eca9a06ec033d6278bc63f95cd53fbc6e633059dadc0e00773b900c7cee511859e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501409793cdc60d8da83323e990ec1e1dac731fd0019e436ca02635a60f6615a69c673065e9f27e09151f01c2253eb6069764adb1dca72232d0932fcaeee61888ab93405172826dab0a395ba94ff4b377310849945e7922e34097e44e028da3ee273d97f10b05090fc9ae02069b5e2b322bb9d35128848218b3c2011cde03cac81616b340830ca9b697a32a7743a3058986ea521a1f23863bb0f44546cee14be9c94d787278b845cfa3ba65022375a41a05a4aa5e8618cf7c9aa6776bf86e638aae1156284042572f6373650c17a9cfe83dd5eb4ef2d5975388d0e3d3efb02faa580385eca04c7e7e3ab4f89baa29ad505d0259f74e284a12d7832d7f2f5313e37d1a203cae40f06522c032a65f9a7c74b8985e0d569d5c1876f7ebc3a0a8c726b96c5712d998bc04611386d780cfb3681fd0ab132713a968c8ae498214b39d96cb96a3fa2166f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000773b900c00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"bc3fd55cf963bc78623d03ec069aca9e9d98a052423d47e5c8e13341d1214f37", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "42b9b4f86a77f2a81b11f5f090be94c07e5198b604dd9d4105e909b90f481f40", b.PrevHash.ReverseString())
   assert.Equal(t, "bc3fd55cf963bc78623d03ec069aca9e9d98a052423d47e5c8e13341d1214f37", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1496343406, int(b.Timestamp))
   assert.Equal(t, 974042, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "409793cdc60d8da83323e990ec1e1dac731fd0019e436ca02635a60f6615a69c673065e9f27e09151f01c2253eb6069764adb1dca72232d0932fcaeee61888ab93405172826dab0a395ba94ff4b377310849945e7922e34097e44e028da3ee273d97f10b05090fc9ae02069b5e2b322bb9d35128848218b3c2011cde03cac81616b340830ca9b697a32a7743a3058986ea521a1f23863bb0f44546cee14be9c94d787278b845cfa3ba65022375a41a05a4aa5e8618cf7c9aa6776bf86e638aae1156284042572f6373650c17a9cfe83dd5eb4ef2d5975388d0e3d3efb02faa580385eca04c7e7e3ab4f89baa29ad505d0259f74e284a12d7832d7f2f5313e37d1a203cae40f06522c032a65f9a7c74b8985e0d569d5c1876f7ebc3a0a8c726b96c5712d998bc04611386d780cfb3681fd0ab132713a968c8ae498214b39d96cb96a3fa2166", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001466945b2365e4c162f106cc44ca2dc945d97376f1840d9a48083a4a1f153e",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode912(t *testing.T) {
	// block taken from mainnet: 0014683878803b92ccbd0721ec573781183ec579c5705959eb241eedf243997b
   
   rawBlock := "00000000cd33099dda92d5d91113839bf938069e1ccc047eb51c7d2ae8bdecc0394b69319458431a900fdeb3b9c5ab93e9f73bb73b1c9d9b013c2c13889c4f70f8c701b64e7f5e5a4ad51b004e2295cb0f31c7e559e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140f6fe7c7972f9ee249688dfa8a8f2ec0ad744b9c110dd420ed0db5f5298bdd8e1721e6bb64f0696a0c2f42a1dabf2444423bb6abe74c56bea6597478734ab921240eade592db70d9742006892ad3a9a821df83fd380ff17be55c9f561f31cb3ad5d6d90e3151bc26006ed967e447ad88337b9aea2e77e27e43c44db93750d6dd35f4037ee4a2aa1266ac5641d108b4bf6e28c7e013449c718a82aa2eca93c4e4255f03053a7f76f7d9cab5ca9bc983bbce76a86733404634cb76fc661483847cb41b240bca477b43d4e327ca0709ff8397da28137db0c5dafb025a57828b62864122291479d6a910a9e7d34cff0795fa249ac25dfc6dd6be508b636355366793e567e4d40b63986fb1468ece11190ad45913be81b7471fe2b4e9361d3ad99ab7cf43e132451a10ad8630b70e155c383a98af49197919d615a1602d63f6c61699bf00ab31bf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae1400004e2295cb0000000080000001823c5ce9051b3c1c1c7cc761ab2cb191eef646409f75287782ca1f57edbdb4480000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e40b5402000000eb72b22dfc53f62c2a0e4236a72be657cc0e02c8014140030d22fd97c4ca723f21b6fad29005eafb36b0a172c490d8e6a693ec512435f9d351c45ec222f04db380733bde658b68ceadbfdcc6ea98c6474b531a05da898f232102308403c9dc8ae7a33200c70a4edeb486a3303e23d33fe032bf4c32b9cf5922c5ac020001e85611122a87ea0df72d06bbfeb3629c4b4c255f4df15422f759ca874c4ceeb90000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60800503000000000044ba89ce0dd688eb9b623daf5d3a4db5da85191d014140d1b193756ce53fbfd4776a3c23942393d92e5e314c651e327dab1c89932062065d11e9a3f0c6b6ed6e87580d1aeda37209989d694fee69cf640a821fdb89d4ab23210220f3933b2acf5d29c1431e5c1eb532a909e9bd0956436d4726948359a650b80aac80000001f355bd3336ae2acfcab7f3e4755d367f3e668ba4a86142614dce84ae37fbdcf00000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000bd18da088d36185248fd9eff2fe91747c1a986d2014140b7dfd11b911b7e371a575d81ca0eda3e97fdd66f03dd6d1eb69806529c9525f642ecf98c6110f09e4fed9f14fab6f8b84381d798f1921e028f805f308ac091bc232102ea21e2ca6cb6346c8bba91caafff2a02aff9c0a69e63e7f64a8de8aa63084c3fac80000001d718de39291c99817c04f0ea6b119887647be1705c3792c0ce37211c180417360000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50008af2f000000005f69f48ce42a2103475c31cb6420ad8ce10794ea0141405c2c3bec1f89af3dd1080d3b2c5f059e6c3405cb2e5cbeac808bf5d0d7af4a7590e1860b02b8acfab6fd29ef5d3fdd80cfc2db55e1b2551f3e77800204b46964232103de1a2d89fd806d165e6d9023882afe0268a02af002ca17e56f2fef817492754aac80000001d90765606b2022b931983ae17d7408389cf3b650de021db65433a6cd3f75173f0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e9a43500000000a84679488d7f02531aa9569868456ec9a00fe099014140e97b3c84494e9e0056616fe1a6af1ccd5cf4ef84e6a90d8ba2b4073522d1c4595e74b7c064f8c6826f87bdb686119b055b6050e724a4b4409195a43a7b92a514232102c0a4d1c9f176e782fb2d29b114fbcbaa56385799852b2da4eebf7c1bac610fe1ac80000001184aadc87fd5bada1c9e07bf58112a0effa96123e22e2781d7c2fe663f620fba0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500286bee00000000124140c6177f2b22038993548a7c4acffd35e6f8014140c880bbadce482e37f1adffa1d0e3c560be2bf1b9f0d7b0a1ed8e4af4e784114c18cd254dc516f03e02b1b34faa282e88f76d1c381be69131464c6b667be944b323210231acb3d531e661290a1905c72652bdf09c222aefe6e896f215cc24a43fb06f08ac80000001a87177a161178e4a342aaf8c9686f3e092cb7708358ebcff9b6a460f9cc72f8e0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5008eacbc0d0000007034d4f54c68f18b45e20052a67cd3a90d29b8a90141407a68e616a5d6a30baeced6facd8efe38e9f492eef8a196d02332e5dd9c8033025f40bd4bfdd1d87b1498ad2b5f1f3d77bb8f69c39a4b257be7b40d116d1b4ee2232102cf53e7e27f43948fdc63b0d368065ccbba90e7c26001cdebdc0aacb546f74079ac80000001c2697c86b9b99d1c01a757a13a5e95e7be77939448076f92aa881b345349ff9c0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000a891837157c5135d81a28febe84ad35e41a179f70141406a555af32a5ce6a852116463ccc68e6f9216846aca9826cfe4db5957d3af07635c2cc4850a136352ae6b6f6bb365f32a8d0eb6128a912e9c12d9c433292618f5232103b02bdf4c25b899e436999c381c26b103146c162021ddca0b2b6f005f50e18c11ac8000000181452d61fb4844cddc18acca2bf2b0d6bd64891a2d43be6f4feddca49f7ab7c50000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500d2496b000000006623d929507c00707dc008c365bb5d768accd68a01414004f148aae698e2bf57b5c3510bf50e084be575c1d896542753984b93858c6107473a012ba7190cc65d21fd77a3da27a869282f7a82483ae5eee042f8ecf5bd5b2321027c7ee134965b210b366a4365d89e150c967ac1998f86999454a92a6b82e31bdbac800000035cb245ac669d97c15ec369b091bf4ddae3e107130eb451dbb07c960ae69ed10a01007b547694396d5fb473508664bcda5935e5699cf2531ed1a64d294e968714a5fa0100b1acfd5d188b5e08b8e243cb86997ab53c1c7896e48087e82edeaf7351a5f9ce000002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000286bee00000000966da0f53196f93576220a6bf1f592e522e2bc42e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6046e68d4d0000000076f360afc00f27ab6b04f7082775d3835d310744014140b568fdb2f91b4bda4c088ef861c18013841162ca07c8cb8d181b8972b02b0f6590e09f83d4b6247148989d9b8b10e974627f573d14fb393690d53f2b7a4387892321028cdaa3cf338327911c764103c1cdce2f0a2d6295f0e575e8459e3a9eb07ebfd5ac80000001708fdf2897959caa4aee9b0087a5873ad6d7d5378e6bbb40750c4ef279ce2cc10000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50065cd1d00000000a7998aecf6aaafc913b535a4b01cf40014e1119601414079be3c1a9ac1f6e89f78587093cd0818e12bae851480eef1845e311c3a87de919e7fdd883baba06fbb223a15fefdfcc198a8d0d36582e7637a16f409a3ca8f76232103ac7967ff3771d8ee6ec0d7f8d344eb7e30fac8070f93a5293310cff785eb3cd4ac800000014136fcd53580520221e02bc6c8f6ba43cc94f28f2433139d46b7dadb00c431840000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50046c3230000000098de72fc033e3edf88d9010c93a48f42054ccbbf014140991f145d73983ba5461c02dca0960b5437c8901485f60325cb712f9be38e01f4b4075160e3c4c9c3ea9c8202c5c3eff6790e4df2fd63652a050b90805b22d48323210240e8fa4f0be45e6ff96aa8520ca3d499ebd8daa7d2b8714ee831210953f7b033ac800000017584bcb307283503d2bf39a3889c844481d21a003e13ce4278698b53df68e51c0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500562183000000004c35807cc945ae17f0061d37123b4053d203bab1014140880e639b457e680d0410b480030b577704726e8ea3f102f55f0ffbb8c7203404f5e3f92066b8c54654ec9a090a41a5175415327d0c0d7b49bafb6be4dfdd67ed232103948ae4ee89dde17b1523e9e84a51ffef97b6553234b092547f93943436c40dcdac80000001bc902a635d98b11600d570532e9971d97cdb171bc962e8117e7d1816eac11b590000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500943577000000008c0250bc0db340a40730f84c17b74992731f9f2d014140ae46227d55f8ab7e4de912c9824060ff6c72d09ca01357affc2a16207b4be53dd95893defd0a5f7fa02c1f4ec292a01efc9914bce61408135218a04549c22e7f2321027661758b19b0a9250223123777a6834fbe1406817de048f811ed867ec1dffc5cac80000001692a7b1e601c6da51085fc35141d842becce3f9ea0112b22b6ca8e206e695b860000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000011d04af3126ebc2fa717e99bfb23693a09481390014140f4ca0ed95dd923d23d01ec676c8df3f113ff70aa1c322877de04e008eb6825b0939a66b63b08cd6102b99ac22061410bb07674c1fe4196872208ab8e05a44b05232103f818d75c607ced471e8fb3d0fa13a50668f41d2291e36039302867aec0e44a19ac80000002feb964a8d2ab56e735fde93094c3482bbb23ad9740591fb153308c3f337ca5ab0100e1cde05568cf95758cd8c90c523a19e2918599e68a80ac34b60f4dc72773ab4a0000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5009435770000000044a10d7747257ee41d5cad50830478f1a560cc4e9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50065cd1d00000000ce3dd8db963e78cdca096a373c2c6a5d8a83b9b5014140c4d38242b0f7881ea393d635c1b81c1d57eee5147146649c0399b0c811cd2402c1d79e2ac15622f767120ba95ec9961330c64c4bdaec7d3f41eb608812da87d923210321f380d5250b3f3e46a099f7641bb739329ca994d920ad13cd02f6d1fcc42689ac8000000186bbb5c04d3f3e5455d1c5a196fd8f3c8cca5adc58ed23734fdb31b57eda25eb0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50027b9290000000043e0c32a22f35267e0501d09397559e57028a01501414070fc3746829ebfde692c4dd11c4845ea4c29d1b4e71e2ac289d7c8aa0e4c2e0870413ffc13b4c3cf3011af50e0678050ab476bb3f202aaa6885751b02fc63dff232102db885bf2297745f8f0f1b7b661629a1b76c7b55218b175c9cb81d90af0d73869ac020001871195844a103cc8faf90803df49068daf2cd1fdd64d71a4ce999316f5dd0c900000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60004a06000000000089bf38d26904bd015201296e2740bd4404b14bb00141400aa423d1206282a5f758249d5540f7596e7044354c3c5df2048b4c0c0258ec3318887812a6c164bbec8ba73121984a6b603c684098e31e376c2463ff19ce6acd2321030ea785921b056818be0ed2927538e5a8821f12fc964fe766b519540da3b0d1e8acd1015a05107ac3630d1425358e6e60a63018ece8cfe99dd87a49922696ba146063795d3b9b3cd55aef026eae992b91063db0db53c1087472616e7366657267cf9472821400ceb06ca780c2a937fec5bbec51b9f16687382d1dbcb0fb6a000000000000000001206063795d3b9b3cd55aef026eae992b91063db0db0000014140f311b7dc3757e2d970bd992de51173aadd60ce45eefdf1d5c07115bcda0a144a81e40c636d932905c78355ff0817805228477c36fa3b40eae490320eb6d3433a232102d41ddce2c97be4c9aa571b8a32cbc305aa29afffbcae71b0ef568db0e93929aaac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 20 trans
	{ ID:"c84213f323fb079dcaf0c8adc0dc91e8a18a14e9166f94161b6819a20e167218", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"cd86bdd7b939f6104f6d0b9853de75d92a206d98e759b4c88c4940cf171f10c2", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3bee99a3fea849b538365148dde0eddfd5d457ee399097263c887b431d24dd27", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"341664b26a8942809ef8d2f0167056611ec3b5827042a8547b6700515a2a999d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4caee46fbe1db285c438664d58f087e0e012665e7ef8cb8c2e3c6e3f1a3fd7f8", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"78120643ce34f55ab250fb18c83fbec56b5df3deb9911763c5612e679ae2f651", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6d0d643c918e20a4d7d583cbaf2257690a11d94cf22a4c65dba0428e787fdcbb", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"41da08941e63adb5679578d805f09b09a239010320d091b4d8a585b46e8ba22b", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f5cbe6b402161476f90413ddfc9aeb910fc51f04ef67ac9509c374eb014add58", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a7829f0ad9985606482609b3ca31d2abf54ca548e48645aaaa356ef8fdd27f29", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"03794fe9320164956de9db5d754385345a22390ea973feb04ab79a6868d6a988", Type: "ContractTransaction", Size: 330, Version: 0, InputsLen: 3, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"26e2d60080d92db91393b0f7a2a1015587a250ade02bf91ae9a52f33c35b3614", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"102ab55ccb781f26d165460df2bc2c5685e5f9f3beccce1043837de1c85c20b6", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1afc0d2202bf133f7ac250e5d6d6770570d0649dd7102c2c8727515058630140", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4ae34427df6e87babef61cc0604d6a613ed5de79cb09f6424506383d5a8c19c1", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"722773bad402ce777a7175e7ae13217d4767c2a975b16a8f73a22836d04ae976", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"992987664ea1a949f741a102d10775ee818dd8d53dde4d1e0de4319a66f20616", Type: "ContractTransaction", Size: 296, Version: 0, InputsLen: 2, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0eb223a654e358101cf42153cdb0b720637b0825908db7267b75a2218cf98646", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1602c89eeaef50e086a2066ce3b914bac287f7ce4893338da1b12e4ef7150f47", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"253ebbd09459667478670b1e89dba1488da963083aa90dcd543d81d8379f63b8", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "31694b39c0ecbde82a7d1cb57e04cc1c9e0638f99b831311d9d592da9d0933cd", b.PrevHash.ReverseString())
   assert.Equal(t, "b601c7f8704f9c88132c3c019b9d1c3bb73bf7e993abc5b9b3de0f901a435894", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1516142414, int(b.Timestamp))
   assert.Equal(t, 1824074, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40f6fe7c7972f9ee249688dfa8a8f2ec0ad744b9c110dd420ed0db5f5298bdd8e1721e6bb64f0696a0c2f42a1dabf2444423bb6abe74c56bea6597478734ab921240eade592db70d9742006892ad3a9a821df83fd380ff17be55c9f561f31cb3ad5d6d90e3151bc26006ed967e447ad88337b9aea2e77e27e43c44db93750d6dd35f4037ee4a2aa1266ac5641d108b4bf6e28c7e013449c718a82aa2eca93c4e4255f03053a7f76f7d9cab5ca9bc983bbce76a86733404634cb76fc661483847cb41b240bca477b43d4e327ca0709ff8397da28137db0c5dafb025a57828b62864122291479d6a910a9e7d34cff0795fa249ac25dfc6dd6be508b636355366793e567e4d40b63986fb1468ece11190ad45913be81b7471fe2b4e9361d3ad99ab7cf43e132451a10ad8630b70e155c383a98af49197919d615a1602d63f6c61699bf00ab31b", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014683878803b92ccbd0721ec573781183ec579c5705959eb241eedf243997b",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4774, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode913(t *testing.T) {
	// block taken from mainnet: 00146cf6870b1125daaffb40c7ead3decafe9fb71a8a1cb56b2f4b0b102c78e5
   
   rawBlock := "00000000160c0df7c35cb2461237e4c9feccb2f80f1a95925e9699c39be228cc742ade02d99761a25a4b8d4a6694de15919e0a51cb46bb608b905324cd1a2ec42a905ebcdf558b5b19f4280024967d6b2bb2ca9983f5011bdaaccee8c4d2555c829fa51e31551ef201fd4501408941d25ff918c9dcf345d154996cc4209f3de3f1aabbe1d43c0ae14b4803e84f59a2b3c443b09f5df7cf2c70cb8b3fbae7be3789faaeb81ee4cb21a9efafbd1840db9d0ce88387933e28adc4d631df5d246f2dc4cce7b0f394f082537c7deaae4fe4ee73e32a0ba9f3f8230b41141d4d39c81d8dd904c45ecb093d138acefe40ad402d1a18a1be43f388f51b5ef94aef5a24dbe93992b22ec4f9af0effcd30ff4d2a92d03eced92ac9d01e0d4c6afa904b7007c845860242c466790b32c326f4721940d22be77f757eda2e7a0412b1a724af91b4889b1d45566797007a55ecb36cef52c557cdf140347b197c836bf3e7aa4f3d269be3974a5933c065469736efae567140f284c225fe339e2a1e130905ba78782d940ad1de4591afac7ca1f6e7bf9c63c4518763cdc02f987e8300989bef9208bbe55bcf39c637ac7260e90d2b253d87b6f15521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae19000024967d6b000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60bc020000000000009f2d1729a79436148dc442c25f41335ef9f78bbd000200011906ac44a1dfd6af4c40cdd04efd5e18d1dc3586f41d0be4a3d6e4635fdd7ee8000001f0084f3358434c41494d0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c605477000000000000e5d5a4b7bd492e3c0900e5b3c40406ed3b48914f01414038e78507fbe3dd4cc65231f94678176aeb1650202ca03d4166351a6c7b8d92b57499773da22babab62555a21559b6dcb9ff62191f3fdbf5939fe8014dbb1107a2321038a13d2fd2da1d75bd6c70d7a63e81983bb9a0d9f620fde678a38b818dc0816b1acd10071201c584a0cf209559afca561c26dc94f63bf31f7224bc0916b64891be8cd66b418750480f0fa0214f06890f4a33008c349c7aa6ec5987e1aa01cedff14cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e950000001414099db716908ba674abc3ab7b6808213983098af9a38f779a73bc02b61f8e4fee132cf286919e85b34cf5b85973af1de0712b25bbae4580d09a1c3897400b3fec7232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbac80000001c7774c762fb84153b180453b96512834a8ee34a8d303e668697384739c4e5f470000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500105e5f000000007fa08fc22f795d4f8d968162a755ca0af2c7f4a2014140d952da1ae8a1ce0377da031b1a5fe35f4ce5f3e741fb6c2e6e79f699fbad5cd75978313cc711d105e0add7e9e70b0d9f08b7dec83740d2a1dcfa938dc35eaa07232102026829fe4c3d13739bce841d02625a85caa4cfacef99184838efae2cc564ba15acd1007120ada9f6ceb85232a94e53b1563277b155f77d44867e9a841ead62af83528a90b3750480f0fa0214076a4872d1f83ca9f7259fb7af558a9cd7d1a4cf14cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e9500000014140ad33c1034db9ed5bd6f2943d7405977e8cd5f2cdee16a98981de7ebc4f13457c13ef68e4da4dc3cad2341094c8e7e1877dc33f460d8f27eb9069aed72662189e232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd1007120d06225f1e3134e7539cd1adf8ac907f3a4d212ae8a09eea6b6f67057ab5971c6750480f0fa02142d11f521cc97527ca41e305e6dab259872afc18514cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e95000000141408eb6f6d375de674a1cae5f280c156aa4dafc8265dd4bc4cbc614590604f0452210a63ace177b9cc682a223ef3109366488d698435dc19a9c72ca222a8db09884232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd10071207202b59dba9bcef301fe3d0d835252782074881949307bfebfb1deaa5265afa8750480f0fa02149485ba32d9247a7271b0f2cdde43724f87520c4014cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e9500000014140ce999ff6f27acc699678b934e0ed404209be1805e6f295e776f12beb0b5f474c5de4ae032d8e1d2668d45396b1a0a2c3ccfb8552109bb312cbb7bea8f55ff47c232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbac8000000192b32ec208db2b486ccbd07f3cc2e6db870fadb8211e38d1bedec49100d34c350100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50084d71700000000a8ce54392e827bc3aa1707ca250b9b71315f2b829b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b00000000bf28093023643bb0858a119f0e065b450b14564c014140b4b7d16bab60973a1e9474cccdca54225f879e8598c5a7cb540ad05be014356989dd6e4b298291df58f8424a853ea1259d50d7717318d5204b2b7b55143510af2321035bdb8f130dfbb25037f93a26afdb0ea04973d893711351ed9afca51e3f4a17daacd10071204f0ccc736651c9e08b7723946c50e74eb71bddd62fa0865f847291c576ff3da1750480f0fa021413efbe2ad0306150fe2e0082ecc08220dd2182e714cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e95000000141407f874ec5ed0cfedb2ae99f6be6137c0636bfaf4218f4ad2a1a56cb55964d950e5f00d007f0058c4a4563f99eb6caa7273622eddb0ad02fbb9f63234c3ed4a27f232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd1007120f0c217d149c19ead18a697d950d87c1d0525a2d8cfe6bf1d52cf1754513205de750480f0fa0214cbe8faf5daf7c3f465b9d4be4ec963a6e38a3b0914cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e95000000141400c48dc154539d95c94d7d1727c9a15818222969bf49709919b7188e79015e638528e342ed945279ec4370991726d0733b89d23f549cfb21dd2b96f2d2f49f0ae232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd100712022f7cd315ffc1c6cdb650f3225f55eee9a3660938542c098a31cb0074a873a2c750480f0fa02149298cf0ab237378e959b1784fc005f20772628ec14cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e950000001414019b6696796758fdceb778edbcf48f2484ef647a8dbf718e77f1716f1f7f14736685977d07de8e41fc955aab4cd0c9aeabd4169e8e1e8fedb1f2f9b54529566be232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbac800000018e1f19a5f247664ff2ab4d5bcba0b68e4164c8a90565db2f111c612f366639190000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ca9a3b00000000308db3822f9e8a74cf788a173ab64fc6f92406ae0141400c73ecd95529531c2d38f2915781d424d5c3d19e8dd9ff76b0edeefcc7e246aefd18b19c2112fd17e9c5fc4a08c76bad9bbab987551d4e5fa7a5742c22c162fb232103e0edebabfe199bc815f9d3fc34e026385001c8d6f8561fc04e39cf6603a55e3dacd10071207b7926e97017502aae5891c4b7f10ceb3600598bfcb125f123d7a633506f0389750480f0fa02142e7b0b7eadd5abe2da3c1084a603815679495ba214cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e9500000014140ffdf116692181b203fbce114c30836a508ab249d8b152be06f90c403593e05dd77147399cbe38ac55670f03624d7a52682e7a631c4ee27a27f70b1a7c761193b232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd1007120ad8c4976e71130cd2eb73b4fd66b6302e9699b7f79ae299a620ec9fe465a2785750480f0fa0214dccbec6c06a2b3e8af835120e0b14e430afe689f14cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e9500000014140b92d781c22cfe29ee8596096567b903b6d9e907ee44207c586c17bd3e5d5abcd202a3f47506020f60ec8fef519474bc8b73b2d44bb5d01701bd4392e349a65e7232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd1014420b5a206c2f2c838699c7ec8085fd33e716510cfd3055ffc55f77bc8eab898002a51c10b63616e63656c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb891000000000000000001208644bc1b8a5c3b1f0cdc4d286570b3be1806be5102c5917db35c5a5055248c5ce9701a5bc61a5bc3b48ab5e95e36d19ca8db92977900008c5a94c716e7c0f71e742000ea5eebd2525a82413c35edd55c4e6d2a8097e1e10c0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7034140357f4c9c7002045b9741977a9cd23ad7d90303563a3e766e5f8849d5642007dbab8e9106fddb834ff6ce611f55f3b206a4d6b0d85cc42e440c7733650fb2b94e23210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140fccb39b467af6c1c76f651b675121c0c78e96681d5ad7ecaf61ebc8beb37396ce2152ccf133635ac6d1f5432702939630021ea279cab8d498625336a410fd600232102511f26e4466b62b62042b63f5dc67bcb75ce1f03ed6c6ee1d2c3d844af7e4938ac41407d423e405688b9091498af1df3e37a58dcb1e1d9c69f9a784b94c997418859d95487edd85182e5f48a42187a7cdeab7b6f6b239ee72774a12a97d2b70acb32f2232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1007120057c095eed37e5e3dc41ecc7be6cd81286f3227a3d1fd4af242303e66fde93f1750480f0fa0214c917f75f32efd8cca651137342fdf1e16a65961914cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e950000001414062471cc0aa52f5caad07ff59c0e383f96642269f07e1d6dccff9becd493c27963ba3918a477cfe25790a3cd29fb20ef3e5ee690d40ac0427acc0bc092fde4978232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd100712017b71bfb2f74276e574cc760de3586a6bbd7564506a7cc6acaa8e07c13f67c1e750480f0fa021427d86bcffa5c307ceb46f99de2f9b2f09f47427214cba8356996c355ba122541198411aa370e85e95053c1087472616e736665726799956267fb8c5557369839f4c3a6bb9d19ee6ac30120cba8356996c355ba122541198411aa370e85e95000000141409ff731988e32879eee3fc5cd9e4a6dcedde935004c9a7f3cd6a8b7e90158668176c91830a49e2d5e5240f49b744e888eb715f30836fc1691c7e0b99433fc9497232103410091c53e237d26b555862a4019df8b5ca14d8bd5bf6272eced4abf2774edcbacd1014f0400ca9a3b144b79fd361ab5af5f9138e2da59fc22ab8f6d55ff14366e8c2dd2215969bd3c6878d1f82f072f9328f453c1087472616e73666572678bfeba0c4b9e5d617f38491403ea356f31c2db11000000000000000004fee06e656f2d6f6e652d696e766f6b653a7b22636f6e7472616374223a22307831316462633233313666333565613033313434393338376636313564396534623063626166653862222c226d6574686f64223a227472616e73666572222c22706172616d73223a5b5b2266726f6d222c22307866343238393332663037326666386431373836383363626436393539323164323264386336653336225d2c5b22746f222c22307866663535366438666162323266633539646165323338393135666166623531613336666437393462225d2c5b2276616c7565222c223130225d5d7dff076e656f2d6f6e65ff0a3135393237373837343120366e8c2dd2215969bd3c6878d1f82f072f9328f4000001414001de445dba955191cd177267d4dc16cfc9925edb447dc284b22e7c8f308b66c05c743d4c690149349d91da13642b0ed25be619d08d80d9ae91e1cf824195c0882321038753466d3bc610635270def0f74b19461dd0d4baa75268fd915ff97026a43b21acd101510600cc7b9fae0014ca4cc6778bac3e34af1361522e184c03fd722a0f142b0713868e3009d731fa045c789d4ba6aa85d92753c1087472616e73666572675f89105fdcf8b97739c68f3e969d60b6e98bfa06000000000000000004fee26e656f2d6f6e652d696e766f6b653a7b22636f6e7472616374223a22307830366661386265396236363039643936336538666336333937376239663864633566313038393566222c226d6574686f64223a227472616e73666572222c22706172616d73223a5b5b2266726f6d222c22307832376439383561616136346239643738356330346661333164373039333038653836313330373262225d2c5b22746f222c22307830663261373266643033346331383265353236313133616633343365616338623737633634636361225d2c5b2276616c7565222c2237353030225d5d7dff076e656f2d6f6e65ff0a31373634393331353438202b0713868e3009d731fa045c789d4ba6aa85d92700000141400dd07607617c5180628de1d9044864552ce75f43a3ab2abc37455f6b02a6cc3f928853e4b6ebbd8c28369be884de865b33da20d0c60e109d68583e1a56de7d4d232102e7975ace10d5a7bf6161a043527791f3ca013a74584eca36468fba340c167af4acd101a32462633563313036302d306535312d343335632d626434302d64353337323638663164666408bb6de4379b310000147a9aade2572b1507599a582eb1f177f31fd6867f087472486b00000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc514d4844a522c393beb56e18198f03f1cf79d9ae29e56c1096d616b654f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb89100000000000000000120d4844a522c393beb56e18198f03f1cf79d9ae29e0287d88754e7da2c78bd6f5f9508b2fb59b6f7156c30d265d92d1ac09dfcb3779600008c5a94c716e7c0f71e742000ea5eebd2525a82413c35edd55c4e6d2a8097e1e10f0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70341400ee6017e6852ba5a25599d56322bb71c9d9d1342ebbe47fe75a2277bd3f1c7b137673b226fb80373e01cb3c9c5d5e73421bb80bb95b692b743b1a0b7ff00f05f23210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac414041f4b840bc86bd3a019b202aea064d5d524b538dde2cfed5689a1a3ce214c93c722dff383a832e8272ab0404b686896a5a8f9b216e43e025dc5a0d3459071d5a232102849bb5828d481acbcd1339ee9a000d5ac32669237f4bc70d789dd0e1c2b17f5aac41405c3fe91fe995da4751ee4bd94050d10dcaa4c14b65aebe86b852155b671952f659aefe9676f03a191ebf13de69301bfbbdcf005b492f2c964856c6c2ed7d31a3232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1017f5108af449ed6000000001432e125258b7db0a0dffde5bd03b2b859253538ab0898bda5cd5d0400002034b304699cff41a4434a6e1af22628ab9375ce254c085164f53021fbbe998d231420513948f2743f34e0bd2581feed835b119604c956c10966696c6c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb8910000000000000000012020513948f2743f34e0bd2581feed835b119604c90206a78a14ac488ca6d6c78767e63e6a2ee3fbc3318b49e5b3e521720fbb5532b400008c5a94c716e7c0f71e742000ea5eebd2525a82413c35edd55c4e6d2a8097e1e10a0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7034140d315fde876863c9ad3eca3d638027c7be752f068a2324472e9a013b158143d934b8491269d1974e631ff756412f4b11b4aba71ee2a795cda5433d4f278a697ec23210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140bc3849f313229e3968d939b9e46f31e1be8801ad5f0c18fd3b011a662abaee1e42db2b393fc5a9b2b5e194180e39dd6552d44a5b30c9a315c4135a3a0d45bbd1232103bcc2d5cd7de7abdf67b3c574fbf3a6cf40a411cb11621ee454f1ec7e9f04287eac4140241812aedd4d9c54465e3a44ee70c653a9b6751f0f376cc829ae55d0122b7bf34bcb2fd920572993f414902cab298068391a9be218afe49e00b5357ddd98c0b7232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1017f5108af449ed6000000001432e125258b7db0a0dffde5bd03b2b859253538ab0898bda5cd5d040000209af84169e6e20b33d17ac92843f591e468c28576cd4ad65defe2e9de7595b4f11420513948f2743f34e0bd2581feed835b119604c956c10966696c6c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb8910000000000000000012020513948f2743f34e0bd2581feed835b119604c90278a2212defa67a8a1073775ce08774c9f80534300e48b26933d16f45126a012000008c5a94c716e7c0f71e742000ea5eebd2525a82413c35edd55c4e6d2a8097e1e1090001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7034140416d8b7df2787622e9d48b35692211ee6c0848a89b6bf57337354e1123ad183dce6e83b2dc731cc075c2e8c19da80b697878742bfb48f268d9ff47ec6007399b23210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140c5c95affd6002a7050e4de98af536ff98f36a9f741466269acb7abb5b10ba9d05572b6e5880aa51172d8d12989f11d1089d482c1e30b1e1efd3a0a80c42ce671232103bcc2d5cd7de7abdf67b3c574fbf3a6cf40a411cb11621ee454f1ec7e9f04287eac414082225e475321de17cadd63012abb4439eb30c15412ed32bbbbd7d8e6a49a29e1b8a117794c86648898dc4c598dd83116eb8eb1974af8f38493bd80dda131b6c5232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1017f5108aa8765b6010000001432e125258b7db0a0dffde5bd03b2b859253538ab081845cd50eb0800002011ff380262581a1426aa79142a351131eebaa54023f7f81ec2a78170721e96b61420513948f2743f34e0bd2581feed835b119604c956c10966696c6c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb8910000000000000000012020513948f2743f34e0bd2581feed835b119604c902f0174d54644672d68b760f8186a83c60141f9da325d2c8f5a9ad0c0b5a1b4d6e00008c5a94c716e7c0f71e742000ea5eebd2525a82413c35edd55c4e6d2a8097e1e10b0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70341401d25c370371a1eff99e47ebb4d9754e3fe7784d8f99728ca866e896ea7f05e6aa59e87074be42c71cafea16738c5d01050c36aa3fe931c970072bc1fdfde1d0323210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140d68e5bdc3c2ab1da439306beb744394d3b034e8c7e75f56515dbbd172d4e41d64cd5f390210b2e5cf451e63b1a7111850a45c0295156a619ac1b1dcddd85aac2232103bcc2d5cd7de7abdf67b3c574fbf3a6cf40a411cb11621ee454f1ec7e9f04287eac41406972a9c85e6d679ad5f63c5617c82b101dbd60f901bf652b9eb3b90ae400a475ed7960d1f9117c3f1885bc57533dd88a8d97528d62b6db15838b105c84819bb5232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1017f5108be25cc48010000001432e125258b7db0a0dffde5bd03b2b859253538ab08bfec997cb00600002007feab34859ebba12295fc5726ac8d2f2aa95720f4565606ee300ab09606379b1420513948f2743f34e0bd2581feed835b119604c956c10966696c6c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb8910000000000000000012020513948f2743f34e0bd2581feed835b119604c9023c01f5b45be6d54728e4a346b67572c5934e500e7c75746bb8d0fddc7f2c570a00008c5a94c716e7c0f71e742000ea5eebd2525a82413c35edd55c4e6d2a8097e1e10d0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7034140718388815d6bb26b80bb305c8b1429fa6794b926a25bf232ec2b40f525f1f97a4a5ed4add9f8d1f5ac0069abd893e50ab8ce47c766cca6f088b75ca7245cec3623210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140ed2de53636c706a1c021c095787f5e0d31ef2922241bfa6df29b78a5d84bc91f131e9056c181f02598a2dd631915c96b9546c1997e6afd8b5c49ddfcb76185e0232103bcc2d5cd7de7abdf67b3c574fbf3a6cf40a411cb11621ee454f1ec7e9f04287eac414023fb84d274d42dd22cfb1af9bf26093017094ddcc90975c4758b91f62d96311f9ed02ceb0a8bc4aad988cee194661d011d238a3c2f7ea3cfd9cac58f81b86995232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1017f5108cbf69cd6000000001432e125258b7db0a0dffde5bd03b2b859253538ab0881b7dac65d0400002006bb6fa14f11a043d894fdc7b8880f53f2f3135c429d7025fe6e45229c1e68b61420513948f2743f34e0bd2581feed835b119604c956c10966696c6c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb8910000000000000000012020513948f2743f34e0bd2581feed835b119604c902e0c6437ad46258f5a09b4f7f99ee302513a66d1f00f6439d73611894f5064d0f00008c5a94c716e7c0f71e742000ea5eebd2525a82413c35edd55c4e6d2a8097e1e1080001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7034140807a2b3a664a82925f1bdd9ae469a96906a89380b66f757c5523d1e3bdcfe7ef448965ab432cf8969f43384793e8f56863d889c94c420788ed7a56d76b69981e23210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140c1c218c43945b311b93d12bc4ef7bc57efcda3ded8c19928a9128b693606bff555553d118c0c586e049227089fda07442a0a74c58277c2cf4697d7f0a4c43b1c232103bcc2d5cd7de7abdf67b3c574fbf3a6cf40a411cb11621ee454f1ec7e9f04287eac41400d4a3a417626f1aff155cef1701ecfadf26832d9ed9afeffd8c08a57399b24123b09bb4dfbdc62f2359caef7daddebf86975ef715c9f496e3a0d490d3babebc7232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 25 trans
	{ ID:"88acb22082f5bab331df744de312062b8097e3fc02424dfa170e213b5c9130e9", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:0}, 
{ ID:"d93c4f35f497172bc65955f59ebc9f9a39842c53df34470f069968d2cd9efb2f", Type: "ClaimTransaction", Size: 213, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"cc52baca72ef03f7171de7955097a09ebc9ff550630ddc772f0f495bb554506a", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"b1f3db79f89157c53ca4b803a952a322c1b80809a241434d8edd52dd21395fa0", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a63f6a702d387f30acccdf46bfbbe25124853df278321950adfc8751ae96ef66", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"c1871e5fee920cf54cf75ef88a4dafbdfd22930478cfad18d4f55d347ca6c655", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"fc63a07b59a60f46fd3c4a7e46494e5a8b68d88b6fdd9ebfe49849a02e3a5c56", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"0f7a920b8a86c6a42d90a3c5713f1b76fe14a1b72e12e7c88b82c0386fa9c4e6", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3a30f4df217aaefc8251dd54c60642a40fb57115bc81d19a61ec2b08431d1607", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"9195c221c5c869bb3731ba6373c974383d28c2ad445559b27d410dd9ae817c8a", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"1e62f90bc67bd19d2df03ce484bb872ca8ef91369d1483d4f30f30f054aa6a29", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"a9764c66d7be9cb8ba986b1264bcb0617b6296c544c9f0c9e8f0aa7962b6d327", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5bd0916d4d3e0ec9a008e7aa745dda959b62e215bb5fb742bb4f7ed7846934da", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"05f7e04f65e4327a9e8e932a1165a1acb653be08d953fa5a0355d5f2e5455fa6", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"b0656a92df810653d947800042682b1f1faff8beb3f67e042746f07c59939200", Type: "InvocationTransaction", Size: 538, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"b8c3ad6fe5a2a7fd9bbcb4a6a85d32b3d8fe03442c3ca531a158c10099956b37", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"697fd740809c2727e7327e7adee7df00d757e71697a8f4b3e9582445d4e35843", Type: "InvocationTransaction", Size: 243, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"94ce6170706dddee2c60341a72419566463bd73082098a152cf82a8cb6c3eb01", Type: "InvocationTransaction", Size: 464, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"1b2e62b4b277f7e997a434b076d78e09340ba58eba222dee10e124a81989f62d", Type: "InvocationTransaction", Size: 468, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"d05c37a5b18bfa1b2d5b16ed2cd63196ea03cf8a41a4b42b870d62f921f93f3a", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"b7e6098c42f8f11c5548b68d2ee1aa641ea0b50d51077369e8702aad53e0cbda", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"845948e6bdd603dc325849c64bbf7a7635cf2c199fa021f64f679c92dfc7bc30", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"fbfa12201cc1b0ff72a6d8431d1f4070c430b61dc995951e9e709ea483f26932", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"8862b6b9dd950273b5bf1d68edd9f47b23d15f04b844596de079ff9e0083ffff", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"402b07f72b2bb954fe88a7b2b656cd942973b2892db6db1d95e6e80494a86b3e", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "02de2a74cc28e29bc399965e92951a0ff8b2ccfec9e4371246b25cc3f70d0c16", b.PrevHash.ReverseString())
   assert.Equal(t, "bc5e902ac42e1acd2453908b60bb46cb510a9e9115de94664a8d4b5aa26197d9", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1535858143, int(b.Timestamp))
   assert.Equal(t, 2683929, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "408941d25ff918c9dcf345d154996cc4209f3de3f1aabbe1d43c0ae14b4803e84f59a2b3c443b09f5df7cf2c70cb8b3fbae7be3789faaeb81ee4cb21a9efafbd1840db9d0ce88387933e28adc4d631df5d246f2dc4cce7b0f394f082537c7deaae4fe4ee73e32a0ba9f3f8230b41141d4d39c81d8dd904c45ecb093d138acefe40ad402d1a18a1be43f388f51b5ef94aef5a24dbe93992b22ec4f9af0effcd30ff4d2a92d03eced92ac9d01e0d4c6afa904b7007c845860242c466790b32c326f4721940d22be77f757eda2e7a0412b1a724af91b4889b1d45566797007a55ecb36cef52c557cdf140347b197c836bf3e7aa4f3d269be3974a5933c065469736efae567140f284c225fe339e2a1e130905ba78782d940ad1de4591afac7ca1f6e7bf9c63c4518763cdc02f987e8300989bef9208bbe55bcf39c637ac7260e90d2b253d87b6", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00146cf6870b1125daaffb40c7ead3decafe9fb71a8a1cb56b2f4b0b102c78e5",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 9386, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode914(t *testing.T) {
	// block taken from mainnet: 00146f42dee86193da04fd1e62d72e7cf57fe867c298506b3c62b07855c27572
   
   rawBlock := "00000000a0a075c2df040a47dda5bbd8722b14fbd4886970bc6ed2918f2f99555152130945902ada4c63498576361bfdcded2bab3e17dab3446d78cbea91d9f844879b7713af33593c050f003bdd06a0853b5b9b59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501402e0b557ffc8b8b0e152933e12d3cb7b232de263c8af42225df4c8afe9ddf0c16e7d06a45eff76a7be4cdd215870f1efc235a9d332bf6a44bbe91ef6f5ca8553240f67f4bfde367086a27177ecc35449958528c6cb62e8d15b0ea9f3971956297f498f4749d2c05d982a58a2c50c57b47d831452b9871efe8b9394163cd7453747040a80e8f686eddf7fb6d9e81d89206cfe213b37d4a2aaac02520f2bce1248d4e422b67a2d1dab4f20063f9b89bbd00336a639f75f003fd4bf950687d306dfdeb4b401cca254dc3d831c549cc6003a40887a53f89a585d818c6c5efde9a72d39abd407f70103bb1b4d883767ec55654e5eef4ab021ca3e492ffc7a08918ca64447fc1403a1087482e9c6f1a97721b3741bba121c147c1b9c9bdb41515d1dd6ba90bb1cf8ce782c51cda97a2776f2628a241d201f3d8957509b3f90613f982c88675dde3f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100003bdd06a000000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"779b8744f8d991eacb786d44b3da173eab2bedcdfd1b36768549634cda2a9045", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "0913525155992f8f91d26ebc706988d4fb142b72d8bba5dd470a04dfc275a0a0", b.PrevHash.ReverseString())
   assert.Equal(t, "779b8744f8d991eacb786d44b3da173eab2bedcdfd1b36768549634cda2a9045", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1496559379, int(b.Timestamp))
   assert.Equal(t, 984380, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "402e0b557ffc8b8b0e152933e12d3cb7b232de263c8af42225df4c8afe9ddf0c16e7d06a45eff76a7be4cdd215870f1efc235a9d332bf6a44bbe91ef6f5ca8553240f67f4bfde367086a27177ecc35449958528c6cb62e8d15b0ea9f3971956297f498f4749d2c05d982a58a2c50c57b47d831452b9871efe8b9394163cd7453747040a80e8f686eddf7fb6d9e81d89206cfe213b37d4a2aaac02520f2bce1248d4e422b67a2d1dab4f20063f9b89bbd00336a639f75f003fd4bf950687d306dfdeb4b401cca254dc3d831c549cc6003a40887a53f89a585d818c6c5efde9a72d39abd407f70103bb1b4d883767ec55654e5eef4ab021ca3e492ffc7a08918ca64447fc1403a1087482e9c6f1a97721b3741bba121c147c1b9c9bdb41515d1dd6ba90bb1cf8ce782c51cda97a2776f2628a241d201f3d8957509b3f90613f982c88675dde3", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00146f42dee86193da04fd1e62d72e7cf57fe867c298506b3c62b07855c27572",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode915(t *testing.T) {
	// block taken from mainnet: 00148bb5fa7e0dc43ff35d635447b6898134072c26e6cd7fb15420bbf3f6edb4
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 19 trans
	{ ID:"67016b7560c1c035d20ae9d7bc20826d2f9f42400b5e635eeca1a7181710d828", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"24a7f88fff7ffea954563b816bd3a778967fbcea6b70a81b0e7bbf136d6425ca", Type: "InvocationTransaction", Size: 461, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"1dbb8f247bb0a277a7e765e9fb029ba3f61f589dc34a14c872650d917c0979d0", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"17fd95dddeb81eaae23912497b81001d8f1a80dd5b328ec0ca0cd0857f25e636", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"b0cb8e1a108f170a6bbd67a4f899559280eaab9c7e11175d930a223458000b10", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ef75c116681b42c88a733cb6648050f24affefaa3d2471785767b5d177759cb3", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"f75777d18a5d47e468c79ff3c8af6d8f1b7c21d3db70f7aaffaf0c32518b013b", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"fb60448b8d2a945612ea1d098dd46f7946a4a01fa69fac5b33150ff0f7a70eec", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"df52e2187c92c4a71265106da8e44150cdd465ac4cc20be960b8a1bb02069680", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"6c5eadf466a6a7284daa3b25eaed38e121e0ed911c31202c6461cbf69e018b73", Type: "ContractTransaction", Size: 211, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"70b85980feffb87c337feb8b88fc06dd7eeec71ecba395cf2525290127bfea36", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"1ee660d61a614b6dd0d9b9d5680930c1e0e3a57e1eccd9c1d90eb463f7535a61", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"a87a41ae1bef97a6de7636bd78e53cc30cb8f8539beb8e361ae5f4a823a67871", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"819db0d6900e321520a685dea38b8ca911d3f3dd28fd858ee1a06a12d4993fd8", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"8d71e6929151d55101492498027c04fa886915f3a647138b2a44827255b61250", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"402cd1a487ede2e839f357ad805f79b9f3b775d29718c479e93aae40bd861e9c", Type: "InvocationTransaction", Size: 394, Version: 1, InputsLen: 1, OutputsLen: 2, AttributesLen:3, WitnessesLen:2}, 
{ ID:"ef38e6f6d10185d23758d7261866c42defb7086bf94e1ff291122a8e8aee82db", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e38d033328f0400494ceb875472cdf74f6ef65a078142263e728df34aa0d5693", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"6dfbd975b907062a9f2da278b467a8efdb3a17a75b7aca168a88fb61f6f9d462", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "6cd81b312db88b0bd03d830a9480cae786bcdb4606098f2cbdf23bd379f243b6", b.PrevHash.ReverseString())
   assert.Equal(t, "ed987e862f99f9729cfec3322bc7a654859e27d79aa108d725d05316c80c8c82", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1527506495, int(b.Timestamp))
   assert.Equal(t, 2322560, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "400f123000fa6fb4cc92c44860cdfe0e7c8b1b5e26a7aa23dc358aa37ff4fdd4182eb2bfba11550fbdf06fbddb3acf188e507101d55f9f90e56a8b668de1fb2d7940307609204003fcf56f450acc5f7537fc08d76c8626e52f1f2d2e8a1354874957ca07c5b28153bf78112ca4140bd5cd5296b237cd8968e4b0709806b47718c6cc40f39568c3490589ed7a58fac7f1a8aaa829b8b0717b6ee78d03100f7e5181106067a567d75ce0cf33be960da3aa76fd293d5596ae6c697c7c0c7f651bc31eec8440abce528fc6513bc209e310706fa0f1be944fe2cff2927c40db3a87e40f46ed08137ebf59192e886b3bc93c4e4a8e7fe1ed35c26795a60c183153b60cc8a9f937406a0f79c65151d49e8c597c71db172f21bf0713b3741992410891f336fdfc33a6becb2e862a8f3c67da55ae76f929efde501dfd48eab41a37663c4ea8dee5ecfe", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00148bb5fa7e0dc43ff35d635447b6898134072c26e6cd7fb15420bbf3f6edb4",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 7626, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode916(t *testing.T) {
	// block taken from mainnet: 001490aac79b92b6b54744f2208fb4dddc0a4885173993287664501f565464e5
   
   rawBlock := "000000008c6a140f7906eb5ad00aa34f94764380baea35a3110727680f2d43fb36626183dcd9d59f379c54488f5cbded44cdda6e889d00b5d8b035f4dceb29def3b5a35a772794588d3907006c37a9a4c5c0259059e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501408172d3321000726136f425f0ab04d108f4b92e5cab06d41fdb18286a98808ff9eacc0939cf233ea680e151ce0e1cab181c54dabe95a3f098e3bb54e656c2d9cb403de60de1c0d78f87f1f34101357f6815e8b443fb67091f4c08936a4a2b2fb4844d7bee6e76ac89fef1ff4d1b21290e22854f599ce2e0a7637eb6e4f8726d2e1e401ddc4660183574153209f5dbcbb637cd806ebe785a0647b79cb304aa43b716ded9a5be7320091060f8233bb9ca3bada9effa404e4e269d6338fdffb694d2480340d2312f7112f76a8c88a5e7e635427df6a726ec32145a853eb9bdf143cfd4cd9e7711329afd5aacb67682e1a34d50067aa081e13c96ca57d571a8fec133d289b04043ef4be07236e3ecbbb76e1e31459189b2e47e93569ded4f230c2dbd4627d60edeeb8ac79c28a803e365d7d6e038d263efc058f575e91a016f45c5c83f3a56aef1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100006c37a9a400000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"5aa3b5f3de29ebdcf435b0d8b5009d886edacd44edbd5c8f48549c379fd5d9dc", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "83616236fb432d0f68270711a335eaba804376944fa30ad05aeb06790f146a8c", b.PrevHash.ReverseString())
   assert.Equal(t, "5aa3b5f3de29ebdcf435b0d8b5009d886edacd44edbd5c8f48549c379fd5d9dc", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1486104439, int(b.Timestamp))
   assert.Equal(t, 473485, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "408172d3321000726136f425f0ab04d108f4b92e5cab06d41fdb18286a98808ff9eacc0939cf233ea680e151ce0e1cab181c54dabe95a3f098e3bb54e656c2d9cb403de60de1c0d78f87f1f34101357f6815e8b443fb67091f4c08936a4a2b2fb4844d7bee6e76ac89fef1ff4d1b21290e22854f599ce2e0a7637eb6e4f8726d2e1e401ddc4660183574153209f5dbcbb637cd806ebe785a0647b79cb304aa43b716ded9a5be7320091060f8233bb9ca3bada9effa404e4e269d6338fdffb694d2480340d2312f7112f76a8c88a5e7e635427df6a726ec32145a853eb9bdf143cfd4cd9e7711329afd5aacb67682e1a34d50067aa081e13c96ca57d571a8fec133d289b04043ef4be07236e3ecbbb76e1e31459189b2e47e93569ded4f230c2dbd4627d60edeeb8ac79c28a803e365d7d6e038d263efc058f575e91a016f45c5c83f3a56ae", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001490aac79b92b6b54744f2208fb4dddc0a4885173993287664501f565464e5",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode917(t *testing.T) {
	// block taken from mainnet: 00149a894592ccbd92152cad198e1f5775f2030959595eb33ef0da9ffc2b953c
   
   rawBlock := "00000000b4df0987c598ed0edfa8a56767090b6bd55fbf988700fe9e3b727f82e0d82afdfce36c9aab741fb61a14584039a79fd8a47a54189cfa2b4693d662a6311cdd58962cdc589ac10a002e461773cb12f05459e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140639672aad40fe9968e114295e535d1ae98157d1a783bb629ad453a540cae33de513096e83c6cad0827ca6480addffe841875161962ff60dac7d4286fb78b2d54408ee4f5b8ce374b396aac476265cfdca6325af55a1b7fb87c002eaca8663a257c9606e201acf57773b06b429219178320e180189aba50d34a4b22f9e195b4db5e40640b4366357d733d5cd91ee91705f1b7ac8ab0f4f5c0c4584b588475fa77df96dfef4f40e84295ed9fe9a4ead3d390836b8cda041e7ac4f482c32814ecae6d91403472ad005219af841c5bb96e342c71a0d59a12e0b32cca900348f9f6d876a1d6744eeb2065a1c48e59b4a8c746e356d4c6641bc193818039b11bb8831f23906b404d57a9a7fb829de2e01ff091ef05f6a62734ac4a3d87ed48b2e1909129b18a28982b39af1b972c761c8a0df58a079766e7b251c1adc7a62b6db544075105e95bf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100002e46177300000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"58dd1c31a662d693462bfa9c18547aa4d89fa7394058141ab61f74ab9a6ce3fc", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "fd2ad8e0827f723b9efe008798bf5fd56b0b096767a5a8df0eed98c58709dfb4", b.PrevHash.ReverseString())
   assert.Equal(t, "58dd1c31a662d693462bfa9c18547aa4d89fa7394058141ab61f74ab9a6ce3fc", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1490824342, int(b.Timestamp))
   assert.Equal(t, 704922, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40639672aad40fe9968e114295e535d1ae98157d1a783bb629ad453a540cae33de513096e83c6cad0827ca6480addffe841875161962ff60dac7d4286fb78b2d54408ee4f5b8ce374b396aac476265cfdca6325af55a1b7fb87c002eaca8663a257c9606e201acf57773b06b429219178320e180189aba50d34a4b22f9e195b4db5e40640b4366357d733d5cd91ee91705f1b7ac8ab0f4f5c0c4584b588475fa77df96dfef4f40e84295ed9fe9a4ead3d390836b8cda041e7ac4f482c32814ecae6d91403472ad005219af841c5bb96e342c71a0d59a12e0b32cca900348f9f6d876a1d6744eeb2065a1c48e59b4a8c746e356d4c6641bc193818039b11bb8831f23906b404d57a9a7fb829de2e01ff091ef05f6a62734ac4a3d87ed48b2e1909129b18a28982b39af1b972c761c8a0df58a079766e7b251c1adc7a62b6db544075105e95b", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00149a894592ccbd92152cad198e1f5775f2030959595eb33ef0da9ffc2b953c",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode918(t *testing.T) {
	// block taken from mainnet: 00149eb32f56fc84de597d97b6cd02375982bcf776906948986b767e1af53957
   
   rawBlock := "00000000229b6d52633f96f20bc76e811f7400fb2aaea090e84d7eed3653bf857397eb4388d10cbfe2ad9da33bcd8866630958801d518f1f2be815746bac3bb62227a095f30a5559c4a01000fe801d94165d272359e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b43e04542a07c8ee8dc4d871856026bde8fbbef701d231001a67a3d6f8b78044a76b240839544e63f44c941f8e8ebfdbf4da6e1efe42ba33664715c6c603892540833f3f4677b6f36f09c96e321eb4541a30d406d10ff461f147853ee3faaca65b2e8554f55c94d16de88c907ce1a8af695cb87161ffe905e147e78e07a643ecb240245269307254a67aed25dc9d58ea8c588bbb34ed9ec394b5d2cff9725f89ee9e4013b9593f40f0b8c5960a3a77d9a7273fd3680be7648ac5d9d49699524f946c4022a175da3a848027494fa6317792ca3e7293e7fbf2cef8cb7239b0161bfcb1f65904f0f0f4a5abb6fc57c6edc94663649d706b95f3f9fa860525391c10718655408d9fda36e656512ba387f451bfb17f092fda7b4ab48d8ac030db01c0bdaa144972b43edbd9edebbc9d788c521645a5d72edb6078463caec31e1f04acea5dfea6f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000fe801d9400000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"95a02722b63bac6b7415e82b1f8f511d805809636688cd3ba39dade2bf0cd188", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "43eb977385bf5336ed7e4de890a0ae2afb00741f816ec70bf2963f63526d9b22", b.PrevHash.ReverseString())
   assert.Equal(t, "95a02722b63bac6b7415e82b1f8f511d805809636688cd3ba39dade2bf0cd188", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1498745587, int(b.Timestamp))
   assert.Equal(t, 1089732, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40b43e04542a07c8ee8dc4d871856026bde8fbbef701d231001a67a3d6f8b78044a76b240839544e63f44c941f8e8ebfdbf4da6e1efe42ba33664715c6c603892540833f3f4677b6f36f09c96e321eb4541a30d406d10ff461f147853ee3faaca65b2e8554f55c94d16de88c907ce1a8af695cb87161ffe905e147e78e07a643ecb240245269307254a67aed25dc9d58ea8c588bbb34ed9ec394b5d2cff9725f89ee9e4013b9593f40f0b8c5960a3a77d9a7273fd3680be7648ac5d9d49699524f946c4022a175da3a848027494fa6317792ca3e7293e7fbf2cef8cb7239b0161bfcb1f65904f0f0f4a5abb6fc57c6edc94663649d706b95f3f9fa860525391c10718655408d9fda36e656512ba387f451bfb17f092fda7b4ab48d8ac030db01c0bdaa144972b43edbd9edebbc9d788c521645a5d72edb6078463caec31e1f04acea5dfea6", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00149eb32f56fc84de597d97b6cd02375982bcf776906948986b767e1af53957",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode919(t *testing.T) {
	// block taken from mainnet: 00149fa6439b3da6f8d25bf4e8004238c2c72d58c05167d6da614060343148f9
   
   rawBlock := "0000000004ad4b45e9af455c48d20d5e3ce7caef04e82b3f1d5859824151c5381f7617b568d1a34ddaf84f46de3da8656b89b94fd58de09e4b8fc5ec82f326676ab92c5dafd49158291f0700ccb46606726ad01a59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501401c861009d9e924899c5a40c3918d6b28db3fb59718d9174fb9b25e6fee5902c919bf3860e4cf83d98c02f5322af9c8e6b21a6f7d82753e3ad9d56d4a9a79a73b406d287f4e0a2dfdd8c226e69c3317de7fac6786490bd8493c73daa0d6efd0a79fb3a8372092fa016223875727466c4312e1b1b268350a7cd379f2c1a68fa746714079dd9ba77b73578c64940847182b0e97a306320a6b65bb119a6f44487e5c70b06ea77affa5c03855b7868f2bfbb7de806af0ae35437f954b3ff6946ef9ffde0540fe7b3538b30fa111100282d8ee68e9a330e0d8feede7f3b2f15e18407e526e2e0635a7a5b5b40a5389ffe1eb68f97e32df47a9d0fdcdd175879934792f4730564056c02d0d1f6e5d1810f38d2005db834b3008e709aa1f22131ba4d87cebf50af1f40ecc5c5546717f0c9a17e6da12d1dd13f6930d6eb5bdb0230fb4949953e048f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000ccb4660600000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"5d2cb96a6726f382ecc58f4b9ee08dd54fb9896b65a83dde464ff8da4da3d168", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "b517761f38c551418259581d3f2be804efcae73c5e0dd2485c45afe9454bad04", b.PrevHash.ReverseString())
   assert.Equal(t, "5d2cb96a6726f382ecc58f4b9ee08dd54fb9896b65a83dde464ff8da4da3d168", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1485952175, int(b.Timestamp))
   assert.Equal(t, 466729, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "401c861009d9e924899c5a40c3918d6b28db3fb59718d9174fb9b25e6fee5902c919bf3860e4cf83d98c02f5322af9c8e6b21a6f7d82753e3ad9d56d4a9a79a73b406d287f4e0a2dfdd8c226e69c3317de7fac6786490bd8493c73daa0d6efd0a79fb3a8372092fa016223875727466c4312e1b1b268350a7cd379f2c1a68fa746714079dd9ba77b73578c64940847182b0e97a306320a6b65bb119a6f44487e5c70b06ea77affa5c03855b7868f2bfbb7de806af0ae35437f954b3ff6946ef9ffde0540fe7b3538b30fa111100282d8ee68e9a330e0d8feede7f3b2f15e18407e526e2e0635a7a5b5b40a5389ffe1eb68f97e32df47a9d0fdcdd175879934792f4730564056c02d0d1f6e5d1810f38d2005db834b3008e709aa1f22131ba4d87cebf50af1f40ecc5c5546717f0c9a17e6da12d1dd13f6930d6eb5bdb0230fb4949953e048", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00149fa6439b3da6f8d25bf4e8004238c2c72d58c05167d6da614060343148f9",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode920(t *testing.T) {
	// block taken from mainnet: 0014a29e95a6d7653009c68ce404775db9ad5d9ff8e8d14bc7f32ff19ce1e020
   
   rawBlock := "000000005278d7eee51a25ceb6e8b89be9aa611df98b7d2b496c9a6b4c594a3b95955081b37ab2770df62327f2c13f10dc74fbf3783842f1aa38b15ec4b713eebfc6bee85692685b16832700fb9783cd8f4fb0d383f5011bdaaccee8c4d2555c829fa51e31551ef201fd450140eaf4d553fd4eeab141b0e3ba329a3a36da46e4eb3d1c2a924d4f8ef24663e7c8824f78b4b82c4e99abe1989fd174047df3918af0418650f83e427ddcd0608aef406794d68cf0c0ac91a08ae9a0b640d351139fb6a9b03a8364ab5d0ce2cee723c08cf16d3f08c941249492f6dd06a1439715539f516280d850c9f09cc62f602eb94080732eb28e06a0dce736e28be3497a4ebf30a8ad716f1745b4a3948209801fa49b6efd8dc31df35933150ffc031ea8e9ea2c237ccfc189c12449e89fbaa58c58408ce438265aa3d2cecb787350d6c6e274ada4d5758d5de7ff2949a6001b43127f48d24aa414e0191c2e56c363999dfc302162cee4e596547d7d5099664c19408f40c9597583d51c37c40489b8f56f84a29451f7b4f28fb6044be3427ac66d8afd9eed393bb8abd0068cb4ece9ef85b6da0859148713868a7d03e61ec3f55589af50f15521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0a0000fb9783cd000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60c800000000000000faaa0f339e0fb33f91697cbf5aac41d17921222a00d1012000c10877697468647261776926ae7c6c9861ec418468c1f0fdc4a7f2963eb891000000000000000005a15000000000000000000000000000000000000000000000000000000000000000a232e125258b7db0a0dffde5bd03b2b859253538ab0000000000000000000000002026ae7c6c9861ec418468c1f0fdc4a7f2963eb891a4a7f426fd3c77cfbfaf149bfb486c3cb38b24cfc7000000000000000000000000a59862624700000000000000000000000000000000000000000000000000000000011d01762a1841a28977af3c45870bf6a2f2ec94caeffbce3b79d11028c866aac3100001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c600100000000000000b7634295e58c6d7513c22d5881ba116db154e8de020200000041409b03b6b5c1b7d27b28e401a0feef55037a16429d0472eef63c9ad200e7174193b26bb2de52e16a865786fcaa4a0aef49a38811722c2b875b4a91e02e7ddfbd5923210378e6c1fe50e74b2c72ddc372f5d28dca6eea5eedc182ff872f1dc617d8fed411acd1012000c10877697468647261776926ae7c6c9861ec418468c1f0fdc4a7f2963eb891000000000000000005a15000000000000000000000000000000000000000000000000000000000000000a2f56c89be8bfcdec617e2402b5c3fd5b6d71b820d0000000000000000000000002026ae7c6c9861ec418468c1f0fdc4a7f2963eb891a4a7f426fd3c77cfbfaf149bfb486c3cb38b24cfc7000000000000000000000000a52102000000000000000000000000000000000000000000000000000000000000011d01762a1841a28977af3c45870bf6a2f2ec94caeffbce3b79d11028c866aac30f0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c600100000000000000b7634295e58c6d7513c22d5881ba116db154e8de02020000004140abd035ead3ad46cef2aa883953a01d7e06c743637ca374db85733e03408b7ffa87e957fcb7345d6b47dcc02998b38ed665059c6c77b8058724eed073d1a8e47223210378e6c1fe50e74b2c72ddc372f5d28dca6eea5eedc182ff872f1dc617d8fed411acd101a32430636363653966652d646132632d346334352d616462342d613664653132396338613265080efc4b0800000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5084f835e830b0000001437e558ef781b899d61fe204c75761e699bd42ede14a7aae8f3df924d9edf2c5d9822d444d7421084ac56c1096d616b654f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb89100000000000000000120a7aae8f3df924d9edf2c5d9822d444d7421084ac02f634d9253025eeb7252f6b4146b1d77498173360e7317729e907a57e0ee7197e0000c6f29b5ded45cfe1cfec93b806009002bd936b22608db96bd1def18048147567050001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e703414021fe0565cedf9a739e7af531230b52a3ca5b328fc79bcca4a51ef47ca11a2da9ec27b1db997c7ea6a95474f6c761e68be9ed0665a9181111b8c4aa9927eb943723210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac414038bd02a3ee7104810c4537a271f1d30da31b87ccd15bacd572f894f15ee643a4576cf476fd4a7a953f8b914bd143d5e73ac2d026a1a398e484e6b80c3db6962023210209775943b8f1ebd127e2a765a3f95633f5f4438b1ce29589343ce716981c03c1ac4140c2f49af476e0d85a862c80661c1ae496dd9ee91b87ae5ac45718c8dbacd50fcb2a004076bc696b42d1310524b9cc46f9dd4059b60c36c7a67e6fbf4cd58bfbd8232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1014420c26ac06b3945266501bda7096376032fb2c4d5584841ecdd4e4c2aa24bc8519f51c10b63616e63656c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb89100000000000000000120d4844a522c393beb56e18198f03f1cf79d9ae29e027a6f96bd65047a46e1d1a443e142d30ada3fe858ca53b10ef551c16dd54b642c0000c6f29b5ded45cfe1cfec93b806009002bd936b22608db96bd1def180481475670e0001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70341408c13482a5060e6f77587d763e7d4988b3767bea5d17afab21dd38681378402721ff17707f3d2834c22411ed5324eb32c3fdd6eccf9c7be915a57e77230dbdcd423210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac414072cba83de0f98b96f81b18e52b9fc773babff01af5cf76d29a4758db130cfe537aca3226096fb160705409cf39b0fc46d13234a35eff12c3c5aedeab65d1ae73232102849bb5828d481acbcd1339ee9a000d5ac32669237f4bc70d789dd0e1c2b17f5aac4140c54bfd455cbe862d1a1e466124df5845795f0259796cde6281ba91e544dc2594ee4242842f06c45e5400f74d46d636b145635b606729b5328f855e13e5bc1f55232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac02000124df3184aa8eab22f3924d6fa13e9f74d4a70959bd2bc4bf1a07fb66558119ac0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6045b8460000000000e4873df77c543b7efaacd3629d8b64d1afe7cffc014140a34ecadd651bec467da787c3c27b623bff338852a7ae80f54fa2168ae5fa1b3462231b6f8cc7d70127f27d227a6fe76c0116a69ca42d616ead0d3a936af2a1a32321035523315aded14c1e749f783fbe6ad3db522449449a03b08b9dbe5129b57201e5acd10057060010a5d4e800147cd35c201a290ded1c53d90df05f95aa3dbefc761421801e51f249d6df781723e8bd70768e3817f81c53c1087472616e73666572674271fc2f3b13752e2372eb11f4a6d668aec2d68766043c92685b000179cc223434ae3d50e2893ff49a9deb7aa4436d3ce8f76fe39b0b5f73b0b1fb67000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000e1f5050000000021801e51f249d6df781723e8bd70768e3817f81c0141407b4ea1a76416c7f798de8ee45a250a0dd2c93688b7debf6465cb62bb3914f2b467207083337397560c5276cf8ae37cdc8cd63756ccb5ce8254fcd9b19d8627fb232102520b9df97b8ef102c1f0cfa77df8033143bb28d298d5b7770a8ed4e661565704ac800000016cfcc305774b355e100d7afa0cc1514ba30a1890c62ea1214851c6a09be859d20000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500171db60b000000d790d1209540dac7a311f9dd186e1f9f8f3162a20141409fbf2e536f1653eeab3ecb6d8fed9505b903de3c2a90d0bcfadf3021802d6f0a36cc9f2398d1df80079d1e70067629638e9a13f1bc173399a7390f3aa1a6ce4423210395cccdfadee53d7d0e4b6d1e8b023fd7a0c8a5aa04bc9c65b4e07ea0d6e547ddacd1015b0600a89c13460214bf28093023643bb0858a119f0e065b450b14564c142dacd200abe57fe82e356b50957455019e4e94f653c1087472616e73666572677a9aade2572b1507599a582eb1f177f31fd6867ff166f131ed5672c95c6b000000000000000001202dacd200abe57fe82e356b50957455019e4e94f6000001414005bbaa3a6f6f3900f0c972f80eb32e305ddd83e67056ea564b2c1c523b815ce7f72c4b720cdfd1f7adb8d24439a297af52e8aabcad582220d2dba15c11571a0823210340462b115ef31d0f4eac68aaffd7fdec54b24a5f429717a2d225cd7c009dcb77ac800001ff076e656f2d6f6e65077a9af7ddb3a7c00971260b96126f9a9d1aa0069a6b030e7f70094aeda889ff500000cd22e398d4273b71e20c8d98cac6e0c20c771410784a4a03aeb21c7c898492100000399a6ede190bf858e6bdd12acede62fba2f518502de40c1a338bc755944a18e8000034af4d41f33d1a5553aff97dbe37b9eee47a643e34ee9f3214e8cbe72aee3b790100b78a7684b1ad9b5e3e72fcc62e86e82e955ef6a6575615bd57ee66b0b27059f000000a766460cca6028ff6eaaddd9d01b21fef0b090b029edf1333cc48725670d816010075931d84547e935c6d9e6c2fb18cdbf94bd4e80752ae3ea2fec0aae68ac7c866010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60c0cb170700000000bd70d53bab58814cf1aa36a77410d05c1a1400f8e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6071040100000000005dbb4551a5bb73fd4a0e986b5cb0b91eb79d5f82014140cfd3a20efff70a09696314558ff298024b8396ca699f33e0a41873f0a4b1453575e2a3c48b27ee0e903b9ceacc947a15d4ec4f3c20957dc658fe93ef7641ce1d2321021a8ccc506af5988835559a0ebc242cec0cf924f8f3148b5d16441afd109b707aac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 10 trans
	{ ID:"44fc6b6c500f42afd20da24ad99662394880f5e10cc47a6949d2b06844b8977a", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:0}, 
{ ID:"1523e9c014f66505e9ae3ff6b1addec672cd1faf725168a9f8e431cee3804f4f", Type: "InvocationTransaction", Size: 400, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:5, WitnessesLen:2}, 
{ ID:"8c7d411d346a9a2c95b290380846b4245710aff07a95762823728fabbc2fb6eb", Type: "InvocationTransaction", Size: 400, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:5, WitnessesLen:2}, 
{ ID:"203ad4a8c6ee556d8daf6a6c8644842a5341de007ec5429aecd4edaf6dcaeb34", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"fe6223f10a9d5a6832564ece82854a8a94239ba8dd84985a7659cbe71d59c02c", Type: "InvocationTransaction", Size: 538, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"ebe1f1306c85419492540813016133854aae927b22be551bc0ce9ab09a3c7813", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8f5dae2ccb4d1e1ce25b6cb4ba899b6e856638720667069bff6236bdf952d5a4", Type: "InvocationTransaction", Size: 290, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f380010c640a5659c848de3e2c601270fc45b4e046302ca7d473c82096308678", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9450b532b0c00b71cdef70c8e3d46c5c7b09b9ec7a0a22e7844b00d3be4f2bf2", Type: "InvocationTransaction", Size: 229, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"97b8e0920a8d6c108e12d1f408d788bfadfbda4a03affc041d3727ae99a1416e", Type: "ContractTransaction", Size: 475, Version: 0, InputsLen: 7, OutputsLen: 2, AttributesLen:1, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "815095953b4a594c6b9a6c492b7d8bf91d61aae99bb8e8b6ce251ae5eed77852", b.PrevHash.ReverseString())
   assert.Equal(t, "e8bec6bfee13b7c45eb138aaf1423878f3fb74dc103fc1f22723f60d77b27ab3", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1533579862, int(b.Timestamp))
   assert.Equal(t, 2589462, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "40eaf4d553fd4eeab141b0e3ba329a3a36da46e4eb3d1c2a924d4f8ef24663e7c8824f78b4b82c4e99abe1989fd174047df3918af0418650f83e427ddcd0608aef406794d68cf0c0ac91a08ae9a0b640d351139fb6a9b03a8364ab5d0ce2cee723c08cf16d3f08c941249492f6dd06a1439715539f516280d850c9f09cc62f602eb94080732eb28e06a0dce736e28be3497a4ebf30a8ad716f1745b4a3948209801fa49b6efd8dc31df35933150ffc031ea8e9ea2c237ccfc189c12449e89fbaa58c58408ce438265aa3d2cecb787350d6c6e274ada4d5758d5de7ff2949a6001b43127f48d24aa414e0191c2e56c363999dfc302162cee4e596547d7d5099664c19408f40c9597583d51c37c40489b8f56f84a29451f7b4f28fb6044be3427ac66d8afd9eed393bb8abd0068cb4ece9ef85b6da0859148713868a7d03e61ec3f55589af50", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014a29e95a6d7653009c68ce404775db9ad5d9ff8e8d14bc7f32ff19ce1e020",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4116, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode921(t *testing.T) {
	// block taken from mainnet: 0014a5e42d1cc22b28f4e1181f00b2827a7d3496804616ab85497c81a258c207
   
   rawBlock := "0000000072238ebe2b4c58b905a801d471bacdacc700e094f661237bfd126ddc308d790dc5f33a366546a7282e9b944cbd53045f22423a425340f26bdc6bd02697bf114cbda04659b8f10f00335966ebd53a0c4559e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014001eb94816ab1fd37c197c6b1492ca2ba268705eaa28211bfb6a8a67c5e6647b12a0912cd4ee7b0276d1c7706b67a76a6a40b4d46cc2eef63b9ae1fa23cd5d6d7409fff39d939e6f6605b0d3bc350b2e725dc2bbd7978339d4050e26c4863390314abf6e00542c90e33af58d98c96e8f60aa200be02c7d6232dca08dfc45c741c964050e2609ffcd09074d68d82343c3cf78e589f0ca45ac3582535d0341b0e781ae00e2046a62f46ea763a8e550c64e622b89b09c2cbdf079c25899023a4f0166432407fe2ffe82a79b07126ddb6be23cbb02e358813bd66dcc8523af67f24fc9b0c69f75d0185c2c233df79051ebf31915204c82460b82377c7751e344f26febbf16d40a705cebb2a67ecd9260328d1a92a15b9adf4df48733cda8376ee903cd7f7db4c6ea7d9e3eb0a80a2a329c75a88f21538e9119c24a3271241bc1f9d39cc6906e4f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000335966eb00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"4c11bf9726d06bdc6bf24053423a42225f0453bd4c949b2e28a74665363af3c5", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "0d798d30dc6d12fd7b2361f694e000c7accdba71d401a805b9584c2bbe8e2372", b.PrevHash.ReverseString())
   assert.Equal(t, "4c11bf9726d06bdc6bf24053423a42225f0453bd4c949b2e28a74665363af3c5", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1497800893, int(b.Timestamp))
   assert.Equal(t, 1044920, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4001eb94816ab1fd37c197c6b1492ca2ba268705eaa28211bfb6a8a67c5e6647b12a0912cd4ee7b0276d1c7706b67a76a6a40b4d46cc2eef63b9ae1fa23cd5d6d7409fff39d939e6f6605b0d3bc350b2e725dc2bbd7978339d4050e26c4863390314abf6e00542c90e33af58d98c96e8f60aa200be02c7d6232dca08dfc45c741c964050e2609ffcd09074d68d82343c3cf78e589f0ca45ac3582535d0341b0e781ae00e2046a62f46ea763a8e550c64e622b89b09c2cbdf079c25899023a4f0166432407fe2ffe82a79b07126ddb6be23cbb02e358813bd66dcc8523af67f24fc9b0c69f75d0185c2c233df79051ebf31915204c82460b82377c7751e344f26febbf16d40a705cebb2a67ecd9260328d1a92a15b9adf4df48733cda8376ee903cd7f7db4c6ea7d9e3eb0a80a2a329c75a88f21538e9119c24a3271241bc1f9d39cc6906e4", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014a5e42d1cc22b28f4e1181f00b2827a7d3496804616ab85497c81a258c207",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode922(t *testing.T) {
	// block taken from mainnet: 0014a829ef1f65a4f06922729da525541d5e39cb5bca4bc56490b082f8e29574
   
   rawBlock := "00000000fd2fc69c1832c8e0a2f7da1c39a8fb674a43873f8a44cdc7d28bc26240bd20346bb5f1f70a4db34e7aa98496c52d4891c509d50c44f3d302577021a10cf69627dc39fd584c5e0c00df21653763b56ed959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140c2d15e0a4548b7400409f70e7f7cd95fb64f65bd56fdff25972fa74b3200608467224b1c01b4dafb957f6ad7b8d7251a829059f2502528df7c28aa87ca35db0b405db33de4223945ac0a82fd42f8ef039804b09afe40871ddd07a6bc13c5f3df3183152067e18653f6e84f9bd1c4fe078364c4d3bcb5189b6cecae7450532f0a00400fe5ef4eeba5c5c15ace97f9efb3d22b8c8bec2e45fa38fc6238f158f46ed8a7c54fa92678d0bfa1507d48ccd7cc8cd82c2502e2399bed98b69d7518793d687e4084137631055977cec7946624ce2178e659b7cd7d4ba7286f56fe7d56f84fb341ea4903a05c19462ffb87fca08ab2626cdba1ef54560bd1424877323f1ac7eea84067f93fa5874b9f3139956234d5ca6f4aab143b9b7a27498662bf1abce8d7f75cb0a3aa1be4c153e9040c88d3bf7a0319d7a8a79a1f8ac43ff30969c76fafc2ebf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000df21653700000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"2796f60ca121705702d3f3440cd509c591482dc59684a97a4eb34d0af7f1b56b", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "3420bd4062c28bd2c7cd448a3f87434a67fba8391cdaf7a2e0c832189cc62ffd", b.PrevHash.ReverseString())
   assert.Equal(t, "2796f60ca121705702d3f3440cd509c591482dc59684a97a4eb34d0af7f1b56b", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1492990428, int(b.Timestamp))
   assert.Equal(t, 810572, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40c2d15e0a4548b7400409f70e7f7cd95fb64f65bd56fdff25972fa74b3200608467224b1c01b4dafb957f6ad7b8d7251a829059f2502528df7c28aa87ca35db0b405db33de4223945ac0a82fd42f8ef039804b09afe40871ddd07a6bc13c5f3df3183152067e18653f6e84f9bd1c4fe078364c4d3bcb5189b6cecae7450532f0a00400fe5ef4eeba5c5c15ace97f9efb3d22b8c8bec2e45fa38fc6238f158f46ed8a7c54fa92678d0bfa1507d48ccd7cc8cd82c2502e2399bed98b69d7518793d687e4084137631055977cec7946624ce2178e659b7cd7d4ba7286f56fe7d56f84fb341ea4903a05c19462ffb87fca08ab2626cdba1ef54560bd1424877323f1ac7eea84067f93fa5874b9f3139956234d5ca6f4aab143b9b7a27498662bf1abce8d7f75cb0a3aa1be4c153e9040c88d3bf7a0319d7a8a79a1f8ac43ff30969c76fafc2eb", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014a829ef1f65a4f06922729da525541d5e39cb5bca4bc56490b082f8e29574",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode923(t *testing.T) {
	// block taken from mainnet: 0014ad97ecc5f132a99af1522e72cf57a0397811ec407738f04f2b5a4a8bb831
   
   rawBlock := "00000000387b3ee2c2c4eff6e573605bde3e834d93f5763e17adb11ada89ca6b2ff46f28bf2eb1279d0611bac24a59211ce2eebc0884a8f6deb00a718532b0b0c0f8887f4afdc4586fbb0900051ec68575b3041359e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014042f18f08b6015e830b99a088178e592bb941ed27dde45ba22487d2386e12c2226b45ef05c0582d7d78710d3dbaf1b315916966d31ccdda04b86c1357d799a50240aa763510f2eb55784e072d474f0ead293208d74eb3093db0e6b91c9ae54e8e118e38429db3de0469a7f692b518f920d460949c195ec616f05b967b88e02bd963407e27cc4f1944e9f1050bcacd594bf732d395fc9cea748772d1cc3d4da265435cd2b47af4f300a5695e4a37836f802ffc9ecbc90218e8960183bd190c6c34f68940dc4495a241fc375e765cfb56ab968a808980bd12179533e62535a6c4f31e4102617823d61251581efab15aa2bea2c67ea48a02b2488c1064d77c314b6de46f8840dec0639f852afd7d7ec4e2098535edc6bc6167c0b2dd9d18f98b3cb20b44f098b7e68a402a02c50c65021c08042804547670018156f723d0f26cde3d5be5fb24f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000051ec68500000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"7f88f8c0b0b03285710ab0def6a88408bceee21c21594ac2ba11069d27b12ebf", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "286ff42f6bca89da1ab1ad173e76f5934d833ede5b6073e5f6efc4c2e23e7b38", b.PrevHash.ReverseString())
   assert.Equal(t, "7f88f8c0b0b03285710ab0def6a88408bceee21c21594ac2ba11069d27b12ebf", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1489304906, int(b.Timestamp))
   assert.Equal(t, 637807, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4042f18f08b6015e830b99a088178e592bb941ed27dde45ba22487d2386e12c2226b45ef05c0582d7d78710d3dbaf1b315916966d31ccdda04b86c1357d799a50240aa763510f2eb55784e072d474f0ead293208d74eb3093db0e6b91c9ae54e8e118e38429db3de0469a7f692b518f920d460949c195ec616f05b967b88e02bd963407e27cc4f1944e9f1050bcacd594bf732d395fc9cea748772d1cc3d4da265435cd2b47af4f300a5695e4a37836f802ffc9ecbc90218e8960183bd190c6c34f68940dc4495a241fc375e765cfb56ab968a808980bd12179533e62535a6c4f31e4102617823d61251581efab15aa2bea2c67ea48a02b2488c1064d77c314b6de46f8840dec0639f852afd7d7ec4e2098535edc6bc6167c0b2dd9d18f98b3cb20b44f098b7e68a402a02c50c65021c08042804547670018156f723d0f26cde3d5be5fb24", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014ad97ecc5f132a99af1522e72cf57a0397811ec407738f04f2b5a4a8bb831",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode924(t *testing.T) {
	// block taken from mainnet: 0014aea3146bf291670723542719877ee5648fb11cd8ec8bf25850ee1b1b9f67
   
   rawBlock := "0000000098fcf742180569674e01cfcd38cc2e316cb04bfa6cb9e52adbfb765971e6e3158fdcbd21bd1386a9ba2d416a207e65958e9727c3841831c55d801e25930caaafce552e59cbc30e0084cd2270e87b8ea759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140bc4d6b8ae3c8d5df8c8ec24d2ab8b11509b9a1bf83a726a711aa08ce462ed52e15726c0b681ba40645226c3412251bb72ca14cf610d742b261d9e8b85f8760344094d12aca21822e175e2ad5b030b036bd5c8babbc8e0966ceb91cadf2d6fdbaa7852351be91069ce03168b390f2acbbbd65568927a1c2c412c4c1010522ae4f2f40770cae58b86b8ab91ab63b0af107969c011770d1d691d436fdbf0f11a70a85895a46636643d129f1ae6a949692b1e55c87d07d577f10e3553007102a301ad6ae405f9bebd1494aafa410d54cc240f5e50b0004f08649f1832188d517afd8d26153ed47fa67b3c93f759cc79c3a2aa09a7681b612a1fbb44b58410a06639d59b5c940f32d7103ce89fcdb47611944114461f0d7c6ef07981e00a3cfe61a154c9b328dc0b107e593644f83d45b0f49e14550f09be191febbc61da5e4c3338a6a8b8173f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae01000084cd227000000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"afaa0c93251e805dc5311884c327978e95657e206a412dbaa98613bd21bddc8f", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "15e3e6715976fbdb2ae5b96cfa4bb06c312ecc38cdcf014e6769051842f7fc98", b.PrevHash.ReverseString())
   assert.Equal(t, "afaa0c93251e805dc5311884c327978e95657e206a412dbaa98613bd21bddc8f", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1496208846, int(b.Timestamp))
   assert.Equal(t, 967627, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40bc4d6b8ae3c8d5df8c8ec24d2ab8b11509b9a1bf83a726a711aa08ce462ed52e15726c0b681ba40645226c3412251bb72ca14cf610d742b261d9e8b85f8760344094d12aca21822e175e2ad5b030b036bd5c8babbc8e0966ceb91cadf2d6fdbaa7852351be91069ce03168b390f2acbbbd65568927a1c2c412c4c1010522ae4f2f40770cae58b86b8ab91ab63b0af107969c011770d1d691d436fdbf0f11a70a85895a46636643d129f1ae6a949692b1e55c87d07d577f10e3553007102a301ad6ae405f9bebd1494aafa410d54cc240f5e50b0004f08649f1832188d517afd8d26153ed47fa67b3c93f759cc79c3a2aa09a7681b612a1fbb44b58410a06639d59b5c940f32d7103ce89fcdb47611944114461f0d7c6ef07981e00a3cfe61a154c9b328dc0b107e593644f83d45b0f49e14550f09be191febbc61da5e4c3338a6a8b8173", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014aea3146bf291670723542719877ee5648fb11cd8ec8bf25850ee1b1b9f67",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode925(t *testing.T) {
	// block taken from mainnet: 0014b087c825d51883c5e521c79d7120e5f892b087a98334122091c630c00e88
   
   rawBlock := "00000000a8b54e3a2ea52e7d1b33aca9a64d46d7c3cba87d4dc64781400c17953f50e2efaace8ff5779e42efabf0a244a469594cff3ed9753ca038210cd4620976803aad8bc5625a13021c008e92202d824a797e59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b80c438faed79cde52d3a4ef83fb3a682b7af2700c64caf5066de54fa085972f26a9922b2cdb4e9234a42ea8cd84290a96137835c1801f494f13258068ea624f40e9b44f815c3ab536ef529b8ca2b738a0e5fac7c77eccefb7a234f3862ce67dc263da5fe6272f2c04aedf641b1cc864fb695beef282b23a97d4fe8088608471594060aedd987c3aaab30f5f611535d06b0e978e1831ec6a545f967d9b3a753abd6a2e4a92bfa66cc4ccff3f941612acb5e9820b47d0fddb33f1db5cc6642bf3cdfc40aa4b5ab56ced2fbc3585db939b3b65ea949ccbdbe6ab3374678fac2264903555f9e2f6572895acc07e43541c4f0fd9f4ce94218e9956015d4a39439cc52fa4564005e786e24bec78099f7665fe9fa67a0e0f45788ea77d4757aeaa1143206a9b75a89547067b7ee45110c7bf07bd5782e126f31312e188eab6f74dff9807bebdbcf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0700008e92202d000000000200026fd16bf28896148496388cf3fe904b8b1674291cefc199185bdad60995efe96e0000075a57397924fb8c104a5b522fc44d506e91d2954c9073064ca3fd56ea1600360000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60ee950b0000000000698b57de3bf702a74de78f785b8226ca586dd4720141408daf490dbd80512669b14282799a5c1323ff8f55e22dbaef4e4b0e911af7f52bd41baf28e175522b06df667ea6e1614d04dd149746e2c722cf04f408b189c443232103a51e0571dc9b98541000e1dc00170705a45b6374bdfe09e6e1974a0a640b2e68ac020001b496a8b93bbd0e4d41835ccdf49f111aa96e73622e87ea9ad6e6502510da594e0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60ccd3020000000000b8f01e3d6daf4d29d2f06820a709382de2b7ca9e014140efb337e71859823355fa536230eeff5023b57da180f4dce74f60912da8f9d31b39b576605abbe025c3d158f3a67895ca42613f37b7fc88e2eb05e706a110d5d92321036bcac3e94bc97d43bebdd56542467ab1731e1d5fb3b6d65c0b834b01c71f2017ac020001fa9c49d471726d7651c0b01012084e3528498ed316b424afea4b6d3afe12967b0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6030388100000000001bc36a7a9a3dc0cb560d77ff7364233f962e06b00141404abcd2d14a171eba1bb625b183b7b90e1d03869b9af98ca3862a4e369db68cf572e9282301b7dff84d76dc73096e302ad469e30c4bff41609923e3a1cdf008f0232103b59d809a3ff2f966841904cecb4968fe2430c4969599f6bc278c7c1fa781fa9dac80000001712d433ac7717630f0a331d6063bd23cd26af396e49d77ad5523510be16dd0a70000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50084d717000000004e3707e3ab09ee5971e19eb95d7ac2a6d90b5a32014140ff3c1454f8329f0e9b86f5ad55fbbb1bee49627187e77821dab6af458cb3ead53aece4e2d7dd4e1f657b10c83fc1d0e0059a5026b843e7873d0d2e5ae20e7cc9232102750412898c8c9638b58a890d30e7167f5e7d9d49b9649b268ce6e37f7d00d1b4ac80000001946d8d54c4399dbb64a0820f14c2c188dc2e7952aff84dbd6a213d884288d6180000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50014076809000000b85acdaafee0939fd937b0bc0117dae383a3840c014140880c09bef24e138018b047985e51a65f0d3b30c45a8a0d106ee53e130d544c2429b7dc5dad4b1bf3f246f978611d1f7794356d51c44b455983692d85c29818b923210211fee45803806af9c6e95e8d796a106e2a0eb786ac1218e0e66962bc4befee61ac800000015f67bd23ca01d3914c38979a41acc80d71456a548c4212c23442d4012540c86c0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5002f685900000000c283b0189df9745b76ae04f51dba6bf5123781b001414022329c4fc06a1b8847c4d73dabc85ef2685e4698ceeff8b25f51f062c19a79e0b72362d2954b724dea06d574a698cd9b1f79899f360334f0a29835212bf643d1232103a7305b17fe2fc9c2ea6c4cf6b357fd7146174934131e6df3e9db5b6f7bc5fcb7ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 7 trans
	{ ID:"07696fbd8421aac444a317aef74a7c79a71e93f4406d916665db33603c38ede1", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"f90aa6e456d12279ae063ff6acf3bd369f0ed05c996367aa51c921f517cfe422", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3bfa263a60a3d9c3e5aed3ea89b777db6fd882531305345151179ed11b3577f7", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ad57a74fc88a1a8c9e90c53e64b80209301ef710eb75c2c287a65cf22c7580bc", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"353a72ef387cf9f3bd45d603736ae4302e29738d14f63ca60b1bf86e6901f343", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"2d6b90290257b338a21f74973dccd538910520318dcbfa9085a6af510c1e326c", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0a3cd8736dd11a278d854c9d1747c188d77c6176c5ee298a4696bd0578b68b15", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "efe2503f95170c408147c64d7da8cbc3d7464da6a9ac331b7d2ea52e3a4eb5a8", b.PrevHash.ReverseString())
   assert.Equal(t, "ad3a80760962d40c2138a03c75d93eff4c5969a444a2f0abef429e77f58fceaa", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1516422539, int(b.Timestamp))
   assert.Equal(t, 1835539, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40b80c438faed79cde52d3a4ef83fb3a682b7af2700c64caf5066de54fa085972f26a9922b2cdb4e9234a42ea8cd84290a96137835c1801f494f13258068ea624f40e9b44f815c3ab536ef529b8ca2b738a0e5fac7c77eccefb7a234f3862ce67dc263da5fe6272f2c04aedf641b1cc864fb695beef282b23a97d4fe8088608471594060aedd987c3aaab30f5f611535d06b0e978e1831ec6a545f967d9b3a753abd6a2e4a92bfa66cc4ccff3f941612acb5e9820b47d0fddb33f1db5cc6642bf3cdfc40aa4b5ab56ced2fbc3585db939b3b65ea949ccbdbe6ab3374678fac2264903555f9e2f6572895acc07e43541c4f0fd9f4ce94218e9956015d4a39439cc52fa4564005e786e24bec78099f7665fe9fa67a0e0f45788ea77d4757aeaa1143206a9b75a89547067b7ee45110c7bf07bd5782e126f31312e188eab6f74dff9807bebdbc", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014b087c825d51883c5e521c79d7120e5f892b087a98334122091c630c00e88",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1935, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode926(t *testing.T) {
	// block taken from mainnet: 0014d4fa3d7a8df11408564e9b22281b5b282edbb41aecd4296d78f384b696e1
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 18 trans
	{ ID:"ec11120dd7b2982f05fbab50c2a45a382651ab87f9fef9bc3b36c265a3213047", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"7b7284c37cedf7eb572a7e176b7bfc21d79588fb6a78a9a87592e7d349fb6747", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"91452ba6334e853158b9d46ab28eb1106dfec5d6a4ec86d15765b628e8487f3e", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8b2baa96aca38a4f16c130cc0a219ec97f49e7a8da939b6f7d642930254cf774", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"07505bdbba24d6c9e0420dfae237e7d343834e2906f3457a693542b4b77146a0", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"af6790d2d00ccfe015e91778e051409d6f8c9097ad293754c02e9904f65a8a2a", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4ef4fd11c95ad2c4edbdc0d56a64ed86b6bfe1dda5ebac95ae23c4b5858eafc3", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f9b97f686ab5d6d1048f46c69be942ed6bbd9fa95913bcb39257a55fd3cb0e95", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"33d3c0de09cc0b5c4b4a310ffdef7f09d884b33a00ee3fa53d9c44986c4a275f", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4cf7b27051d552fe4951cbb9550f3caf55f9ed63b4268a4f10c093e18a81850a", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"72066fcc17299860ce6e9c6fcae5561bb44587cb84186952ff9874ed95f995bc", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"743703fd3fe2fe9443924df767689833dbe24ca87a7b21159858011d71ef8ac3", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6324b33e75cd072b6cc2d06c2cff5a4c8f4c947dd858891864ee5574ad7c87af", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"79e4825f7a1b9f1edd7b17679c7f64dff5b62374a3f2d58e4ab01d869781a593", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1d9bf35fd792c396a0152e7faf9e2bf5fe8200d16940c88c60821219cf3d0885", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"be8b8427109a14e07e6a1ef39a7c2419809ec615d1d0f4a18adc9418bbe730bc", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"613e4a01be710fe2ebac3b52446dcadfdc470919d1f3b79b6785e5154f458e3a", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f14a10de2cfd1534b6afb2e00b413e3f50b317e3dc0c1dbb53a4fe7550af6551", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "49d36c15027a5aa6c54f2218dc8ce3b350e61db7845f90cb09b18dad458b75bb", b.PrevHash.ReverseString())
   assert.Equal(t, "bfe31523ae0666da1f8460506de5ee5e269036ab9f582c28beec812f457cb0a3", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1502710846, int(b.Timestamp))
   assert.Equal(t, 1249917, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40ddb51435d9bab2d47a7a23233edb8a57f948aac4c87e1076a3fd61712d43f7be4e8a887862ab4bc4fbe1e4a7db4b557cfceb5f56973f8595cd211fb0b028f5ea40afe7b12a9f26dea36ef5d4787e5a3feeeeff3ebfc7960e6e70ee2643dbf3c49c7ee89f048c73d2a7dde2e5bfe71c197f92f96ba421c3e24e57c4eba8f98011cd408538a01ef009bedd98e9c34de48329b7601d0ced936a9b008e9aaa33f81af535985370fa0202b9449107e764c2a428ed67b3b83096c9a2143e586fae7e5868664039af2b53e0998b86db92a30b40296a31fa28ce768c880bc55bc2c6c99a746a75fc2feeac2905377fe4e4b3423f9f6ef25b6c4e1064c6dae7e08b6716cb46c88340f3069315f47eb6466a8398b58899b8e42cf46d00bbca6ebe6f7808cf001b2c4f3b89ae1a4e18a23db01d3efc6d99fe48d62edff0cebaeae3dd1589136b1ffc84", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014d4fa3d7a8df11408564e9b22281b5b282edbb41aecd4296d78f384b696e1",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4554, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode927(t *testing.T) {
	// block taken from mainnet: 0014d69799c8d49c5a934274673d7ccdf0dd20141dd08299970e848e2039f5e1
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 17 trans
	{ ID:"36c22ec05defe2474443e7ae05be3b1874b2e7fb4a45b79e9b0207f6d942969c", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"e1e79c8fac3c45c37f0ddabeacd9bd59807453227b008a659ab4ebe0980b27f7", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a895c6e278fd2acbba691e371bb03d2cefa7a5ed724c7553ac8f6d3a4b40426f", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b368009fe536a5a9c66b557c847edc496e63726b37789afb872ca164fd79b30c", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b93c58f396bc88589874e1f6d85201facb70a8b526e643498cae410103844c34", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"659f70067942642155be6c2cbdcaddb05ce577ff13ceaad1c1a0aceacbf07e18", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"520c46e365f9996e42c52786163044d6ea30700dff61be0df8f155f0e4a2c84a", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"fa76f2cb3de8b3a5dfeac01d4d5fef94efbda4aba3cda4457703142d85b7f22e", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"325f8e94bbea83feef432ec0aa279ce860f8daa783ede6cf86326b1c0c259de9", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"11c77d6ed6870fb584b8310d42420d60750fc3bd11794fcf10dddf8a321fe9a9", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5224f2f3ac557268dfe7c4c2b4628af569ed65e36f2962a25a6a5c5e6dd07efa", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e56b57fb6e2ec014a3a52f2d31c0f43903df0d6b74e211e151b389c2cdabb877", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4850d2ba02548ef7957d7050cbe2b96f154e4393a32090539bef63f2a5726b40", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"88953e914adc270b86122a8be285fa8292a6d7177edbaddf5f86d75a8e7d363e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8002716d89427c1a3f1843e4cfa2aeac6629962efacf4d7231597c4a1c9d6a5b", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f31748dcd9eaecdfd684cab1438006168c3a59aa51d7812e62e060369851b1fc", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"939cc7855298ae772013230326c41d85b26f4786b8e4e2368d46bdfa8370c8b7", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "1dc558fc00e137f37af001396a752fc228d81a214a6956e17214480ba03f73ea", b.PrevHash.ReverseString())
   assert.Equal(t, "78bd0b798031b5d51350dd95839a18daf46445d012005c67da4d4e8671799993", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1502508069, int(b.Timestamp))
   assert.Equal(t, 1243298, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40fce50184445823ff3fd69efff132dff8ee57cf96eec537172f25d8b9bab32b8fa93de94a6f33b17f3a0d1ceafe302c15c93e0664a6765e33d116f5047af6bea240f2198d9dd71fceb6b20d58876d0de591a96f0a6cb9b5b806a57ad95ac0925d892183cf73897d1b8c1118df40554491579bad7163960f67f8659173a2016ef8c140352a108266e1b1e05669227bb935cf1b2f612fcc3c3da0f91b5c8b60c6eada7bf26d1f6c1dc57da4ce7272ec03cb135a9b1cd9b75889c61b1b98b09eb00eb53340a117f495fba542ec8ec31b16209679c05012986869405fff587ff9cafba902378b7909b0826d489ded4f61aa43328d21a6686ee5c3e79970a0718ac825885bc240b71310dac5827efcfa5ddd6bb77a7bbfd789dfc368b493e5ba7a0fbc99702915121be3be41da3b489357280170e3896dbd3920e4cb7711eadc7994adba3166db", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014d69799c8d49c5a934274673d7ccdf0dd20141dd08299970e848e2039f5e1",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4080, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode928(t *testing.T) {
	// block taken from mainnet: 0014d93d40a9e429b9c8c8bf055f71ab35dac5de5e958682895309215f698ee6
   
   rawBlock := "0000000067be05409dce37a705a4325838b575ce0edd284da5b700f3a19039c7c1fa3a7a6d7a30411fecc4bf75103dee9081d4ab1793c4740febfed861bad0971e3521468589c958bdf9090075a283250b73b4fb59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140bb1ef33194c7b04139b36e01c365f74a742f8345cb1cf5661fdf5f2062bac961da45496cbbde6b5a1bfaf3938e7f1b6bc156d092d5783d5f18054c0b6f894f16408d41f425e5a5f7eebbceca221dc09219e2f77c6c3afe50af567d2b72ca878a423feed6e33396e8c0208e63251cbe9c42fe2ba627d9984dca063870c8b5f693f1409bf9d4509318aae6fcfdfb6ec3bc969dfebaa82d3121bdc2863f0166ed7d217555d1eba758f783d33b6dca728afe465bfb73cc93d2ad4cc48b2e291d910785e34073aea0f6f0675c4c9aeac7767ccd6af6ca1ba80c25f97430c1ac8417046820dfc09c647e2aac3908ce4c75734444b7ea30dba8524e0edb792f6334df5bb0c666405768216cc462b07771cd23f4c48406fee62c401b6c956b88177fc3d98dac586a4e1c95bcf38d43030a72218df11235f9915880734e036fa4192c5e803ddae8a1f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae01000075a2832500000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"4621351e97d0ba61d8feeb0f74c49317abd48190ee3d1075bfc4ec1f41307a6d", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "7a3afac1c73990a1f300b7a54d28dd0ece75b5385832a405a737ce9d4005be67", b.PrevHash.ReverseString())
   assert.Equal(t, "4621351e97d0ba61d8feeb0f74c49317abd48190ee3d1075bfc4ec1f41307a6d", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1489602949, int(b.Timestamp))
   assert.Equal(t, 653757, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40bb1ef33194c7b04139b36e01c365f74a742f8345cb1cf5661fdf5f2062bac961da45496cbbde6b5a1bfaf3938e7f1b6bc156d092d5783d5f18054c0b6f894f16408d41f425e5a5f7eebbceca221dc09219e2f77c6c3afe50af567d2b72ca878a423feed6e33396e8c0208e63251cbe9c42fe2ba627d9984dca063870c8b5f693f1409bf9d4509318aae6fcfdfb6ec3bc969dfebaa82d3121bdc2863f0166ed7d217555d1eba758f783d33b6dca728afe465bfb73cc93d2ad4cc48b2e291d910785e34073aea0f6f0675c4c9aeac7767ccd6af6ca1ba80c25f97430c1ac8417046820dfc09c647e2aac3908ce4c75734444b7ea30dba8524e0edb792f6334df5bb0c666405768216cc462b07771cd23f4c48406fee62c401b6c956b88177fc3d98dac586a4e1c95bcf38d43030a72218df11235f9915880734e036fa4192c5e803ddae8a1", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014d93d40a9e429b9c8c8bf055f71ab35dac5de5e958682895309215f698ee6",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode929(t *testing.T) {
	// block taken from mainnet: 0014e006e88671b57e66942d3f8a8412d0cab40242cf3befb26fc6f3e6135608
   
   rawBlock := "0000000022627acc9ad7aea2d5795d8729b2d032b88d5728467bcb5e61dd1c5a35c042cd7d3c03391bec6fe16491ab4e70786362aadf00d2fde0a04b6d7dc9187c77d38aa8ad1a5be21b24000c3141e62ff4e04759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501408f5e4df4157326d1b64f3cf14d71d5a38ec72981bfb13e1499345170976140e48036f7e8ba0428cface290943c1c0edf66ec3db0f45d432e8e47793421399e904069c20bc54c5a055bb4826aa7b081d87ecdf491eb9c299b1fad14882fa587d78ec61ae1ff25ab14c4671d7c7f2daea278ea29770fbd29288f2794e6e0df4bc69d4056c22d928caf089d2988b211fdf8717c3b35ae0e6f68f465e16edfe50be10bf72a6ddb5cc1e950e82600a71b1437f545f61ec43bbead18630ad7e89fc552d9b54011c9962aac978630529ce9baf4f9a5c8839f1b2f766c79cefe0612aa06640257304bfef01f050a523babc120dc9f115cff59552610ebcc05e57dc132583dbb05401cacc1851cbd12abdba0cde45861cee97b94f32ca16a84b4e8429baf595178204b732669096591ec8ea0a755a005682a94e4eae73aedd29063be2ff6b0f710acf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0a00000c3141e60000000080000001aab32a5b1f6eec6da6efb22dca83302fcad1ac9256e357fd34dd98ac1572318a0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50094357700000000c50d1f75d3ee93b565216d9ee2da0a244bfcd3b9014140d60a8574d623a245c92ba6c42037e150a53eac18a15bd8ec2fea174ae4798e5425c7dc050ec397875789293476493b7f0009dbcea1ee8c824768f11d5ea2aab4232102a28f14f175c918875b2d052fd5c2d4339d6cd090807879966cb8c2e88f74ce25acd1019600081027000000000000202b6f8bd2d60e885912971b71769901b27780b8c87d12b0b5b6c7899d1046e753349b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5f9e6e770af783d809bd1a65e1bb5b6042953bcac14dc98759406cc2130dcd0d93c4c6e8a82b55b454455c10966696c6c4f6666657267bd097b2fcf70e1fd30a5c3ef51e662feeafeba0100000000000000000120dc98759406cc2130dcd0d93c4c6e8a82b55b4544018a54de6ce9400b8367290ece4240a75a9188295075b9b0adcafc581f7f031370000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e702414027eea5f7fb0251f6f1eb2038cb5cbcbe6267ceab7e969270fa1c434ee13eb45d2991c04cbdf46cdee19c344d13f5ed41431c43af2ea4d9ec1cb06bf3c7859f48232103f012f64ba2c3ff0c12960540170988c44d60282b9fecc06ce435fc75b5afea54ac41400dac8fb104f2ee361d3fd8a832f1c8019d095f1025abb3822200573c12a41f1fba55f33e2502985e1124f13039d446f58045e01ab126f56db300beff4f15663d232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac800000010f6185e559d19749cc582689f120eeeeb19ed7e0847b1189808b05e0026c6cc30100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5005ed0b200000000f7d31f431ca03553219b8081cca03dd3185b0d709b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5001a7118020000009bb319efa98deac96506059a824622b44f5767210141400a774265e1cc15b6ebe527dd2aec8c5329a10ae9a121e15520999f2cc2bf0e4916382332af18b8b24870b7d27a42732fc35f69808dfb8284a54fb53b3ba3db6a232102e1f1841e5a610f8d635c0891b94a6ca25db2a61f1d430f893e6c7643ab95f5c6acd1017920841c79651feea4178af7e4e09d7249c7e7bbd0584b3e2b1e11694b55a29bf42e34187fc13bec8ff0906c079e7f4cc82767094729139b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc552c10b63616e63656c4f6666657267bd097b2fcf70e1fd30a5c3ef51e662feeafeba01000000000000000001202fb9bf175c31d76d6e1fdbf7cb39c39795a58ff901ef34a7b40fcdd5cdea4c14d7d7bbb4980f09e15b9916a156000a7426e07c5818000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140869fd9e056d9f45bf0a440755cdd97d34925a4c1c1ad925ee9878046e81546e6e2dcfb9405bb314f6e5aecfd13bc6c529ec216675fdfd6bd0398c955c1a2c29d232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac414089383afa7cab009ae37225f8885c7597a3d5023cf4977c9306295e6e5dfbf21f18182d585cb8b9be0f913588844c121d37929404edd207dc23b4d8f09c82996d2321034e31075efcb198c20c4ebe8df086888d1459745a90343d7d18894a78e69a14faacd101500500286bee0014ff7f013e1697387990eb1b981e1e25ce1cb9912a1409adbc4ef40cc7491f1837bac9c90b3047b30a0253c1087472616e7366657267cf9472821400ceb06ca780c2a937fec5bbec51b9000000000000000004fee06e656f2d6f6e652d696e766f6b653a7b22636f6e7472616374223a22307862393531656362626335666533376139633238306137366362306365303031343832373239346366222c226d6574686f64223a227472616e73666572222c22706172616d73223a5b5b2266726f6d222c22307830323061623334373330306263396339626133373138316634396337306366343465626361643039225d2c5b22746f222c22307832613931623931636365323531653165393831626562393037393338393731363365303137666666225d2c5b2276616c7565222c223430225d5d7dff076e656f2d6f6e65ff0a323439393032393431372009adbc4ef40cc7491f1837bac9c90b3047b30a0200000141406cfc3d04b2219764a6a20552f7242a1cc3fca732183de94328a45cd8788e4f313f4e1dcaee2d67172ca58165982bf1289223453c01b9e6f9d4f4a18e505dfdd22321032d393ab27cb4f81bda2b7f7f8b8818aeb426abd829b1b600ead9213d80f2d762ac800000017219b131d717535582e3e02e39480693312ce3ea3e0604bfd1db893633bc3f080000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500752b7d00000000ea85e9f8ec47d6f239172abc0e668abcac46e48101414087877f60fad2d1e0445e4bb1477c00d69f4fdae89f042ed0f7720458ff97f23ec65d7842f71c356a4d204125a13fbaf261c44900d1c13f7697d8b01c3b62004123210265376e4f7d7f3614122d1f188c94070e4b34bd93772df5af8da3c16446dd3fbaac8000000140199a5d269f8872835ececc9598406db3008722ee09f0df289b1f6050c50cad0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5006d7c4d00000000c006d5b7250b82ed645b5a5f22c7543d678c980a014140dba1f8adbb0cfe9e1e9981bdb0506ab900dbea474721977be0d1f1c5e33eddd0c3ffb7354cd5480e5ffcd4f44d931defddd51e960b34656a7d554183fbde374f2321037c955aa4e39183160a879a9a3ad7c9d1dfd16aa77a868331e449016584132d44acd101530880a4bf070000000014a329cba048417f5d015974705b565cb3d05ebc3714c006d5b7250b82ed645b5a5f22c7543d678c980a53c1087472616e7366657267fb1c540417067c270dee32f21023aa8b9b71abce00000000000000000001b93a173a234d3cbd682e29c22ad0ad445bb24cb36cc467b9e92aad278c738b44000002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c600100000000000000c006d5b7250b82ed645b5a5f22c7543d678c980ae72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c603ff4120000000000c006d5b7250b82ed645b5a5f22c7543d678c980a014140915745c3bd73cc79e2efb979b7f3122a67d170ffb6c5216615e0e54674348c11a8681a56ec6fec64efe17132bbda6589104fb8ee9007b83909cffd7ddb27b1cc2321037c955aa4e39183160a879a9a3ad7c9d1dfd16aa77a868331e449016584132d44acd1015a0500f2052a0114bf28093023643bb0858a119f0e065b450b14564c14424969118265662814ec17054ded54ee37ca663753c1087472616e7366657267cf9472821400ceb06ca780c2a937fec5bbec51b9f166d96f779e05d4588400000000000000000120424969118265662814ec17054ded54ee37ca66370000014140b232bbee34dcf7a7cde21210ad297e6f0d16642d31c22fb7c5a3d4b87c7fff5ff244788647d98996ca14f30a5ee331498cb28a3d0e13e55b60eaa499add471052321038d3394738e8efd20e55db058b17c9ee03593481abea8e72397c6d13e15b1b0b2ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 10 trans
	{ ID:"f710423e4d164f8db2439187ea2392e88023957c0ac8b4ab3c00a51c07135ab3", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"9c297d60db6cc49607db5d995590209fa74072c4d7bd0699e2336226971bbd02", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6159dc7737e13687a4c83886bd36cd815a63095144092876a4ea34b4e39c8544", Type: "InvocationTransaction", Size: 484, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"115ed2cda52f9049a15d4223f155aa25450d29b3863a8c0347313f197189699b", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7318d0639796880371b87c32eb15659945be823c828464635e2a6a1dd9eacfde", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"2bb19800bd9beeebb16228baaaff8479372f53df2bd6d33623ec0e45a7baf9a8", Type: "InvocationTransaction", Size: 465, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"f00ef915df3695acf119b4bc638fad0366d090adcd688848291d1afa11d15fda", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8cf02c6146ee0bbbe69b74629bd77da61d5fee7f1e15e4f83e05c340667d3560", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"34f0f3f68fe7840ba001491afa6e0f5f105b2d9f683bafc9a7515f3d8ff9b01d", Type: "InvocationTransaction", Size: 354, Version: 1, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e82cc3919b262a627734cedfc969f3c74091710e7fbd6a7b0780279808b42248", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "cd42c0355a1cdd615ecb7b4628578db832d0b229875d79d5a2aed79acc7a6222", b.PrevHash.ReverseString())
   assert.Equal(t, "8ad3777c18c97d6d4ba0e0fdd200dfaa626378704eab9164e16fec1b39033c7d", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1528475048, int(b.Timestamp))
   assert.Equal(t, 2366434, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "408f5e4df4157326d1b64f3cf14d71d5a38ec72981bfb13e1499345170976140e48036f7e8ba0428cface290943c1c0edf66ec3db0f45d432e8e47793421399e904069c20bc54c5a055bb4826aa7b081d87ecdf491eb9c299b1fad14882fa587d78ec61ae1ff25ab14c4671d7c7f2daea278ea29770fbd29288f2794e6e0df4bc69d4056c22d928caf089d2988b211fdf8717c3b35ae0e6f68f465e16edfe50be10bf72a6ddb5cc1e950e82600a71b1437f545f61ec43bbead18630ad7e89fc552d9b54011c9962aac978630529ce9baf4f9a5c8839f1b2f766c79cefe0612aa06640257304bfef01f050a523babc120dc9f115cff59552610ebcc05e57dc132583dbb05401cacc1851cbd12abdba0cde45861cee97b94f32ca16a84b4e8429baf595178204b732669096591ec8ea0a755a005682a94e4eae73aedd29063be2ff6b0f710ac", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014e006e88671b57e66942d3f8a8412d0cab40242cf3befb26fc6f3e6135608",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 3540, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode930(t *testing.T) {
	// block taken from mainnet: 0014f5228d9d47ae95dbbe5015409a0bcb494a704ec54e49adb4de96f534ad96
   
   rawBlock := "00000000c8e6ae08c41fd64df534be7115c633f4a93fcccdcda6e5614e6c787b980c4f16bb1e28382facd1ad5e846ab2c57a2aaeda2e2b3d3ecf81da88bff6b0a00b7a1a3421fe59217f1700c32e32837095e9b059e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140730e9cb382a7733ebeb973e94fd9f602e805de8c66017b22fb2527c24119691a0cdb4462529ac06e070363fe7a2ec83d626a8552256008c0004fe96120f8d222403ea4e8cc0444612b6eb1fc1fcfe8875173bcf19186b47e759eb07c7c8d1f13f18b98c8527aeee742395c2f12ee295fdf889ef018c93a8cba7830e1696af87acf401fef67257e6d6cdb57461f8f63d2627afce9ba79dd33d243c5dec6eb06f99e2f2eb7baae1d8abcee1880125b06ef2f044484a55df7f92436340d2400bbb746114034a1b6d442618a9eb458c52ca96020a61089494a9bc3a52a4805fa12d88bdf1fbdec8a9b585ab0f43fec1b5f72a0ef24c5fed20cbe938f4a7a63825311790346406b38a04d25d4b3c1c762a65b17789e9fe50ca748a3b53d6db2baa92352f5a4dd33f5be49dee30e0e91c496f78f3f0b90a03f8f7d8008f6ed6c9729a772a3f926f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae060000c32e32830000000080000001a07a59a068e6970e32d83d04d32e2efe9f011621fdd9e18710eaa60aec1db0260000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a83cdf09000000fe9820b978cff95b9681c5f781b2bf7bef18b8840141407ef24fa9d0b0d42cab7ab981d880d2757544d01142cc2b354879f4e01305d2ed1f99f29f8adb3d5744d3521ff70806b517d5245dfc8909664c81639b3cd070682321031889be4004bb171fea7b25b355aa7a4891d2c38751d98225e6988cc6cd5de93fac020001ac7990ffb2d956fd437deb924447d4794b6183b919962aaa716c665ef3d87f7e0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000717f000000000052b2cf95f6b85a0fdf257739897b3437969bd341014140266efb0b508486364cec05f3259a8a74e7ad06de5fd826a646339d883b323adbecfab9459bf2c9d9f9eed5bed5561a3ad50f99baa51ccf2319e9dcd9ea7340be232102cafdd2200cae6c5cd153bbd2f4b9922c29a16969ae0d5bda6991057252b95dbcac0200011605d41973547705f6887124591be1667828ecd885aa3f828fbbb168adcadac10000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60a857a2000000000005f069ba7473c1f98f003449fb76f05ba10a3530014140f55a296d94910f2ca2de09000adcbbb95f2ad072bc3d11b231c3ff272ea7ffe7371ccf955a1af57eb02f87a3cff105f5d74b543b433ca373be027185b81bb20e232102aeb7fa1c8ecd3018f3b77d171dd791c117932a50def347e6291bb7c2d18a1d48ac02000265d150e907b452f1a66fc892e2ba235ba11c9a3aa9729004e49d05a4024b9df200007de32d00e9012688dbd36998b90567d828f5407b39a01f167559a49dcb0f9c640000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60724b120000000000c07e711814cc5afd577e7308b7b6f5323f7ac92a014140b46f48f67fce25407cffac8dc360dd7df9f2830a1a38bc8303efdfe63fe5916727d37f088b45e03e9301d44b1110fa1a1bf23dee8a51ce342a2b441e21e29c312321033cf50576d3f6903bd45b633d3778bda0437e564cef9e94e7e267cff685da0027ac0200070a6149765391a9e969e9b349d62be99f473757b54436af554a7536c59a7b25470000809fca6601f9006761536822d89daf371ee108a8b34ed4b3920850088dfa2f6e00006908a38a71d49cda94838d5abe0ee7bd14f78d915c3af9a3532fad11d8d511410100c73600c3d432177a32479a8021ab4e0e7b8c901710f3e7d5f19c3c5c0abf691e0000f4dbc01ff31fd5927a0a49a4df38cf2dd5952d9257d283df5fd23e839e5b841e0000504bc4f2ce2572095dc147ce264b340a90f87f32df67c22d3a6c11cba1b581340000b4bbd607063d3a255210b316f791653dfa667b00ec01092a2ce128c1b5c3e85c0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60f0e3b70a00000000c0f128941f6da8d32c8ab263fe9057c8e0711b2c014140112a488834a5fe54fb8f9a42113cb2ac91196503dc0f90cc28500b9ab05111de06a7cbe3cecc71d9bd1a3f8df64dc999194f476522f078738a01232e84a1c21b23210254c1777df1a59b372c49f68b213feb7b66d4a932356842648aa123a085ef7d62ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"5b2041f589a64fe9161cb3a863a147538f765151537cd645512c7d70ea43e2d5", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"e5704ef11e267b3a76f0690d47b4851a9e3b065437a91dc208735fcca421ff8d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7c88888c8fd75def610fa0a45af16836171c4226954117ea622f10bcf1e8cc0e", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f2961cd887f7951b751685ba3d7f0ac2e92858872ee3c0280df43456fb7de5de", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"264a479d988811e454c71d2f74ce193fa786ff7c092fe54f1e2646f785c9bca0", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"431634e51aa2b06454d42dace3df2660f71cf7792ce6c9446d113aed9cd09416", Type: "ClaimTransaction", Size: 407, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "164f0c987b786c4e61e5a6cdcdcc3fa9f433c61571be34f54dd61fc408aee6c8", b.PrevHash.ReverseString())
   assert.Equal(t, "1a7a0ba0b0f6bf88da81cf3e3d2b2edaae2a7ac5b26a845eadd1ac2f38281ebb", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1509826868, int(b.Timestamp))
   assert.Equal(t, 1539873, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40730e9cb382a7733ebeb973e94fd9f602e805de8c66017b22fb2527c24119691a0cdb4462529ac06e070363fe7a2ec83d626a8552256008c0004fe96120f8d222403ea4e8cc0444612b6eb1fc1fcfe8875173bcf19186b47e759eb07c7c8d1f13f18b98c8527aeee742395c2f12ee295fdf889ef018c93a8cba7830e1696af87acf401fef67257e6d6cdb57461f8f63d2627afce9ba79dd33d243c5dec6eb06f99e2f2eb7baae1d8abcee1880125b06ef2f044484a55df7f92436340d2400bbb746114034a1b6d442618a9eb458c52ca96020a61089494a9bc3a52a4805fa12d88bdf1fbdec8a9b585ab0f43fec1b5f72a0ef24c5fed20cbe938f4a7a63825311790346406b38a04d25d4b3c1c762a65b17789e9fe50ca748a3b53d6db2baa92352f5a4dd33f5be49dee30e0e91c496f78f3f0b90a03f8f7d8008f6ed6c9729a772a3f926", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014f5228d9d47ae95dbbe5015409a0bcb494a704ec54e49adb4de96f534ad96",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1938, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode931(t *testing.T) {
	// block taken from mainnet: 0014f71ed1c20eaf60609ecf1441d00756d62aca61b54e5604dd768eefc31fe9
   
   rawBlock := "0000000066c997cfd4eac09c5db37668a7f07b56f015ee80cc41120d057fda5724666039e6cc7e0f109dc4343916eec4970e7fc88756d3b944c49b5489ec16078da2137f6fe5b05b959b2a0081b13fc4faf00a0c83f5011bdaaccee8c4d2555c829fa51e31551ef201fd4501400bf6f5ac38ea78c1483e39ab6e9d07a7f5ba89f50f376e0528d7521665475ef891e6a4f467c12a68870402774f169001d9fdf60ef713b2645544e9ebc84c4cef40c73d04543396152537fe7b5afc2a8f707a7abed8f8bd2859e6b95963b3508195bc76a2cbfcc3cf5c07d1b5dfed97622d4e018aa134e720c175b120764bee59d640215b4d37bd3ac8148e556fb24a59e9b1ffddf35e96b845c1c03bb05de2a52b31b7d8f9f86ad9349e4e58d1bf1b6acd44ff722d0ea09442ff2301ff1173ff48d54014cf847c089eb773c558e6ad818c8e8f94d7bbb2f6e15e11459c7a3c03c0d2fd002835ac16634198b56b6ea17b7e996542ae2d5d0acb57630fd9a97113105baf40b08c9e223c18726e467334357f542ec2da139a38993801ab1c1a1429889a80b73a413a404dee388bf1d66d6525c41914745a04d4b2cbfd51f9b88be6d3b95808f15521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae07000081b13fc4000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60c800000000000000276ca91cdb003a2bf6e62d7b48ebd07d24f0579900800000018325113c8167a03bad8dc18a0a750307bec1dba346666f98c138af9a35cb6b3b0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500205fa01200000004d26f52dbde9dbc0f66b59c9ff360f568d6bfc10141407607471cb9512f4e3e7ad700b2c9f27882f69c9bca52fa748cbc7a0f9461774412c37cb81e9e2d3d70191d7deaace2c5ee79b6511d256ae6740d8f28526ecc9a2321025839efd33f5b01e912ba14dfa3de1d60b3d5e7620ce47323f5dbb01d3ec78ef4ac80000001202bb83c32f59b2d13b074689a11ae336debd782945ecf8b9fe64418b4932bda0100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500180d8f00000000a98b7a744b92ad12c2975f8d738bbd0a13e4e32e9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500b2955b2f0000003ee04c7af4bb48d462067df403a2296542cb0a200141407d9c222388658bf2d99e2692a8f3738909cbb14d550ac5b7dd9b77140d17256c71863b5d524ae35b3e36af835c65d9c2c71b7ec641b91d8ac4b465af54cd22632321021f74b32e7a038c11c727da2d1c5220c7c6e4c603d9681b67c134551faa13ccb4acd1015e0800a3e11100000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc514200ab109e6f6fd088e0ff3980467853addd8559153c1076465706f7369746726ae7c6c9861ec418468c1f0fdc4a7f2963eb89100000000000000000002b4c1c44ee38cc045193082fd17f6d653378986408c243c918b511cce7b4ecca500005ade0983582e677c5063010f2851d7eea119a8e746a3651e9f63fbf5ba61c2e23000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a3e1110000000026ae7c6c9861ec418468c1f0fdc4a7f2963eb8910241401678325cac5fafdde13bc685e82647e877171a748356e49a612d4f3860acf4fdcf59af3afc0a030c367bb0bf8dbafe49fe34c07c282ac317beb801656668c5c723210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140f9bc5cf1fe0580ba4227cd6a36b2463301de245614711a172e229fdb85dcee93a57d24e27ca26da118bb9a6516b4a7f31d58ce6fab3f29603442fc5ecb38bf3923210217b0f9302fd6282b59809acac1557f8001ff0bc4d46aaec7485f41de72c68729acd101530866f12e0700000000142a3da7cc18feb074a9e6248b007ea65bba2d74c3140f3f3a72ba5db7fcdcea0f9aac6c34779dc4959553c1087472616e7366657267187fc13bec8ff0906c079e7f4cc8276709472913000000000000000002200f3f3a72ba5db7fcdcea0f9aac6c34779dc49595f01531353338333139363932373030383138386462646200000141408a6048e65cf84efabe2163b579a2fdcd06a2d2266a93a0697f2bad18668bd39d43ff6d51aed49f680c334015168d6d14738d88ff324c0e9822fbdb55be4f0961232103d87511ddaf3352880da94d4b561ceb1782fbf0e52021003f6b58d5fba357eeb2acd101a32432336537636334342d646333642d343062632d626130612d396336303936396237343537085903a6bd290000001499956267fb8c5557369839f4c3a6bb9d19ee6ac3083ccd0f1b00000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc51460bf4d32b1937dc895d4b98863005265a50db3b256c1096d616b654f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb8910000000000000000012060bf4d32b1937dc895d4b98863005265a50db3b2028d76a18f89fba687cca9663ba2a067b939b37513c4517587380570ddabba2f4e000089d71e3a242d8b6addc4b10c997a2dec3a1045b4feb5705c97a49692ba72eaa0290001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7034140e02d17195f5ee95a56650c02742757567bfbb0067c279e4bbb5b7942d009e870bbe35f601ad80b9586bff83a40a2efe0f08ad2cb85cc6d434e2386beeb9b183123210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140d1388556e147fd128dbcafbbf0b99fa3cd058bcf7c5b3dbe06a477ca5a77b5bdda757a8cf29d4f6b0221e69f7358fca130ea32452e11fe0b9bf946a0db959db3232102594d6566e34f433050856eccedb206b225719f6a5322b435f6befbd15a5dd6bdac4140d7562abbb5d3d60210d2952dbba8bc6fdc70d0b67d01d0762990ea1cdfafea3764715be2e1740be02ffeedba0dd17a15bec3487c5fdb18ee15c40573257371c0232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1015308009ab734880000001400000000000000000000000000000000000000001468af6ca19264dd6dfe0496ecdd12dde3cbee4cfa53c1087472616e7366657267fb1c540417067c270dee32f21023aa8b9b71abce0000000000000000022068af6ca19264dd6dfe0496ecdd12dde3cbee4cfa811018f636f715fadc30dd6ce653e1ebd9960000014140f5d3731858a471717c807ed17b2cd17edb4508b491089860b44a55aa2e203a1942b50cf8452a737ec910ce3fca5170b12f9b86f250a84b78ebc45189e499fdcf232102abb7df2fcf8667bcc9dd968d41410843619a30aede06b858a255a089d9b7dd30ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 7 trans
	{ ID:"e6b9fdf61b8a1bf53bdc2f6f72dba89ec6e87e78a3d474bcb7bf41fa32d4da67", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:0}, 
{ ID:"2b4a6148e510a2bd29eabd7c027194ed8602bb34e523a2de767f10920fcfb4eb", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"136990952818e5b7a2ca444186360f1bbd78e0a952b44b76b895578f1fd16e6f", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"119ca4d9c1cf4c7ff27db31c6bc5ef19931cda7a238cdddf3e985bfc5d25278e", Type: "InvocationTransaction", Size: 441, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:2}, 
{ ID:"f26d0e87701c5ad804c1bb9509f5b0e69bc0a467d13605f49ccc004df4a204d4", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"c52fd5f77a63061213037c2cb5d2e555c14fe91b917ab1a5921597aba7f4d6d1", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"c24a433c51fdc5ca71911e9428429a05656cbc5ac5627dd5bdddcc97e2687d02", Type: "InvocationTransaction", Size: 239, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "3960662457da7f050d1241cc80ee15f0567bf0a76876b35d9cc0ead4cf97c966", b.PrevHash.ReverseString())
   assert.Equal(t, "7f13a28d0716ec89549bc444b9d35687c87f0e97c4ee163934c49d100f7ecce6", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1538319727, int(b.Timestamp))
   assert.Equal(t, 2792341, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "400bf6f5ac38ea78c1483e39ab6e9d07a7f5ba89f50f376e0528d7521665475ef891e6a4f467c12a68870402774f169001d9fdf60ef713b2645544e9ebc84c4cef40c73d04543396152537fe7b5afc2a8f707a7abed8f8bd2859e6b95963b3508195bc76a2cbfcc3cf5c07d1b5dfed97622d4e018aa134e720c175b120764bee59d640215b4d37bd3ac8148e556fb24a59e9b1ffddf35e96b845c1c03bb05de2a52b31b7d8f9f86ad9349e4e58d1bf1b6acd44ff722d0ea09442ff2301ff1173ff48d54014cf847c089eb773c558e6ad818c8e8f94d7bbb2f6e15e11459c7a3c03c0d2fd002835ac16634198b56b6ea17b7e996542ae2d5d0acb57630fd9a97113105baf40b08c9e223c18726e467334357f542ec2da139a38993801ab1c1a1429889a80b73a413a404dee388bf1d66d6525c41914745a04d4b2cbfd51f9b88be6d3b95808", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014f71ed1c20eaf60609ecf1441d00756d62aca61b54e5604dd768eefc31fe9",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2767, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode932(t *testing.T) {
	// block taken from mainnet: 0014fa72519a35e04b13b8e0e82d0a5290d1bc63349998de46db858e5596ac18
   
   rawBlock := "000000006c2b6dc5fa603fa4e10792ca4e07d85bd61499fea69c8b031b2fd8dcc9f6e851e829d8c97d6045b6d7b8351cfff3c615f969cf81a24117e661432b4ff6e3e11c64d6b75a04841f00f33f9aba3582026b59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140a43d126e9db7e584c82c523a3e1eb5e4deae1bc782e05848d75b0dbacf8d718c913ffa40559502cdb63c63c35fc467ade412d4eac7deeb096a4c2203d31cefc240c54ba830a6e0736923c6394a65dc31b1370448544ee872467f5263023eee7f432b6cf169a17d4248e038b2138ba4f3b1dfee4ab8f9c6a7e4151dd75d4e30f543408d9dff1f9fe50b7314a8472365217dc93dcb1a8fe357c900df93caa02756f8e406151bbe7f87f74bb87c70107a939e4e70253dfad9e428199b1de031a35e3f764046c5d0327a9286f99a80d38ff75e6ddcd678073c5269d1ca4f43f63dea31a7ce423168602d427816c0e9a593dbed1ae1ad69bbbef6220db2bf9352fc8ef5529e407ef2aefe80bbebc7399cb26028db48cc35b427788fb25360532c928c7c4badb37933dc9d6a949173295d5036b1d59e66317e370fb256281909a9b30b8fb94241f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae090000f33f9aba00000000020002c3b0b08e456a6201bebcf5ce0492f958bf89b649c1735358518073df8b0299a10000a62f00f58e6fc6fde4a03eeaeb87787d7f65b6a8d791629757b3a4ce0b1637e70000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c603e02ce00000000001dab9aab2980e2ef9b192235240c89581e9e04c2014140a3c0ff6c0e51cf6ba65631ec2eaa2efecc0a1a0e9c9a9d19355150b80a5c426eeb06ac0eb516d2cd8141bbf85aacd3b07e6d98afcbb3eeaa394f659aad9d235b232103c46710b5e930ca629b9e12b5f20413963e770c4094ba63bf22bae6b728859eefac800000014854a47bcfe950b5bfc0464b4f10d76995888934be718a7dd83de802f23df1a70100023fa634d52b8515b6ec4e92cb5f48c22b4c0b055c634ca91223ddc2b6993e2ea500e40b5402000000312de6ef374f1e3dcbdf6762f918ea75c55a4c043fa634d52b8515b6ec4e92cb5f48c22b4c0b055c634ca91223ddc2b6993e2ea5003c8f69f74b0000ff721bbe50b400bfc2281faeb4c6a94a70912e09014140a3e419be6f957955853027cc99ebd8c69184132581dba0d2111c888cd3ef68278bb058d8bfeb8648cf944385558faca647737fb074754401d458007f42c5ac2f2321033c229d6583bea05c384b5c8832318f8ac5c6fe4a6b8df380902f7d9b52681e1dac80000002ce91f665a9813ca563ec6b1a280169316aebaa0c7eb85a1e86fb512bf55c90660100a08cb550cc9b9b165236064f4ba4e75833d5296dd0761d939dcef8919f07e4150000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50094357700000000c3a81ddf42a1599989431594f163a70e616cb5850141403f53aa64580db8a813333b1bf7d443b5454643cc1fb3401cf8b9bd66092df87e7024cca54734516406c79f48ebd987e95346629c1f076e97aac1c28a8907800a232103d243fb8fcc91258755da48891d9d243332dc66a4fb44e414b8ab0fa6561472b2ac8000000109f8e850c44c3358755f50d7077f52413c70ac5a4e8c6b48977e5b479848d2460000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e9a43500000000de025946bc52f69e5b4cc6c8c0147f67b4e87900014140d4fded0f4b91a1c70f200a2ae46e16a15785331f2bfb9b40ad02c583a0e70f011604c05f3f79aa83174fbcae3a8b57c4dd0589f68009009d1375f8b7049902a42321029ecaf28092af7d4607b5380b9734d426229a2a42436ae2a38489d7039cab59e2ac0200018172311e635d6c734e353252a967873387ee79fb755646d6c5a0c9880bfca7610000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60b7c4080000000000abc9d94bd431c4e5024b3b9abf19ca5c0c24406b014140a7c8e52c43a9c250cd310358e1e5e51004e48a374a0c630b471366635ef2f6784fd6eff694a0312a12c5e177c24e77738902bf3edd0311c08618ab57c920a60223210356144f2cb12d5b9c9bd38a62d6a7472239774aaaf4648fe73500bf054f26fb08ac8000000273a185606a492076e9eed47c12e08bc5599be465e3b81694ce212d9f38ede7eb0100bf7421d5d3cf32f9d80367b86ab8fa1bb0ce59e0a8cb0e533f72196905b919160000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50094357700000000990997a0982fb5022bfb649361c35edc9e6d1faf9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50008af2f00000000e2f91eead806aef990766808b4857b085e7cec49014140e06378819bf615c7b6db07b40d1fb4a66ff53f245ff15fe549370449ae7e643dc5de49b363d16ee3c9f51842360aaf9883e8bc0689340c7cd1a9df20d6793fce232103f25e00465c323fc602db77b2ee777a12855886151b33a90f4bfd987b74aee31eac80000001b21d531bf0ff20b35c8419644f0e816f59ebe577fcdb5abeac2ee1963c738b5f0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500f082960500000087c3e234fd76f4bb77fb48978860096ec9e68b690141402759e9f22d309134e3148e241d7b30a2cccaf20201647d728b602804d4c2b47ea33881a2be19d98cf6f71fb4b597128f0df6a187383dab153949a2161ead15222321039dc2d2a31b693225c13c91b34be94590f558a08d670f3bd2f7ef136709bb3451ac80000001abe420e12e09b9008c453c5f64204a90ba5c0c85a9904c9b906b3eae022928360100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50008af2f000000000ad3b4f197ecda315b0df0a45cce3dc04a676d8e9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500fb48c6cc000000bf28093023643bb0858a119f0e065b450b14564c0141403bc81a1bdaeb4c517b6666f6594492417b2704af201db203c3993468a12b080cfec80b6ca90a31c88c3655bba3507941e00eaa9253530eae8d2452ec3f27453e2321035bdb8f130dfbb25037f93a26afdb0ea04973d893711351ed9afca51e3f4a17daac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 9 trans
	{ ID:"01db234494f934bc1a1452945a987f6706ce50c3229e81311d3d89b2b2a69180", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"c742f342c3b5fa43fc043f6cb46669af4ad8ed4f2f7a005fbdbea79113cf8a70", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"51cf8858fdc97302fc5b5d87b3d916934fa42d5384f35b78360bcd51d677e89f", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"fcf4a24f3c621ead9a565e4da2b3d4438f90d77ca36fdc5c6a0a2dfc88f95bcc", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"faf3ed4af7ad5c245ca47b151c9395f5e28534afd4e9818031f1b919e722f1df", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6e4b26eb788d2cfbac61cf630c81c0b793e49b4fa4ec9c159bfd6d8394c59891", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1ab55b0898990cd1f5497f099a6d0bfbad811dbc4f7d697cb68480ad53a05563", Type: "ContractTransaction", Size: 296, Version: 0, InputsLen: 2, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"720f7784125fc63b41bb16cf89cebd79b58197f85baf57de0e1e59b20faa6259", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"df34bfdc61c353c3d06edfc2f363654460193a0e92b9ab5c6ea0a0794b948cda", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "51e8f6c9dcd82f1b038b9ca6fe9914d65bd8074eca9207e1a43f60fac56d2b6c", b.PrevHash.ReverseString())
   assert.Equal(t, "1ce1e3f64f2b4361e61741a281cf69f915c6f3ff1c35b8d7b645607dc9d829e8", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1521997412, int(b.Timestamp))
   assert.Equal(t, 2065412, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40a43d126e9db7e584c82c523a3e1eb5e4deae1bc782e05848d75b0dbacf8d718c913ffa40559502cdb63c63c35fc467ade412d4eac7deeb096a4c2203d31cefc240c54ba830a6e0736923c6394a65dc31b1370448544ee872467f5263023eee7f432b6cf169a17d4248e038b2138ba4f3b1dfee4ab8f9c6a7e4151dd75d4e30f543408d9dff1f9fe50b7314a8472365217dc93dcb1a8fe357c900df93caa02756f8e406151bbe7f87f74bb87c70107a939e4e70253dfad9e428199b1de031a35e3f764046c5d0327a9286f99a80d38ff75e6ddcd678073c5269d1ca4f43f63dea31a7ce423168602d427816c0e9a593dbed1ae1ad69bbbef6220db2bf9352fc8ef5529e407ef2aefe80bbebc7399cb26028db48cc35b427788fb25360532c928c7c4badb37933dc9d6a949173295d5036b1d59e66317e370fb256281909a9b30b8fb94241", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0014fa72519a35e04b13b8e0e82d0a5290d1bc63349998de46db858e5596ac18",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2586, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode933(t *testing.T) {
	// block taken from mainnet: 00150bcb1a6d47004b61334e0ffbdd503e46e536b0e3ecf33c1a3b04c15cc291
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 16 trans
	{ ID:"1f66872214a2987845152edd59cd980c40acf2b7097ccf66014d8fb986393538", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"94c8cb188beb27cab538eb3912af43a21ddc3a864a3557e8747ebe4b8ae55b94", Type: "ContractTransaction", Size: 1290, Version: 0, InputsLen: 9, OutputsLen: 1, AttributesLen:0, WitnessesLen:9}, 
{ ID:"9bdee9bf457ef6e57a9c00e80942812d93171a0013def4b7f4a40dea03526377", Type: "ContractTransaction", Size: 2888, Version: 0, InputsLen: 23, OutputsLen: 1, AttributesLen:0, WitnessesLen:20}, 
{ ID:"dda3852814bb726c12963717ab0b36497ef04e3106e01114dab1cc6df5297877", Type: "ContractTransaction", Size: 610, Version: 0, InputsLen: 4, OutputsLen: 1, AttributesLen:0, WitnessesLen:4}, 
{ ID:"b0475dd75caa2b13e8d5758b87b232e982c666cdd36562cd190c97fdacc79729", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c4d65159a1f98ae5012e9c9c793d42630312e2974c2069e90c79e14071f5f39d", Type: "ContractTransaction", Size: 678, Version: 0, InputsLen: 6, OutputsLen: 1, AttributesLen:0, WitnessesLen:4}, 
{ ID:"ecfac1451b2ce6989330d575fb5e7cd39f8f5579888c45f65604956f97462071", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f13133f15acf7daec6a8071c217663cac3afcabc58234db3fae21a507ff59d23", Type: "InvocationTransaction", Size: 294, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0bc9a068fe4ce4d398f2d7f047c9daa170e021620d7d7d51d370c2a041fdb502", Type: "ContractTransaction", Size: 474, Version: 0, InputsLen: 3, OutputsLen: 1, AttributesLen:0, WitnessesLen:3}, 
{ ID:"072ef68bccd76611f4d2b548aa474e21ed49ce7e990726de83769f25cfb5d3e6", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a0243840265bad7bfaf86ba2c2ff0021997386289bada7d745c6cba177330460", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"37a5d39c710feabf927d702c289480e3ade7ae61322565e6e215e10be61d7ed6", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b78a7c8a805bd748675c84cc44bd576d7d6d8b5af24e32c70dd100639e5f8840", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e2262ce539a17ce7c70d8a8d9763668ad55624125aa7c0793fd38b7e88b0c3f6", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8f7f4853775fc0cb136175a091d21dfd7533d3ce6333aa43c4184e814f88d380", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"18718a6e03d4a796df6c9208fab8c59da03924e8abccf81950f8902c338f40c2", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "64f038367c8a9dd34590f491cfed7cc99220cf78a2518d546b8055edbe985a26", b.PrevHash.ReverseString())
   assert.Equal(t, "8469df7c20bcfecb97b1c4eadb5814444b00a1d9d18e1fd27355d48361e778de", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1530661775, int(b.Timestamp))
   assert.Equal(t, 2464151, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40aac05156b958286d713ffcd356c0c9b43a4ee7d8a3c3c92daf28e124ae96e49417838bf294599e2164a29905ea508baddff8d9ffd74102affa071be3c530fb5640349ccb8898d29087cd7093ee3fbf29ecf3bd6ee8bdd8352ff61277c462b8edee0e2c63959300ab2863db570876ac8cc2b8d3dbe18192e8c74cac9e3ee5b7092740255bbd8a1717c45abdb6926ded3e30954d808b4a042c06ec154fdb079d8eb74c1499759955ae6faf5da32bcce5454185cb5ced8fd35fa79e0f3a8a69ebb8f5d240ef1e0ea3ebee2891b573cb75eefd180760a5627a7581ccb65692a0979676d4c6c3c895648d608dd24f35dc954f1a6d8b9735515e6155f9924e287752c8c0856440ff92833d628f30495aebd16f320333021ecf3a44920b26465dc6ce476115c026fc54c7633da01776478470b93eccd6bcfd776c927cc8a9b224b523ca863d5b80", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00150bcb1a6d47004b61334e0ffbdd503e46e536b0e3ecf33c1a3b04c15cc291",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 8979, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode934(t *testing.T) {
	// block taken from mainnet: 00151cc12803884d490c876ec04dd3773784a7716b20ba249511f5c999d6e2b6
   
   rawBlock := "00000000f21236154c8671769fca7f392976a423b1b7d6a2ce8553535f58147f22bd88bfef6474ea070255e45f1f50a166d435a40e49861d99fd07d51adf972124902c9b9573cc591d9715001d56a453797690cb59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014065b9152c0b307d7f420c944df77ee213580c8f670e0936e3194ec8db5d2333c21f98347abf0d205d38e63b4f01be4503c84d75a025fc7920e4535b0e7ad0b39d4015df971fecc933a5d94a572385690b1627407daed7e68cc0ed922032d51e081c7273cd2a848708b439bf4adf554d5fcca49088fb86691a22b7aa0d20de98ac5840e2a82ba9cbb4b4808b41b2e2e1857d434eb143fa8a1da6e27b9d5c0a23f81836f75d4bb65f3781e007f4a41f041a72e1c1cdc043840b95aaea52e6b6940ea22740d7ea81e582baf187e973ca6fd138fd9af5a5672347cd50453ea38963b149b6621049931f76e234f1250a2e25e391877e0b9a31a9bdabd293980b1995a9a2e4e740efdc27d2618d70757c1ef4916888bf1c6fe3e7d776440f1f2fd4404af3be3b48c270400751ca74325d466af9d6e66e6987c9d96c12d3ba56f50bc6ee1b60a912f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0e00001d56a4530000000002000398ec0dd45f4e12ea9ca55e8880e24763449f1c63e0154072e058157170cfed0801009b7003b6910e52a628cfb44a23510e94c5b295253e8d12a4f2be6467fdb20c6f000018ff4d24108f3979fa039fd758208c527b209a8397b5dae4c36debea920312ac0100000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60d5de080300000000c467e7cd9196aa517aeeca3f91c2a69bdaaf4d61014140480ffee2ed2668021d5609b7563f30baa4a4b96c23268ce4ae747defe600da8658aa7e0a6a88d3018d3219467cce16af2ff880d2c0e1b81b26fbaa609807eb3e232102d1799a4f6482cb95068c5629dc0f03036da3ed16faac36ac8aa976c27dc1f8d8ac0200015995a7040c9d61c82d10b9b99e169e3d00cf9990287f40c904aac70b89eafdfc0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6008da17000000000075a42e1382533e4069ddd7a03144625c9c677558014140a63a8d954b0920826cc85e3c4e8c388e96cae852fa199af40f3b65cfc982ea6f6d9888c9757e44cce5e711e99ccdf86b494a97f88f61c2718784052176819afa23210313a6c3ea109bbe13e44824827369c6b325ccf28b23a50a0f6373be71a8f318f5ac02000198614a2428e1b5ab51538f5cac8914284db030430ecd01b9f50cc63558ecf8be0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60b00e000000000000d0eec5826cf33c9a7cf50309d44e4c69504ccb7d014140168669e10fbc4cfb471ce749cfe97934e69f6881a370141d05f36fa1fa583404fce96fa8a3a66c6c6c52a22dfeb9a896f2e0218ecc7a7b7de0b079e29e1663a52321038e0866ce7961e1b070cae5c4dab47cb659b55280313d0fc5111c5e3dad54e9b6ac800000017b6ed5ee5762b7988f34374ea1740c09d5694ec0e9f7388d274ede36c87519f40000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50065cd1d00000000d6be08e611dc8f0efebc6c62b266457861a3c8d601414055a630251fc584b50f145a1d6e55aae053c41cef35c5cac8bb34f6681c91349b77979e1a579a74d1bf9734f6b5b511ab2dea4a2a1b16d42db4f1816ac7eb846a2321030df80a5319109d46a50614aea4a41223d9c7baa377bedf4a1368d16f4d3d5ea3ac800000011535a672aaaf671e2030ad31bc336544c3471338de31a058b2cc564f640693b8010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6030966c360000000028c4640fb0eeaa74befe9c511785936aff46e680e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c607bdc7c73d50c00004d3849ca9a4812b6a664b1164ed095df776490bb0141405003fc84d9bed28b25088d0826358d30fe1bd49a37be66d1369a124632a736c9ed20128df5bcefff383b13add10883c420312c33fcb8b73b2aa9e10f71c1ae21232103df7a85d23e6bf0f065923915d0dc9ef891c2f48a1f7d99963b83fe0e98bb3033ac020001d80a62af63c34100b10d401e50e942c4d4c6570b4789d7cb3961e675375639b90000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60f85b0400000000009bc5ff87ac823832e95eba7f27befc1797863b2601414005d6d255afc15975c2bfd29e71e3a5db5dffed1c33e8c61d250729f78a0d7ac1e9e14f7bf7e2725a6ba56d950b2b515a5e8826e2abb93d8436a9c3fae6a38e53232102db66bc9a9c60bff31fb0de2367f6fe5f08e5ff78ade5c39ce7997e73c77cc1afac80000001da153b3163c6091ec3a32264adcc4ff3cf9006dacda8da7a7d3a7fb84b79cc050100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b00000000ee3f17a5d58039e6080b078c8778498217105e5b014140c3ebfabda99fa9006defbb4c2d56062e917c9f551b5cbd9fb5c7a73ad242133f88f959d3af6bef04e9134a260a373ac6d81d750f846969dc60cce52a6f9cf5d423210343625121b380c81eac9fad47b867425fba50b8849afc79796e63f530ab321ffcac800000018507f3c929e706d647d18fb2fb1644018d635b5767d8ad78ff04b3de2f8734110100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50042dc06030000006c7c75440f7139451c50e553fee476a7543375b89b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500daf89a0000000065d9c544180dc308c6028b132c0b7478eb2752170141402d17a6e659b019e3c952b16fbef21c0e287506c07cbdab5677ba1be9a1338d60115b9056fbe273d6a7885a354891b8e6e2e0f43d3befe71b74419c8821b18e5623210343625121b380c81eac9fad47b867425fba50b8849afc79796e63f530ab321ffcac80000001e9377882829f47cd5523ae1eac257d79f9ad1d031c5846f041a7fdd517b1a55e0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500d837f3100000004115e68c9ab3efa63df792965ca1fb1efb215a0a014140e998b4acec5959ed8b600d1f02b53afd407ae58f21d0bcfb29e5fcbc9337f6cf8f11fadbeccedb439b726c819f9bdfb2b0480974b711d83766f9c9dbfd073eb523210384c756cc4bd98a203a8a4bed2b93d71a8c4d1f9114ec7dda7353dfb4c26e605fac80000001afb53874fcc3617e9d0786db6f02c34c37f1defeb2e1a990d0221391014b60450000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50027b929000000001a9e176f73b5991367bf9f68e69f5379287e693801414090cb3ff1462381cc7d6dc499fb9a053c7c5f96ccebb91d5ac7d3a7448410e77c6d54497643007af64e9a58bd585d39a602dec24a898ba7ea5cb6c7573b9d73222321032181bc729cf1820b721ac25f292a48745d0edca00c034b90ca1ba186b8cfe2b3ac02000161c6214fc056be10df48b1c0561dbb963b29ecc006f79936654b663d99cecbf30000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60500f020000000000b1f88b34ebc850637a799cd579f88302115694b3014140089e86efc7e08cde8cbe5ea8d02245a5a9b2717e2ee587597bcc74c5fa11f730378b87a6606878c6b9f7ea9f96071cb1e274a6e53e3710d524bd7a6184c999002321028804a3295a0a8a42a87955a2078a32ec32987c2f68876dd4e3c1267a34b3db70ac80000001bb0edf8ffeb4887fe57f34d2fec5be9d242bad2c820d48c2b4511fefa97732ca0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000002ad2adfa000d45af1c9fd5c20cb140c327f3d7ad01414033cc5e2b86b68fe3f47c2eacb26d2da2337cc9e5a34525a348a8b8327ac778c84cb5cf6662d9512e185a7c82646ba60d245f6c0577cd5817b00091fb8b83fab023210241ff00e549182e161306722221fee22733b2781ea649a03ca0ce417d3147ebe9ac02000258ace508b3f77e987084b5fbbcb8a7a1491236d4a7a36825b1685f724801516c00002b0459340ad226e4f25be1419d176b60d09452df437e5b2accd69af06cd08ffb0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6030970500000000004a8e25598af4107e1684fc117273cec73485bca1014140882b0861f64d0696b264155b70a1d0e3473c512996c8d13632a20344031d0282c5f1faf2dbb5215c598e8a0694a39327983f5941a301d5a43f84fca83aac24af23210355f01fe7f9fa64108bcc9ae27b8784ce53a1788eca8e2ce19b1b927dd5908d5bac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 14 trans
	{ ID:"49807c06b713d2ec995d26f158e6504a73dc95c9df3dc73b92a1fb5442922090", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"580e7dfd2829c47efc0921c47d32d26b086b1912eda3bb1896fd5ffd70a30b45", Type: "ClaimTransaction", Size: 271, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6081d10aeefca4a5627e034d1a28b253ec37459e73fca10e03be3152171b30a2", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"82319f79a1ef1fd53a2ea7142715c2b904c1328acff7748630a830be8ae22ddb", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f7bf9d3777715c7ab2e103c0ad55e26cd3c03855cea9f366cb0ce5fbcff3bc7f", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"615b963448bbefa40797fa741182e7f8628d7194cdef90e97481f064255a2780", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"251c998af97c95f5947fe17d559eea1899b4f5ec348c16069f2d8d1afa2a3b5e", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9b67a935c5dc0f7150a3a59e328181584933ce5ca4cdc472829b020ca8298ab3", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8b0f22f674148101f24f10c1a295e8afc0ef9ff7b92b973f055f398afe514c9f", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ff0bd7c87b616fbfd1af70d9206364d7daa7387a4066b75c0eab3c3af49ef23e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"edcc93b762a610ad565912c5fd07daa6aeb089908fd7647765d2deebbde14ac0", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a141009e66dc4c82d8dd2f09cdf923dbc3075aaa15881ec50979c907a2f8d8e3", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"fe300d04d40168d7e40fd522bd9918f42f20430b69e584c88c42eee514031821", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f062cd873362d23ae393a2c7f98221f2c411247424fd9cb07562290e43ffee85", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "bf88bd227f14585f535385cea2d6b7b123a47629397fca9f7671864c153612f2", b.PrevHash.ReverseString())
   assert.Equal(t, "9b2c90242197df1ad507fd991d86490ea435d466a1501f5fe4550207ea7464ef", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1506571157, int(b.Timestamp))
   assert.Equal(t, 1414941, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4065b9152c0b307d7f420c944df77ee213580c8f670e0936e3194ec8db5d2333c21f98347abf0d205d38e63b4f01be4503c84d75a025fc7920e4535b0e7ad0b39d4015df971fecc933a5d94a572385690b1627407daed7e68cc0ed922032d51e081c7273cd2a848708b439bf4adf554d5fcca49088fb86691a22b7aa0d20de98ac5840e2a82ba9cbb4b4808b41b2e2e1857d434eb143fa8a1da6e27b9d5c0a23f81836f75d4bb65f3781e007f4a41f041a72e1c1cdc043840b95aaea52e6b6940ea22740d7ea81e582baf187e973ca6fd138fd9af5a5672347cd50453ea38963b149b6621049931f76e234f1250a2e25e391877e0b9a31a9bdabd293980b1995a9a2e4e740efdc27d2618d70757c1ef4916888bf1c6fe3e7d776440f1f2fd4404af3be3b48c270400751ca74325d466af9d6e66e6987c9d96c12d3ba56f50bc6ee1b60a912", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00151cc12803884d490c876ec04dd3773784a7716b20ba249511f5c999d6e2b6",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 3540, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode935(t *testing.T) {
	// block taken from mainnet: 001532d61fff31ba7d4d61a6ae3dcd09ee1c32b0959a581b0d76188093225506
   
   rawBlock := "000000008b09de2cf33843ab13756d08623b2c4a1d365feeef4390204a7931c87dc548e9b7d423e81e7592ba38b594a2c8c10448da6dce20c0eeaf16fdb8c8554f13ba38c7509158441907007d6296ac729f25c959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140677a12a26f8b963ebc4d4ee6bf85b0649c00e9bc350be8dabb58c251f8261db4d9c83ac89e156308ba46e364eb3e7fdabedc1185ecdace99616a09cfbd153cb840f5383503140ffe0c2faef992ae60e7343c96d74f4287ff3e68de4e50a904c3e1a6c599991f437571c077822c8198c24a7a0f668cd5514ada96972013c5c16ce1407d32705900995741269d86fbc6864b86cbb02fbde977769820622e7668f831049db10b65884b4d66ac7e8c0a72cfb9705e3661aee9e5a9cf554a581a18180db040b06734fa9774c65bcd870fb6f25dcb39a7762a9db09d18162a2f65c70611ac738af869b68bbc176d182beb1d873a47f93719a1cadd67776272862b9b80dd248a402c048c3c0d9d43cdf8d8deadfdeca96193f6ac46d1e604c6d5c6953a490f538635a7052661334c5e1afe8f79427a76c737c8f5421e37591e5b53037037dadb47f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100007d6296ac00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"38ba134f55c8b8fd16afeec020ce6dda4804c1c8a294b538ba92751ee823d4b7", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "e948c57dc831794a209043efee5f361d4a2c3b62086d7513ab4338f32cde098b", b.PrevHash.ReverseString())
   assert.Equal(t, "38ba134f55c8b8fd16afeec020ce6dda4804c1c8a294b538ba92751ee823d4b7", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1485918407, int(b.Timestamp))
   assert.Equal(t, 465220, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40677a12a26f8b963ebc4d4ee6bf85b0649c00e9bc350be8dabb58c251f8261db4d9c83ac89e156308ba46e364eb3e7fdabedc1185ecdace99616a09cfbd153cb840f5383503140ffe0c2faef992ae60e7343c96d74f4287ff3e68de4e50a904c3e1a6c599991f437571c077822c8198c24a7a0f668cd5514ada96972013c5c16ce1407d32705900995741269d86fbc6864b86cbb02fbde977769820622e7668f831049db10b65884b4d66ac7e8c0a72cfb9705e3661aee9e5a9cf554a581a18180db040b06734fa9774c65bcd870fb6f25dcb39a7762a9db09d18162a2f65c70611ac738af869b68bbc176d182beb1d873a47f93719a1cadd67776272862b9b80dd248a402c048c3c0d9d43cdf8d8deadfdeca96193f6ac46d1e604c6d5c6953a490f538635a7052661334c5e1afe8f79427a76c737c8f5421e37591e5b53037037dadb47", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001532d61fff31ba7d4d61a6ae3dcd09ee1c32b0959a581b0d76188093225506",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode936(t *testing.T) {
	// block taken from mainnet: 00153abd43218532bd489686a99a791d20c22c2b47ece614be90c704c859e56c
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 21 trans
	{ ID:"cb177346679bc1815d01da7277e332165e27c8d302d0bf5679cc9532d20a57ab", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"6524395523f5cb1eb60d8a14f693d2812278d5c172caecf626e838ca5040c643", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"8c3ee9b792f48f3b5cc717adf90d4b24676b04f8b176a6f5cdbc221497723391", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"e9c9321963bb74c7d1fc7a3c7341d497aae88d27818f07d2e0ed6ee4aeba0cd5", Type: "InvocationTransaction", Size: 237, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"64e30f215f5815559e82f297c36af9cf9d26130a5d847f23f8c23da3657168f6", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"40b31365078d0e6348755e9d0fe485dfac8c57603726a749c8f307d4c912a04d", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b3367b67a725bf19239977d9ec05617b531e7db052351e2b329aefc1a6810fde", Type: "InvocationTransaction", Size: 238, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"5737211f75fe5772100b6ad1ccfb9a0de4b94e3d203a71a5503156762753774f", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"094b5735e591018d5c38a5ba9c5a442c2d55979bd23008733b1c397076269fd8", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"bc3015a4f7c889179d8a9551b058e44a0f10cf29a84ffd533e5270d70ca08098", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"926998d1bc23e5790c8c90e418407e2bd9bb4ed8ada152dc6dc4740d4ae92a4b", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"7f1ffb13e7ca5f793822b1a9ea802a8e68359fc7ccd0fc16ae7890d909f5c5ea", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"43b250dd219cc2139b73861626407cf091ea387b0ffedfb599bdcd52847045de", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7ac75561b9ea2bf203d6dbf413274a516a60e2c60cc5f02201c9cb80ed6dfaf6", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"4e4132fcb11ee954ee0395d095f85116046383e389cfb7e85b3fdccf10e11c32", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"c9fcb28464a36a42dc0e56c525e999091c094dafacc213dac58652b89b3b9870", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"b1243f45c2d18d1ba527bcc7799ef24f44697199773b2ed8e1682c0d84f1ad6a", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"d3d7f58836cda13969fff797d0af34247db8062549ea2511f1c2cf092e1806dd", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"31b25fe88ee3bd53cf75318e9cdfe10a7fe8d387c45a271597ce3f482d9a3d67", Type: "InvocationTransaction", Size: 238, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"6f67de6728d42b27c8d5b618941b4d942f2c23158a0dcf5ecba6acfe69716665", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"a9d818426eb7a0aebe6ebbd6ac4dcb89b3beb79794855541f958ec4807a74b1d", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "0133b230bd524729df8cf1f256979574705b668367a964030cc8258859f2ba62", b.PrevHash.ReverseString())
   assert.Equal(t, "5e84aafa11ad914aec1777c31d79fbc9b492eb01b50bb61bfbdfd73e3890eefd", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1531885030, int(b.Timestamp))
   assert.Equal(t, 2517394, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "4027588ae791407e5b9549ad88e2c4cc5c9e284b55dd4ff48bd36a8c0943d68577826c83452273ff76b7b502297fb61c9889312669db3b5c90a48bd0b1d0f2b2ba403e851ef29d0f891e0a77480639be8653c86a9369f28a865fe6ef74fa1046bf5e5af71316d2f61a90bf2e62fa04ceac5242a88209aa3ff483918c0965a523c9e140dd42ace2e5a76be4c11c23236bdd0477daad983dc0e47135f5e409febaf96260dc3d67cafe1ebc7db499a9a847817df625fb27a79a0db665cc52bef5b06374554030996fcd80c0cf616758dfb6ee768ed1d5d2245e0873e257b4f4ada1dc203e92f3d5de4c9e5788ac8009dab4ce614faa04317156b555fab0c3d9dd63d7846bd340983f13011704970aec55eecdb4f19e91eb5ee86d8e5a93727d1922c4f916217286d7ab70f162801204110f80d7b4b52dff66f5fddb28001abb9ad4aaed9faa7f", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00153abd43218532bd489686a99a791d20c22c2b47ece614be90c704c859e56c",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 5255, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode937(t *testing.T) {
	// block taken from mainnet: 00153e7671a43208dfd4ede426405c5d58c2f4fec3ad65778cd2c9996ecc25c4
   
   rawBlock := "0000000063963f6e9657db8432478e8cec7650783708d92b8366c3b760db9b2310dd9e8a23f808eac3f01e84f05c55f9f4a380645c936656cd25b328c344c39e60740d1ce8e16a58c4240500f9de33bc49dfa78959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014042a51cd719cdf933847b99e1c902d8742e07f777ffa153419490715630fa7d5abd82f34051dfa4cb51a6fa9e675d89334ef547a8872188688434aaa30a97c136402c3dfc011f7b0e0365e7ba1958371c1da813dcb8458b78a29e302f400047fee31344220eae0e7b004d707b57c0f6771b0ac68dda84279325427259e2951cdf364035e585467ae8984c9e3e8adf3aa3e358f4cd4a3ff12dbb47d8be3d1f2adef9dd8de9e2f7d1e2adb4b79d0aafca46485a6b02404dc8a4e12f34b5b1873e2846dc408ca9304fa8922b01af8ed67de15a776b551c59bf9c945d084a24d6350c2ac40f82c21d7216e7a5695d19c74a05874a5c6b8870398924975962361da4d71b7c5640b6ba9a81ecd1bd94747c277a1fde8a66215ed50f81d150ed51e358677597f5525636d38a5ed6adca8fa30a31e5544e647f7e28e2ed25431b2e27946db0f90f15f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000f9de33bc00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"1c0d74609ec344c328b325cd5666935c6480a3f4f9555cf0841ef0c3ea08f823", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "8a9edd10239bdb60b7c366832bd90837785076ec8c8e473284db57966e3f9663", b.PrevHash.ReverseString())
   assert.Equal(t, "1c0d74609ec344c328b325cd5666935c6480a3f4f9555cf0841ef0c3ea08f823", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1483399656, int(b.Timestamp))
   assert.Equal(t, 337092, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4042a51cd719cdf933847b99e1c902d8742e07f777ffa153419490715630fa7d5abd82f34051dfa4cb51a6fa9e675d89334ef547a8872188688434aaa30a97c136402c3dfc011f7b0e0365e7ba1958371c1da813dcb8458b78a29e302f400047fee31344220eae0e7b004d707b57c0f6771b0ac68dda84279325427259e2951cdf364035e585467ae8984c9e3e8adf3aa3e358f4cd4a3ff12dbb47d8be3d1f2adef9dd8de9e2f7d1e2adb4b79d0aafca46485a6b02404dc8a4e12f34b5b1873e2846dc408ca9304fa8922b01af8ed67de15a776b551c59bf9c945d084a24d6350c2ac40f82c21d7216e7a5695d19c74a05874a5c6b8870398924975962361da4d71b7c5640b6ba9a81ecd1bd94747c277a1fde8a66215ed50f81d150ed51e358677597f5525636d38a5ed6adca8fa30a31e5544e647f7e28e2ed25431b2e27946db0f90f15", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00153e7671a43208dfd4ede426405c5d58c2f4fec3ad65778cd2c9996ecc25c4",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode938(t *testing.T) {
	// block taken from mainnet: 001540d743a2cfe9aee694766602814fdc1b0e38e42e57e6d9dd56ecbf3aacd6
   
   rawBlock := "00000000258777487b547a88b4b44689b64cf7b69ca2f17b24720545cf9848a4e9323740d6ae0a835c7f9b8d1b84d83a83220863f68f3f602e0bee943d180ad2a069c7819bb7455aafc21a0031df31a18729e56959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b7c9962ff81441c7a29e6d43ccaeb6ce5cd31cd2ed28cb2f5b952397507451c39ec13bdc28fc1f2b5efc2854958da79167c6509289d416abe24917d6d5902e03401e3799d3fcd90f00a3b24741e8dc5b1cd109c6cecf6ad904b89e94d25c45cfdd56a6b05286a041a75b603032096feb6ef2792ce0a5c905b66eb290e12dd48f8140d428642a8d0f1f9ec63bfcf3f0f60e350bb6eb34e77adc10373a50c1e0c9f07cbb376ed0865c11bb00414b9cde3957a141bb8c2050518bf7249a033806948e0040f89c212e6b3d387d2a670b6f73b8200ffd4e6ab5ec876b26377021289038fe162a9348be03da4b8597d3202bd6b51f65dd07d63151d554b28feca73c1bc0fb024089bd98af1ecb5040f285247e3287753e16919b3f76fe5fe93c04cf57a4a4497976aaecf1fe99604d8fb1ef0046f1729f707026cb532f5bf80bfa4443c68470f7f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae09000031df31a100000000800000011b9653a00cb02d1003bf42155845079a1128e40317983ad79ed9bbb5e0f752470100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50065cd1d000000000098f03bcb975e5b2f158452c89e5ea277dc72449b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500395c08080000007e0ebe33db8778d7808963ee6b46f88d6e1653910141407aaa3cf5ae1fb78a0db53748320294bdd13a786ddb369d561c50e33c495783fda0072afe8d79fd796c3da59dab63344d484f3c3779d74e123805c4a6bbb7ef2b23210210555a7091edfc73b14daf06b6b9c1368b9a4fe745b2860c76bc73c5a4aab1c3ac80000001ddc8f24686d50b8538d673b0826e48e4714732affd816bc1bc8133f70c18cf1f0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5001110240100000055158f70fa3caac49a53ae8b1124fba7660f808a014140417e8c25e3f0b29907b6caf0606b841f67394e5b9b7115beb1c274fd0764760652f5607fc8c222eb7bb7924ad60eaa7462101efad978e7cc605602c2df312da92321035f983b01289a1b23297055bb58e67db04d8dd9015227740ded87ea7a3583a13cacd101530700a041a13f010014cc80c07148e797e7b83ea5a0c42e331b1df92b3b14be84be4143f70d8bb5916d26570f7b06193e795653c1087472616e7366657267f56c89be8bfcdec617e2402b5c3fd5b6d71b820df100000000000000000220be84be4143f70d8bb5916d26570f7b06193e7956f1054ab38ad6000000014140f20d00c6a86f626a182664c9e29f7bac912d342cb46cfb1fbf2699ab195c3659258dfc661e55126aa8d08b2b646786e335097031b6a4237a95f42ec37c45dd85232102e90c39472dcf67446b0683faf7977d1f97344556b370f13c131201b0b37d734dac8000000187b0b6892763ea87edaf8efd681c066b335b398167eba0d47697a838a7930a240600069b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000000e02bf67be6f109deaff3ce1800ac36a5fe69c0f9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50027b92900000000a3155011be9c115c9a4b02640000218b6e9478579b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000a307bfdbdb4b06cbaa9b10cd5b3670879f1f7ffe9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ca9a3b0000000035102b22614ea6a9907bbc73770cb6eeda6f4fb19b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000044bbbcfd73b6042c2dad2d193eeebd21b7319d2b9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000235a717ed7ed18a43de47499c3d05b8d4a4bcf3a014140117c4c622466d3d1c274069db82ef76a919bb7d521fc9ae92b80bea03b880d408307bd4ab6305ad083a895c7ffe5e03a5c98041e6f6fff88475e2a56add6afb12321030ab39b99d8675cd9bd90aaec37cba964297cc817078d33e508ab11f1d245c068ac020001118bdfae5172bee9b6aade83362fcb2d680cc5fa1b7653ef32da132a49bc274e0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60500100000000000011b423cc412f955bb603bdd6b5280b910e71edce014140ba03f4f015bea63e9253106d5d6cc58c243115951975b830ebf32826d21d0580f5977d8ad749aab5e943e0a6759fe9cee8a34606d0c3660e626490b8b6445dc52321029dd3109ec7731f0fb1630023de11d40eb5bd27da2e37dae5a8fd8be81f394a5dac80000001f0b116ce616f4288a52f5026d520587bb1608d5524d706510147c73066a7d1000000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50042dc060300000033eb21d847607597bc0f98a705ec23197a7008eb014140d644278af5a2c73dd22d4ed38cee31c03146d78efbd323f28f995fdbf95ca8e837f7786ac381e0cd0b6e946e2aa9bf3ec43410e53e63dfe6c4e3f7f9c1508937232102d7fbec159bab4b0a9d0d94ffa96b7d4ca706d9f004b6f1ca9e050fee1fd606fdac80000001bc66f7cafa54f348fce25b4864c5e00bf6d8a66a4216ef030fbc43ff875015f20000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5000193ba06000000efcb9e20fb957b169932c36596d70a6b4ab7c1c10141400270122cb172ef24d7b3f44157d1e421aa37782958efe5d56b36ad290e1a77ab3be68566c8938c90d58681f09e0523549ab31442713a0c7b1b1659758835959e232103b6970a2028a5bb66e7c1ab31a9673fec8e94c41148482d701d578f48c3b691c0ac02000266c716aca8f9d5762e377399c135c3196fc47fca4fcd16b586557d53ab21157100004e5a4c0cca7ab4cb5bf559ec1f6d290949d74ce6fa227075a06e04463eff5d710000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60d812000000000000541f7aed298c6137e901b063e95456e02e8cf4e4014140aaf2deb11f2a0bd28ea978c1dee0f3feef063907956de5e97cb910a2a21ae6ab7c8e28edc37a85142799593e4d7ea68724b92472b44f5768ffa155e64ae95ab1232102047b6c260c5e4e99d59c757b6eefb244ef2d678608b26b35e0e810f337dc3691ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 9 trans
	{ ID:"24810b7023724a35ff8877dae96d413176b6f8b3dd3ac529aa5192e814069c54", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"5f503c4ce1ea6573f8c3aba9ef1c27b9b7cdaa4788f2d28b640c8ae082431867", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6835aecae66b4d7bbfc6d6a8eef1d2cdd5f4c6c5d54eab10031e49ef8033cabe", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e29371efbb3ae770a23eef16b37491302b7cf22698e58d2c2fdab450d0a70439", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"8fbdb7360b95ed83c5297ad32cb2e187b22077846f47af2e447b132771cc2ed4", Type: "ContractTransaction", Size: 502, Version: 0, InputsLen: 1, OutputsLen: 6, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1a964eb42313ba7a5c178600641c99c0a8312122e35eee4c589cb17bf56892a3", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"38ca9c96b0120b4474dd7d4103f3be205d84acfba0ed3ddcd8c46f96332f8521", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ee115c4a5f02dc17a935a7f20e5d602f16b0ca04f4de0bdcadb79f30ff4b8f6e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c6cf0134b7c86d4abe51848e95d9aa7700910e57cb85ce88f1dde374f65fecf4", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "403732e9a44898cf450572247bf1a29cb6f74cb68946b4b4887a547b48778725", b.PrevHash.ReverseString())
   assert.Equal(t, "81c769a0d20a183d94ee0b2e603f8ff6630822833ad8841b8d9b7f5c830aaed6", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1514518427, int(b.Timestamp))
   assert.Equal(t, 1753775, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40b7c9962ff81441c7a29e6d43ccaeb6ce5cd31cd2ed28cb2f5b952397507451c39ec13bdc28fc1f2b5efc2854958da79167c6509289d416abe24917d6d5902e03401e3799d3fcd90f00a3b24741e8dc5b1cd109c6cecf6ad904b89e94d25c45cfdd56a6b05286a041a75b603032096feb6ef2792ce0a5c905b66eb290e12dd48f8140d428642a8d0f1f9ec63bfcf3f0f60e350bb6eb34e77adc10373a50c1e0c9f07cbb376ed0865c11bb00414b9cde3957a141bb8c2050518bf7249a033806948e0040f89c212e6b3d387d2a670b6f73b8200ffd4e6ab5ec876b26377021289038fe162a9348be03da4b8597d3202bd6b51f65dd07d63151d554b28feca73c1bc0fb024089bd98af1ecb5040f285247e3287753e16919b3f76fe5fe93c04cf57a4a4497976aaecf1fe99604d8fb1ef0046f1729f707026cb532f5bf80bfa4443c68470f7", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001540d743a2cfe9aee694766602814fdc1b0e38e42e57e6d9dd56ecbf3aacd6",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2724, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode939(t *testing.T) {
	// block taken from mainnet: 00154156670dfe1db7fa469abbce1a1a491228f95cc975e423beaa58b94a3beb
   
   rawBlock := "00000000593c82efe22f14e5e85c9cebf2f07ca13166fdee91172c71cbf3123d9e66a51f11b30ae4ce34f65267ed60acea8f0dd649d9115590bb52f681cb4215b452dd0f4c38c75ae43b2000b4b97e3026c30ffa59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014017010949cb4044453e8db26f01692938b81d7667c717927e96b3343151f340151453c0d42f560eeb5c99ee2a8127ff94a029832b546be4cd21101c37e5b55fb04092488510ba554d0bfb9e05676bf523b9f09de7c71e0398875a14ab7241204fd1cc86495316857a4e176f4c2fa3ecd9d3d1f2684e8451a66472a73a236668daa340074e6c63f0cd8da2a75dead5b1e1d36db950621f46369e910a0600840e037f28c1c4fdc427881b3cf0b1947b48181d7dad98637deda9c70714d38436041f5732400105b5e4ac971e03820245b0890e3db1f5173c66052bb6fd3e99ea069f5c6620c3464ac358d6cc4fc0ad2f718f49bf4e05105ccd75fd781c1a37dc18799f801d40bac7aadb202ae7f134b1d5f21ff56d4e6b084ffade42a9133d480013029f295adec48ba3a189533c1447cf2cdd965439874f52439ed54566bd9f3ef5223210d8f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae090000b4b97e3000000000d101530800f2052a010000001409405660c46cc4df626385de1c4e39b1a2248461146b6c3dca85a2b9fe2de9b9b59e8232d177d1ce9c53c1087472616e7366657267c5cc1cb5392019e2cc4e6d6b5ea54c8d4b6d11ac00000000000000000001ad6a4ef7e5124df08d3d1cd0046f6b0c67fb724095e30289e1bf862e897f7c2b000002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000006b6c3dca85a2b9fe2de9b9b59e8232d177d1ce9ce72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6005000000000000006b6c3dca85a2b9fe2de9b9b59e8232d177d1ce9c014140ca4630f8caef0999e869e4c25abf54515d556819fc33f4d28ee5e2d4db5a8a93a495031720242c735eaa2302bf93c687d865e6300a89346a3d2c1270ce7ca1f3232102ae039957f6cc7226730968c809c1ae04a26a8585243df3e40023883718064f81acd1019600083e1e754bcd000000207ab5698b56cc7f03378acd50fe6dd3fa558edf872d3a7400e876757892d9878f349b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc58558ca14c02f47b85f4a2404f4a53ff7a693d445149505a0a1938018f78adee94c4a22bfe3638a0a8755c10966696c6c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e000000000000000001209505a0a1938018f78adee94c4a22bfe3638a0a8701546dc696587fc35914575f43da6d57abf9052e455d2df178c8352218f51e85eb000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140cae0d149371a6f5d3083e6018464019d17a457c176211f737f13a94a94bcd2f18d09a52fbe338caee4be50ae10f9de383416a1119ba3ac4fcfb43fbb03b6cef0232103bdc200a6ad0e52163fdfa471b94d089cfe73f2eab669d67e495c80827d5ad919ac414077495880d5ad11e0ebe455cf96f582d9376309e0ea5f2760ffcb3767f777502140b26d47af749cde1837b1223fc85dbf2e5994e88b63f08ac74a2e85cf07700a232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac8000000187d56cc4863a683939955a6748f01709b880e4d012f32e9cee9389f9f2f9b9390000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000009d5c65d326a626c1f5092dbda7da89232b4713d10141404b21cad875c32dd4abf7b90ca88cba375a669f0107eaf57e127e3145aee9ceb91f24f93e7428e86e0c8aa13f522e11025fe8d82dc00c54655b994e6b803c01c3232102d36773e2e002461f051f4abf7658c9440e319458aeb37d4d373a2067d45e7cb7acd1019600084091da170000000020f0d5e898b354cc465372b50bff3864e007a8fcf7ad30e666c4f7fbd9b3d8db16348558ca14c02f47b85f4a2404f4a53ff7a693d4459b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc514080e96ec4e4ea1f0aeb58f67d4b03dc491c08aa255c10966696c6c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e00000000000000000120080e96ec4e4ea1f0aeb58f67d4b03dc491c08aa201d413d595b34b42ee3777d16d1bd5ff32744410b6018e79f9d56f00954ed12f42000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140559d082371e8faf7996843e0a5d0590a248255bfbd5495f207212fde0501359ac03d2781465fe4b565796cdaca66ebb5e3bc295846adccc26de3f615fdc7ccad232102610b1313445d9f99c28e9cba7edf644b90ab4c70533328aade82826a343fe220ac414053988b4c40e8c0f96a609f7a43980415402cb315aa35ee29804c29e3ac95f82e2de57bda3166e9cbc38ccff51c92f9e9475dc8e5ea98ca389f5f8b7fd78ec20b232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd101960008c076d417000000002075e135a0c71f01b71b3efd43b4701cdd503befa7fe576752fb6c2c78f40b3280348558ca14c02f47b85f4a2404f4a53ff7a693d4459b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc514080e96ec4e4ea1f0aeb58f67d4b03dc491c08aa255c10966696c6c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e00000000000000000120080e96ec4e4ea1f0aeb58f67d4b03dc491c08aa201e524b8632d42f13210d25b3a740c244798cbe7828ed72563e486812b5123d84b000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140c21ab17fc7ceaa13315be4740b002a954f93e1abf237bf511839082ba027605ea881d98ce89608b1b6d51c4b476e1619bc21289bab861b06a6bc05da1a212dde232102610b1313445d9f99c28e9cba7edf644b90ab4c70533328aade82826a343fe220ac41409ffc0afd8b7be1a53b7b521b5e2c693e094b5b606d9b2f4fed60f5d1931f437656ee0a1b23e2434ee322aa72a5ee2cae20f4eb8f54a07b37272092d854433456232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac8000000103dbf056be409062282f7581d56565ceff1c939e588757fa43075814a65a54210000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e9a43500000000591dfefc8ab0722e66dee530c746165fd5c81cd701414068a4c1f89f9e95c1101ef14d0765b20e6b8b3216cda56677dbd3c20ccde3ac4d51cd0f854d6092a04c5a0fabf65f048aed0cb81ea341125fee78b107afeef86c23210263f2e43e51013561b87e12bcb78ef2982d8739e0b1035987e213a09b2e3dd714acd101960008c2497084be000000206382cc221ad8e0b312f99189e1ce0d9c2d2d02ea1e2d3c9384741884c5ed2c68349b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc58558ca14c02f47b85f4a2404f4a53ff7a693d445149505a0a1938018f78adee94c4a22bfe3638a0a8755c10966696c6c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e000000000000000001209505a0a1938018f78adee94c4a22bfe3638a0a8701e753d2cad46d0b5dfa289dbe84528ea8e72e89ad80025b2e4e505ac2895a4a4f000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e702414019b444402d3752e03cc010c38fc2e2b28020d68dc7e74c466637f0c53fcff73e0db898e6cdc96bd233a76ad5cb3e5846cf6697f2b5f700d620ea0c14381b65a7232103bdc200a6ad0e52163fdfa471b94d089cfe73f2eab669d67e495c80827d5ad919ac414091c8557ac86daaf292de766639166d2b18c4e93dcb78a090e0fb2f4bae23d8f2271ce94b92da32b73fc5ed8dc7fd04150954aec47dbd76e3200fd0eab411f482232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1017920c263eef4c678d23348d046aee81fb1961a2ddbcf88637e4a1673373c9ffa22ba348558ca14c02f47b85f4a2404f4a53ff7a693d4459b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc552c10b63616e63656c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e00000000000000000001995fada28062db5769156a05ba46d0b5afa317afffb2bbd58acc90490e33281f010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000003507be5be66ed35d8dbc02b6111d446a47be35dae72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60bec62d00000000003507be5be66ed35d8dbc02b6111d446a47be35da014140bace0b075ad3f5cd514f273ac6b2e9e713d889fc9dbdc7ae74636d8be46459a47f4349d30ddbd0ed49713ad582989b60ef9cf35e32c5b3d1b2975cc823ce0a58232102c724e99a353671dc16aa8f7cf88b32c13975414bc811f3f93aeae8180baaaaa7ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 9 trans
	{ ID:"e9d3898689947509e002e34471048544a78f4495fb0305313d282ead7e7d9f0e", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"023169b8af64dcd24425ec74e0176f47a53ee948b10b279f96f045e40b4ba39b", Type: "InvocationTransaction", Size: 354, Version: 1, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7e7e934d10ef34440cbd381d1f7c82b1013612da011a15e9a9d97a0c2cf9db3f", Type: "InvocationTransaction", Size: 484, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"b528ba50575c27935e0a4505f5c6b58433a0d4835a956f79c02f4056c95d94f5", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1753bfa28e38ef8dd9d881189384920bce41d68531a44371fe410f82c9045375", Type: "InvocationTransaction", Size: 484, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"e92f83b8e8aa7829b137cf58da907d1b0be8b5cb5bd8eca5897975dd68af2188", Type: "InvocationTransaction", Size: 484, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"d0a0b65167c4ded581d233c3bfb1c2d80eb0ec9f5f4c38ff3cf17611d7cd7698", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"fc858526024194fbb5d6a9d6f7e3841d9ab9b0c0374ddd1a75580b0f5f888bdb", Type: "InvocationTransaction", Size: 484, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"a1e451334076e5b52844cf6f26dde2551af7a10af3bf99ad561388fa92047b43", Type: "InvocationTransaction", Size: 392, Version: 1, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "1fa5669e3d12f3cb712c1791eefd6631a17cf0f2eb9c5ce8e5142fe2ef823c59", b.PrevHash.ReverseString())
   assert.Equal(t, "0fdd52b41542cb81f652bb905511d949d60d8feaac60ed6752f634cee40ab311", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1523005516, int(b.Timestamp))
   assert.Equal(t, 2112484, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4017010949cb4044453e8db26f01692938b81d7667c717927e96b3343151f340151453c0d42f560eeb5c99ee2a8127ff94a029832b546be4cd21101c37e5b55fb04092488510ba554d0bfb9e05676bf523b9f09de7c71e0398875a14ab7241204fd1cc86495316857a4e176f4c2fa3ecd9d3d1f2684e8451a66472a73a236668daa340074e6c63f0cd8da2a75dead5b1e1d36db950621f46369e910a0600840e037f28c1c4fdc427881b3cf0b1947b48181d7dad98637deda9c70714d38436041f5732400105b5e4ac971e03820245b0890e3db1f5173c66052bb6fd3e99ea069f5c6620c3464ac358d6cc4fc0ad2f718f49bf4e05105ccd75fd781c1a37dc18799f801d40bac7aadb202ae7f134b1d5f21ff56d4e6b084ffade42a9133d480013029f295adec48ba3a189533c1447cf2cdd965439874f52439ed54566bd9f3ef5223210d8", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00154156670dfe1db7fa469abbce1a1a491228f95cc975e423beaa58b94a3beb",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 3772, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode940(t *testing.T) {
	// block taken from mainnet: 001545878aec78caaebc4fa2882f1b8900de4bb9cda7b72cf94abcb2f401e849
   
   rawBlock := "00000000ab1037be9fbfd3224f9c642115f26336e5ce0a8446fb2b0a41164528f6508a56e5c40e6bd24d8ed4720ec7fa2cb6f1210f08481ca8ca51156ff08f220b6ae70e442f865bcdbc28006f516b90a1c2593d83f5011bdaaccee8c4d2555c829fa51e31551ef201fd450140039c10ea4b95d8d23324e151322823798cdd8301b01b0c0ceace9e78021c2e7af79e02094907071e64ec95fc92f177dfdb625852820cfa1bb3e24b6b5209c91d40b1711dd3ee62f44101c6ea49878166337726107d47f34f7fa421e02c2fd79aae8ee0aedb6a96c9bb4f938e4cc07409f93715682d266195ba5b0c251c87c9cfa240f50a2cf83d1589c27b5ad5ce5a4d0ba1632aec21447fc6745ba07ecb28a2abd70b84bd59012ecce8ffc2337761bc94e6a73ef46b84761b382f78072faf6f5a9c400676cbbbe1935bdf40e0af8fc843c34dece11f34c08e8d6f61123f68cf5e132ae7d3c40bb89ee9db3a3e5ade05e61567c05df6e2d32037711300a1ef6b2e2f0a40edb7a203936a125e8fadc81475bbd44388a730aece4ba8dd963eacaac034089404d3a6d622914e19bcd8b3dcbc5c9090d4cd45e763c761d39a3ed9ca57906572f15521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0400006f516b90000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c606400000000000000faaa0f339e0fb33f91697cbf5aac41d17921222a00d1017f51082e12cd12000000001432e125258b7db0a0dffde5bd03b2b859253538ab0870c4d0c437000000202a2797e7a6fe6c903e51b27cc043d10a0622417b2991a93a1e243f489e1ce2db14f1cf1e28e4356319071f9af1d4df326398c944d256c10966696c6c4f666665726726ae7c6c9861ec418468c1f0fdc4a7f2963eb89100000000000000000120f1cf1e28e4356319071f9af1d4df326398c944d202b02bd2b33c2099fd39e5ce45e2234b07b50b9f7956f9a0f33315aefa9ab8cf5900003d18876a4ba7a6abb7e750dd3cb8a2ccccb638b7d617050fa2ed0adfceda723c200001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e703414039ce63bc31feae38c1a42eab5e75a882cd9f89af30551e0a491510b1dcdcad6582f95075ef8321690b5c5c23b6a39942a1ebe9a655635569d211998d4906abd523210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac414031e0f74b644cb3dca688bde43f74076265f0dec1eedeaefbed8be55c24f97677148b7135695ba8dc98167f4534b9337e088d5aedf9f836d93bafe652ed8eaf3f232103a258f84e116f30ec88dbd3d77c1166b696cd8a159e058d40b6890489c67c0960ac4140bef31621f772fd132356af2f9647b5570a50616df6d1cdc22b4244fb6b6ffe77e7114f6e46e5ee61472a6d4a74d31177e3f9b3e8f08a822b3301e13cccca6bb1232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac800001ff076e656f2d6f6e6502efe878a1ab844ebb2ac29174f15dcf7dda0eacbb061b588c1245762fbb9e643400002da66ccca93721fa7a1c30c6160972b8d4d8918333fa0336f44f4dddacde89040000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000008e18d4504c02aafe68084a7e140fcd0fd440d1b701414080a38dec0f4331e8a4f3c49e18eb69cd3353f98e6c4274b7f9011b786ac2c449ae26c794573651853724be8eeca1c814757bddd83ee280760467d3ebd943e26823210388c4b2834cf29d2dd8e97f5f417db947c6b5d826f7620656c85bfe1c1d63b107ac80000001010a1ff901144f206e625351c4410887bd3a011f81d15855b5c4b6482dc9e1700100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5001110240100000048f46cc18e9441759b4c255b7f7354bb6a01077c9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50044ad0c520000007d8533548ce2501216accca8e520e454d3d28f6c014140d332318d2958f7eeb85c1163bb984f561012d9b23b8ccb9e2baaa212045ab0a87eac8717945ed90cc053e6eb625292ee04ee55c13f444a7cf9a30ea2a28ebdd7232102ea06c2d4322144fcc1679cf2734350e8a95b25fcbf9ae06143a41cecdb9e18e3ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 4 trans
	{ ID:"a306dee3b5f15d1874246e39a2677362a7526bd979eca9f5c0f376b2aecb3a23", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:0}, 
{ ID:"e2209c1796e52c1abee6d5252b0d91070017ff68fe56c7938a455a217f390ef0", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"7f37222615a310ba41f79fabf42f324a7b067b9648423263942e48b2dd608b4f", Type: "ContractTransaction", Size: 245, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"563d45b484a6e40f98a85e8b692814ffabfa70fbdc8c768da8a76ab9f2fe3006", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "568a50f6284516410a2bfb46840acee53663f21521649c4f22d3bf9fbe3710ab", b.PrevHash.ReverseString())
   assert.Equal(t, "0ee76a0b228ff06f1551caa81c48080f21f1b62cfac70e72d48e4dd26b0ec4e5", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1535520580, int(b.Timestamp))
   assert.Equal(t, 2669773, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "40039c10ea4b95d8d23324e151322823798cdd8301b01b0c0ceace9e78021c2e7af79e02094907071e64ec95fc92f177dfdb625852820cfa1bb3e24b6b5209c91d40b1711dd3ee62f44101c6ea49878166337726107d47f34f7fa421e02c2fd79aae8ee0aedb6a96c9bb4f938e4cc07409f93715682d266195ba5b0c251c87c9cfa240f50a2cf83d1589c27b5ad5ce5a4d0ba1632aec21447fc6745ba07ecb28a2abd70b84bd59012ecce8ffc2337761bc94e6a73ef46b84761b382f78072faf6f5a9c400676cbbbe1935bdf40e0af8fc843c34dece11f34c08e8d6f61123f68cf5e132ae7d3c40bb89ee9db3a3e5ade05e61567c05df6e2d32037711300a1ef6b2e2f0a40edb7a203936a125e8fadc81475bbd44388a730aece4ba8dd963eacaac034089404d3a6d622914e19bcd8b3dcbc5c9090d4cd45e763c761d39a3ed9ca57906572", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001545878aec78caaebc4fa2882f1b8900de4bb9cda7b72cf94abcb2f401e849",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1850, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode941(t *testing.T) {
	// block taken from mainnet: 00154abbe21e93c79e8b8f2de9be13e60d717efe930b77964cca6a6a93800cc2
   
   rawBlock := "00000000b97f42f4889b433ef013e8f624f987bacd79b2331fbddbe73ccc7197b82536c5d81f204551b02bf31f1594377e531f39d2d1dc50f522fff2355ff137693aa9628aec7b5aae061d00b209469135ef9be759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140a03a551e091652c9caa6f4c672189103da1704a3072710131568fe5e8dde677179b91c58fc12ef6924b0bcf2dad5dceeac13ea0b64077e18f83d6996f5278b4740581c990adf9d1ee4f5634870c498a33895b2804dbc3c1bab0e91724c3459e9bd7d30a6095729dffa37d43fc228587a1282c1aafe4408334a943463710c2c67b340fd9341e9eaa7244d1398b85fc49f1c217fe89ab5c545baef6e5ef47f2fab1553431f322b5b3714a8379527cc546a1046ffe789a4e4087d1f0250e9940821ac3b4008211e2b4cb7e898ffd0ff9e801ec5938191201592d65b2cdfd99ce49a4d4ff3e063a8d2fdc21d196390386edf9f06493580e8d51e1bd33549581136fb28c9f5400a99c50fe0a1ff8e022e7562585dbcb0904011de4587c72b3240e0349f95827f67ee93d6f4a6226b2ead5b337bade00585c339568ba2f9ad03f5356e5b8e3647f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae060000b209469100000000020003f95c9e4b44d7f6a5d62793cbdcb4de5dbb1d7d8a1c8da632a4a3e7702f9f6cb60200089b5b2c2597cf4b4ff86f3e77029901f3765c7768ca3f1c72e4cbd7c9bbf94900008b7df9ffee9b7be568d57d0e89b92ffd4d032f4ca7628854ddafa4119aca2f470000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60b2d588030000000023dfa8ee78d1b4a51a23a3a0d8a89a4b393fde11014140b2dc8d093555fd70ca8b94cf40d054e877c9f96eb95aa5dd0d38158faafafc8104cb64926fa0b88d83f442bcba95215b2a536c6eea9ee90d23c55022e0ae7f9e2321035fb9d30391f49c552db6cac94a91dda79210ef967cf59c8ccb3f467ab7e41859acd101530700b080f645010014c26fdc15abf6dec9146e8f50f9b3f28750775d3a14eb73df7ec63fb733a487a17ba49800d10d86344d53c1087472616e73666572678558ca14c02f47b85f4a2404f4a53ff7a693d445f100000000000000000220eb73df7ec63fb733a487a17ba49800d10d86344df105ff2bafdd0000000141400bc3141ec8ae27b187ab30d974f5700a87efb2f584201bf0201a19520064c16f1a31d564c3b57c2259b6ec18a7f2b64830722650b5a299c8d75cad993c6e053623210235c4f28efee00c89719e09d3617f1027539ff201a5b9cc6f562833cfd4389069ac020001da55a862654c11139ad2e681349cd4cd9ac5b67302c000d2e2a3fbab9da9c78e0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60b42508000000000002473b02b3435888b3626a11ca12ee426d939ea7014140373b1e38575ed91f731314245a4120d9e4a5111b0c0a1c14bc6dca1401b815cc5c93d4bf11eb553edf62390acde8170d6b5df9f95a8f7dbf36ab23a8a03f3a122321033c4f89a0c9afd98078dfdc220d2a3a694b374fbd15507201224d45a04eafcafaac020001ad5090a4bb64e6da30396ce111f8fb0b8b2ddc89cd328fafe6a755a66840e7e80000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60d599990000000000e4c72791cb0428321f330a6e2b4c7020ef5bfc6b0141401a74a45711803a930d8df975211c46f2bbf3a68e0c7c105b34e7c0f93fa37599ae5f1aab9ac4a192cf69baaa1c37dd24e5678917b8a4bd4ed15a125dc9cbfec92321035d2d7d769ded618912d2ae0f3e156adde6f7c0e03ab76bafd153fe96492f8697ac800000011e070132923111a9578ab4bf04ea2bc4c4a82a3dcb394310b187e75cfd04905a0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5004a4d220f000000159eb2deb5c91bbaa6b6ee06eb67fdb072582baf0141408ae8c96c1ca7b17e9a0e4f6474653d40bd6674d3f61cd737fe26f92b26701bc335360386186d8a0ebed6da8092f44f44d84c548dda3514cc263b653b9912e131232103a673f039c6d379dade0f9c5d8f272671c54316b322ebdedda00f43c5bc653edbac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"bb134e38200d95bbefc4d9212736331a6a06b474dbbcbe2f81dc1d938da9078c", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"3e11050189c63677e5c5bb4933eb059106964d8eb0a5016024d70267e8247ca8", Type: "ClaimTransaction", Size: 271, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"25691130ad25c96ebf900b3ad5b5df4c6a1503946c7c1b6f4faa7dea8defd833", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"a65f1213eff69e3f946223cb7ad857e0683e89f6aeb1fc5e3de17d5d9b25df43", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e45dabaf790ed3841751b6321ba6436d9e3ecd4980d11e58d1f3eeedd0390976", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"286ae44da34d57808016999aec22850670b94c1c521fdd0ee4db3815b20f468b", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "c53625b89771cc3ce7dbbd1f33b279cdba87f924f6e813f03e439b88f4427fb9", b.PrevHash.ReverseString())
   assert.Equal(t, "62a93a6937f15f35f2ff22f550dcd1d2391f537e3794151ff32bb05145201fd8", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1518070922, int(b.Timestamp))
   assert.Equal(t, 1902254, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40a03a551e091652c9caa6f4c672189103da1704a3072710131568fe5e8dde677179b91c58fc12ef6924b0bcf2dad5dceeac13ea0b64077e18f83d6996f5278b4740581c990adf9d1ee4f5634870c498a33895b2804dbc3c1bab0e91724c3459e9bd7d30a6095729dffa37d43fc228587a1282c1aafe4408334a943463710c2c67b340fd9341e9eaa7244d1398b85fc49f1c217fe89ab5c545baef6e5ef47f2fab1553431f322b5b3714a8379527cc546a1046ffe789a4e4087d1f0250e9940821ac3b4008211e2b4cb7e898ffd0ff9e801ec5938191201592d65b2cdfd99ce49a4d4ff3e063a8d2fdc21d196390386edf9f06493580e8d51e1bd33549581136fb28c9f5400a99c50fe0a1ff8e022e7562585dbcb0904011de4587c72b3240e0349f95827f67ee93d6f4a6226b2ead5b337bade00585c339568ba2f9ad03f5356e5b8e3647", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00154abbe21e93c79e8b8f2de9be13e60d717efe930b77964cca6a6a93800cc2",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1793, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode942(t *testing.T) {
	// block taken from mainnet: 00154c65278bc1bbf44d8e0b664762028a834ac43fbf974d355d4c15660e6530
   
   rawBlock := "00000000468c9f194a1a541091d2c7b760cb1d8929e866777cab508ac4f5d3b61dc43ec723ece5cd717ba3677ff0a19ae1045c0c2ee4cc2746fcabd69a64b4796c4cfce7dd63c958b7f709006457eeca56cea6af59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140c0c2215c35d9c0be0eb41277c4f61044091b910a9e526b970721e270b7529d8bfd9b9e64276c88fd5a11e4ae46cf9905297d7bceb35694c675fcaf581df63a6640f59993e0b4b86164204d4eefeee4ee7256b42db6a4a3e480ac4087210574261abf273f4f0a9cf75192c23ef73e2ade940c68bb761e310772a0e4292053a119b4403722890b5ca47a1105816f7819efef218c9ccb11f1149a6ef1ccde2c59841decf12b98f6b6c22e0626b1c3993f5e4358b7854bd9a1e0f8dd7cae55cc1bccf77b40753798a1f1bc2d96e30ede8c939273f6884e2317c8c942d533d57e454d03e1516f6a6c9271cb9fed222a9b0dc36405c65f5baf919ff356086a1e2c7f5c7814e040946e9be91a405947adc090039b2a77c979778d74f2dacfee9d444c678ff8691d75de9762e440d6f6b6cb1d92fa79058066bca3f38065d46a0382bce25681ea11f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100006457eeca00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"e7fc4c6c79b4649ad6abfc4627cce42e0c5c04e19aa1f07f67a37b71cde5ec23", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "c73ec41db6d3f5c48a50ab7c7766e829891dcb60b7c7d29110541a4a199f8c46", b.PrevHash.ReverseString())
   assert.Equal(t, "e7fc4c6c79b4649ad6abfc4627cce42e0c5c04e19aa1f07f67a37b71cde5ec23", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1489593309, int(b.Timestamp))
   assert.Equal(t, 653239, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40c0c2215c35d9c0be0eb41277c4f61044091b910a9e526b970721e270b7529d8bfd9b9e64276c88fd5a11e4ae46cf9905297d7bceb35694c675fcaf581df63a6640f59993e0b4b86164204d4eefeee4ee7256b42db6a4a3e480ac4087210574261abf273f4f0a9cf75192c23ef73e2ade940c68bb761e310772a0e4292053a119b4403722890b5ca47a1105816f7819efef218c9ccb11f1149a6ef1ccde2c59841decf12b98f6b6c22e0626b1c3993f5e4358b7854bd9a1e0f8dd7cae55cc1bccf77b40753798a1f1bc2d96e30ede8c939273f6884e2317c8c942d533d57e454d03e1516f6a6c9271cb9fed222a9b0dc36405c65f5baf919ff356086a1e2c7f5c7814e040946e9be91a405947adc090039b2a77c979778d74f2dacfee9d444c678ff8691d75de9762e440d6f6b6cb1d92fa79058066bca3f38065d46a0382bce25681ea11", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00154c65278bc1bbf44d8e0b664762028a834ac43fbf974d355d4c15660e6530",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode943(t *testing.T) {
	// block taken from mainnet: 001550015abdf750df2a858e924423188829a14bdc00b7595a23e02bef9caba4
   
   rawBlock := "00000000bae02db4fba802093472ef6885dc6e08f39fff2cb481e9375d38df72b0431df88b6a101f587db36477b3efa7338ead1166fb5b0e861f7c41c54cc4c25a418fff0a37d058fc3f0a002d79e827fed97cda59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501404197dd4db4cbd0ab16cce8e4275fd3a179abc82aa305d70d37b6c1211cd8adcb02036c5b663f867f051be50cf8d7a00c37e0d61d81011f5e6d9cc39a2e5252be408fbffefff4cd19cfb83a267ccf8f0c08b9f6254059a2897b97bf6f03b2f45284c2310fe8f8bea9ffc24e2e56ff97f21453aa4b653260e16257d9d775d95db1ef40750c12ef626d451dae280a6a18b19276540a7a6ac5bf73b6c69d11bdff2159188fe93e5b93563f473acf351721be40d58916c9ec878f364bba6e85138d8f27e6404313d906c77050c4e75d93c64addc2075c804fc5caf1e43d89b893c37942d55cdd869b0f44986328a2ae4ba58a49abdeafce884e2b4b79f47c8545140fbc7271405a37075ce1a40517cac9d4b4010f110e90cb21eed4d9b14cb412211983961cf0f055d765927a69a2aff1bc5cd9fdba3654034ecfa4a5802fe018787ae9cb7ec1f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100002d79e82700000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"ff8f415ac2c44cc5417c1f860e5bfb6611ad8e33a7efb37764b37d581f106a8b", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "f81d43b072df385d37e981b42cff9ff3086edc8568ef72340902a8fbb42de0ba", b.PrevHash.ReverseString())
   assert.Equal(t, "ff8f415ac2c44cc5417c1f860e5bfb6611ad8e33a7efb37764b37d581f106a8b", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1490040586, int(b.Timestamp))
   assert.Equal(t, 671740, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "404197dd4db4cbd0ab16cce8e4275fd3a179abc82aa305d70d37b6c1211cd8adcb02036c5b663f867f051be50cf8d7a00c37e0d61d81011f5e6d9cc39a2e5252be408fbffefff4cd19cfb83a267ccf8f0c08b9f6254059a2897b97bf6f03b2f45284c2310fe8f8bea9ffc24e2e56ff97f21453aa4b653260e16257d9d775d95db1ef40750c12ef626d451dae280a6a18b19276540a7a6ac5bf73b6c69d11bdff2159188fe93e5b93563f473acf351721be40d58916c9ec878f364bba6e85138d8f27e6404313d906c77050c4e75d93c64addc2075c804fc5caf1e43d89b893c37942d55cdd869b0f44986328a2ae4ba58a49abdeafce884e2b4b79f47c8545140fbc7271405a37075ce1a40517cac9d4b4010f110e90cb21eed4d9b14cb412211983961cf0f055d765927a69a2aff1bc5cd9fdba3654034ecfa4a5802fe018787ae9cb7ec1", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001550015abdf750df2a858e924423188829a14bdc00b7595a23e02bef9caba4",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode944(t *testing.T) {
	// block taken from mainnet: 001558eb0be1a988c1f8942d4b491c05f9581fcd75fcdefc56980919680d3d5b
   
   rawBlock := "00000000b096d62a33b05ebc61ca8adf6b9266ed69db1e12728ad2446773ad6ae57d5dc823a7cf01bf76a07470e3215ad4729558e2ff02dafaf0a3b0d1eeef4f8bb806487b2d355abc171a00b4d237bdc747270259e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140abec9fb2fbddf6f3342fcb573d92b011b92dd08054bf60d73946843a245035f082b481eef208d7ef083234469a6aaeca4e4cc21245f39d752b84c962eee6a9f440bcaa16d0ba6d5f00905fd401d29af4090fae588a1c4d2ffd156f4d6069d2340e1b7d44b81406faa8ba3a25ad23238778433781203749506f662cf047e081ac0640e3acb11b08cf935d1297eff37256fc91d3197702779eac2f35b6aa6a5fa6f095459b14869d6ee3b1e88d7c7ea4a5c7e019dc0b027f4bf955fb7b1961b126c6544039aaa36e440a1beaa9ef515aaaeda15d1f4751d0020865a93d78f41f1106c6d83c11f7a787f0199bd36d76d164b3908ce8370c0d2580b97beba541c73863410c40a679770632374027a27dad6561cf1568edd57f88f7efbe67c7225efae670b359fd880b977360ee2d2534396f274d43087ca9f8e383ec4c18ba6bed0f73b52115f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0f0000b4d237bd0000000080000001e6440a6ecdd8aec6e76998e248c918de47f1f52da05fa9dc2739eee16ec07fad0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500b33f710000000015e935f3629cdd2147110eb8f37ee73a246a45d3014140c2f5a26e3beb14b90f2376e77678c2ef6000c9372d6010a6f8f3f74bcc4c7783099ee3611c11e3a53ea5d739ae91d0cb5e7f1897aac4227597eea2658ff54e31232102d76e750dc5f57e66c7b9bbb8c0d5e4a6197a2d322710d1df4757eeab212f1a0eac80000001df308e80eaa6868b50775c985e0200b9e9038e71b9620d9b8858a7e34f144f1a0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50094357700000000176b295aabcce461edcbf60fa22d03b9f073edc6014140b8c878ada4631592ae8ab1ad979af1d1690832327201f48c036b8fc08f6368c39c17088de83a0d6cdfde20fc16de3a0514397fb7d0f143e52bb1d30fbcd7613a23210290e070184deefcad5cd3bc56909c203a055163714e163a6418cd1dfa7d0b9dd5ac80000001ecdfb7a2ef0653f6bbeaaec4a1d489da11bd5de3ea0c152e40f6877c1c9e00eb0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ab904100000000105eb9c4d28e35ba9c0f1666bd93972f002204d9014140ea3eb62a7d5addf1168073b936ca317fc5640346f7c32c4dd48c4f318604ea473d06cdc853f1f3eefb03737effca9e46e6ed626cc8ba6722681282ca39c5b79b23210208f7759eb67cf17b121ce66c4fca5ec4987ad79e0f7c6da90037f4315facfc8cac8000000117678376eca24fb986aede08e90fee3b2baa38e5c5e16e02190fbf318577c43e0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50008af2f0000000028815fb1fd07573364c23c0c237d4cb9f84fcdc6014140ff0380d42facde4bdc5877a2de67bad50c190cbeab2c080268f7b6b38142cac09a00931cceb7efc400fd6a2b79bf41ac74cb35a7a3158dcaa8c553918c092d4a232103cd03528bf79fe2f4cd48a3e730577bb034b1f19d285e1a8b2fbec07d0b767e57ac800000015857ec5afffb2e859712b07671b8f6802cd19a02f20d00277d91c46502d352a80000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000fff7eb5adfbd65bbcfad684f4fb0866fec8082fc014140ba689142d0d878042a2fff1c09db3c852ef6009f2d0028deb542dcd9b7326afd5640a1473dbf694ce97bb9771e399bd48a7077354ca1516c782370017e8e2c1d232102d65d5df604a29de799fdeb0e2de8665ca7eee2b3554d1f7054e7bff36c3ec173ac0200023c90708866fa3e87077022d4b15529325a7f3fe3923cd197d37057d971d6daf10000755c3b2eeee998a438a736b45538560c53a2a3294f42a1a12eebc98e4337b5790000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60e8a4ef000000000023bf8178b261860738596488e3119936f3796f9a0141400a78b91f8a68de04ffc8719c198852aa7aa376a31e5f56e67e63bdc8dcf3036a1a37da01b1fbbeb0a936435c57b07cb91bd864c117b0ecaddbd2a1165fab971e232102eaad37321a33ef4fcb11fb2638a3ce289c469bf82d100c8bde29bf1781f2c6f1ac02000150c245ff3d54bfc870f69b2d26db834b970d48b0b4bbf77f1dc2b4ff8ff886760000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6050050200000000009c49d1f60fe2178504cbb7f2010ffa342981dac2014140c11d7b598e6bcf797ca1b5c38a6225621a65469c23587d22f2683fa5a977d88ecdcee8860744c6b97fc047356c347760c7269324b7eb3cfc4520b131fcec0ae62321031ea271c195efd408d59a2b067a4b82ec8b014aed0014669a0bb19487dd4ad767acd1015307009c4d3c310300143c61566d932c684b84b38485452c7cf2a06118d21467a63d0cdc3c10104d6b7c3a674f7bc56bb0c78f53c1087472616e7366657267f91d6b7085db7c5aaf09f19eeec1ca3c0db2c6ecf10000000000000000022067a63d0cdc3c10104d6b7c3a674f7bc56bb0c78ff105cf21cbe50000000141400ba573957d020199c71d94e48079648bb2089cd040edca7eb45a3d581ef2bf4dd66f87cfc3692f0979108dc55f13bed8bd58000a2fd65aebe11866cbb3a857fb2321028d3e08ab9d34af36ef458bd887210cc343b19306fba0da83f727bb4a42014ef9ac80000001063f5440d404cde4faf68676201880a25952ccb0ccdf8a8b73b1b02d167f7d3f0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50084d71700000000e240b7c8fd091737c9190e940236d75fefaea75d014140e28d78f6c8346e8fb505b541d118c716d67272871930a16f18400f3883183e600df44b701c92b1f0a5ff9b98f5cb334ad18e8f1b1a2c630167c80795a0fa0bb22321039f372c7ec59c4c1b72bea62dd899ab395063e9c208c25d8907e37f935c79ebcfac020001cb091a9370ba374b12fb2fb637a9eeb1104309c91e13506578bbdbe85431d1a30000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60300000000000000046b1f3778291952e1afa82f27be1f07d7a805b1001414051b31abd3a5ff61d14071b285bf9c7777b531be547f88d24797771c137841a7fa9154c762c558db7cf3de775a8fc20deb9524f22d1cc21e0c2c816213ec29f13232102b35cc8098dcceb44fe72aea1ea261391c1f861dcf016f829c90cd00675f94006ac020001e0496059de60687e66abd61a45841e270f7a501a72292d3e2af261170d5b8c6c0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60000f00000000000019dd1aa5e76678370cf92b64e31dd508e7cf8e800141406f6e8f249c730b729b6f9d340f354603f2e6dcd5cb85939a927e44b529218dfdd058d376183e585a5e6e354c4af931ee8de066f1c7a639c52b020c18e6278038232102f6251721dfa714d54ab47354aae8f5aa2f9362e870cbfe10e8a4b1c36836b75aac800000010c0ddcf78546d7c7f8f3f2e94ee665bc103d3e952c5f7f347119c8f31dcda4060000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50056218300000000982d795000f873a1cea1d8a4ab13ab8d514b2fa1014140a4f0707119658bf74b451d0a37ac501d6b0440d70d95a54fc8176db4135eb68c3dfdaa1fd24a3ecb0291c08ab2278cd05621f4db2e58cb600020935a592ab0a323210345b2db5de1d141d429c923cb6090a06d701462532f004c3e14194eb1b2211951ac020001cbbd6e8857f9f049472abcd76508b25430bbb51cb102a80f7abab0ee5c8451be0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60d83b000000000000d38b18be739f067568f0bca96d41eaf09314e45e01414073b22e4e15953b75c1b984af3ce1434b37a7e58981f39ae8c39b2e4a3d1903109997d08f13171deb56b24eaf4c094489e9945b41a451192a6d1647c5240fbc45232102cd5a73413f1f2287cbee8f178fb20a15ee88d1177b087ae11664a397b5e6caeaac0200010167295988c964a94b83ac54a5c87382b5d2422f9ef99414e33074d68a3794780000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60b807000000000000e2df12072033fab8b692207b228a4d7188280fa4014140831176c4e46ee98029f4fd9be0b2e6c8a40eef82008a9ac6a82dd073fde850e8e35a53c8841316da55d688f5a1e39eac848beed3c27122ba24b7d79122ebe4f7232102ac33641eac00c75ebd9f130ea98c49bf45c5e4b8a0fdedf1cb96fd22037c34e3ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 15 trans
	{ ID:"afea24b9834efc9bd5c036562c81c751ca7032f1777499e9864eea6f20bba776", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"b9d38bf3398c12bb009fa6fb39e0b4b778c86bbce191c590b6260760f53b8f33", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6acef2772bb398158d0f11c6c06ddc4a2d39a02421f4db43211e7706c5e1dd7a", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"850c9f8fefe2bd33c639ce8a11c76151ad3a1f1967b5ca6bc5ccbcf2e0ccb6fd", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"451950cecc89655d21d82e09e8e9647d636c7303dfc8122a0edc5369ca84567b", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4398cc51e4781b07bb4e186f20d93ba09c00cea898d9809acc1f489cac350892", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"77b9d31788f1c8e1ea5d9180dace63e3d0c04ec7ea09fec9499932ab8ef476da", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ed96df3fcc1910fb62259766fcb50ff285fa645db3522feafffd3aade8d0657f", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c925054740964faaf60a44e8516598ca7c4f3487f078bb8d39d1f54c42d0c8ec", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"370f5d253527384af021fdf5665dadf0501f3503735cb4e1861bb1dc8a759b08", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"14dd67630b4e5a93b5c8c07288b0287b56d6807e5c37d57bfc5646dd8a9bd1e4", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a3efea6e315398b9c3351284832204c5ffccdb144893e8590e79f9376be8a728", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"111fd9fffb19c6ecb95e74c804ccd31569fce3f3ec0e8fbc0e87019a814dd0d4", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e64f4fcfd92dc17ed75729e90f88a93d40b9c3f0e4c4f9a962c8ed2272eaedfd", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f892218dbd999138579af2c3f33b91371ca6dc5a8eaa19e1b7a56d5667d76122", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "c85d7de56aad736744d28a72121edb69ed66926bdf8aca61bc5eb0332ad696b0", b.PrevHash.ReverseString())
   assert.Equal(t, "4806b88b4fefeed1b0a3f0fada02ffe2589572d45a21e37074a076bf01cfa723", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1513434491, int(b.Timestamp))
   assert.Equal(t, 1710012, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40abec9fb2fbddf6f3342fcb573d92b011b92dd08054bf60d73946843a245035f082b481eef208d7ef083234469a6aaeca4e4cc21245f39d752b84c962eee6a9f440bcaa16d0ba6d5f00905fd401d29af4090fae588a1c4d2ffd156f4d6069d2340e1b7d44b81406faa8ba3a25ad23238778433781203749506f662cf047e081ac0640e3acb11b08cf935d1297eff37256fc91d3197702779eac2f35b6aa6a5fa6f095459b14869d6ee3b1e88d7c7ea4a5c7e019dc0b027f4bf955fb7b1961b126c6544039aaa36e440a1beaa9ef515aaaeda15d1f4751d0020865a93d78f41f1106c6d83c11f7a787f0199bd36d76d164b3908ce8370c0d2580b97beba541c73863410c40a679770632374027a27dad6561cf1568edd57f88f7efbe67c7225efae670b359fd880b977360ee2d2534396f274d43087ca9f8e383ec4c18ba6bed0f73b52115", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001558eb0be1a988c1f8942d4b491c05f9581fcd75fcdefc56980919680d3d5b",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 3580, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode945(t *testing.T) {
	// block taken from mainnet: 001558eeded02793a2c665ac31a401f5169d9870e67f0d389f4dd54bb65fb50b
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 16 trans
	{ ID:"61edee3b7c6758919554137a3bb326d35172f3e395b30964c76f42daae39f358", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"2bdb8085f85d26f5dbdd19c6fc7fc216f13e5e1c993f280c481668e86c832a51", Type: "ContractTransaction", Size: 211, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"e6b3f45ba7c7db702e0a7a2eb9935e9c3e6dbf6057bec067788ae55c01ea899e", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c189e5fe134f00106a47738599c74689928d20374fc1d12694959537b1a931d8", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"961f443f3d7bf35c62a48369005e1cbd7854e9249ec0b6ce0e78d126e3de2bf3", Type: "InvocationTransaction", Size: 294, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"969aefdd099723aebbac08d051f23347042868d36a34a0f993664c44fb65cdb0", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"98a0d234e7705782b53c01e2e0079645fc65a50b2e082375380afe6bf96bd93f", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"dba1c1b290a611967245befc30b5bad757111b8ddc3171842bc7b4362bcb6243", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"16df1fcd8fdc5ef7a89d4b71505d2ef1fe0ee7b2ce5de1ccd3eb95b5cb6450ab", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"11662f8191c8428f32385728b2b616c204c2b4aad1ef3ca1f2115af6a0d3c296", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"4581adb759f55640d380b672ede7d5dae3fdc25b24e046c834b0c90384f9367c", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"757a3df08e4f72bb379983c77314d298316e83f940533dfb54ab039675583162", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"381e85e98bfd8b545b671b9e18bddcea2f552955d53646d52f9bff272368b5ae", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"805e3e2da6ce6345b1c466257ca8ed349bef83daf97e845a35bfa0917e234c74", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"2f1b817084a7fa73bf02112d02f76e86b0d6cebd067b29518bd4110730c7f625", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"9a5f20b6d52edb92faaaead4d85c4ed71fe1add9365b194f5bcc7353296cf0b0", Type: "ContractTransaction", Size: 271, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:1, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "aee538dc1ab2a5601cb3f8c7121bc319f75fcd7072034009299d85e211c847c6", b.PrevHash.ReverseString())
   assert.Equal(t, "1d9ae3b7eb2399cf4addcd02488b8fab0f8e53b087b537dbd91b3d9f8c3c5d47", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1531765503, int(b.Timestamp))
   assert.Equal(t, 2511896, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "4021f585e755dd53856122da0327dafcab5e15e662210e334dc1a2f02021422da5e6c087083ee9776494125048f50338aa60daf2d87314852747ad2f02716b49a04065b138e89c85cf80f36d00ba13c74ec9c247db5cce0605b7bde97d9742d51782b5b047a9e0b41f5d84ff021b283365d960bd88b4efc4c379d26147204dcb450f402f8ad4cb90164ac0e43c44fd6f0b763beddc1def558246d947a450c35e957936403d0624343b2cf7784d23d8c0f51d58bb1d9931bf12fe79ca9c20b1df2ff3c94074eb537881cfbd74f10a0fb43ac18ac3ed94881f4f15b9b275394d4a4562e6b1900a36ace427ee80f6968e08ede361ada84ec2c15af8877e25e4900ea2fc25324065f878f74c71a188ac0fdebfc739b997b61ea06180507566e721c06b3abc4a8929d221c7917a5c118dc0e7a4f5d1dcf29889803029360240af557f3151e660c3", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001558eeded02793a2c665ac31a401f5169d9870e67f0d389f4dd54bb65fb50b",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 5183, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode946(t *testing.T) {
	// block taken from mainnet: 0015601c2796c5dfd7e7157aff50a08ce4655b9e7776313b45019e8403b00a2a
   
   rawBlock := "000000003c2c5c38bf9aecb387c6328bd2720e9c6dd09d159e349deb7ff7472ab9bcb5ecfe6b38822b4b4511eb72936658c9cd0b6d41eafae5d5fe1586697716c43a37c3685d215b1e682400b76708b58d7d6ba859e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501404901fe37cf9984e1d7a913a1d55b1f4a46fcb737071766326c08d5c030ebf530b329e3cd5226be462d26444da668cb60ee063c918f85730408ec48926091dbfd40ff561d4dec583896f2ba14b489d756cfc5993bcaba573b250957e493a2beedf1f16e7e82e85cdb558405adddb7fdd12a0a3fa2fbcd1567cdb92b714041da383a40f820bccda32be26d17b9f7db587318d5d532a5f7cf0a6de1f4b49bcec4699b928cc159181d8e27b1256a9d1119430eb19461b15eca75537fa243a9c822312b2e402011be077b7c4df0b9c4adb9a0125b84c8636349eabf31b5ad550c7f9f68526c43d42c2a3a226211fdf639a8be38cd420b809e0f10dc32144388a60f0346a27340a1207237774f61f2bf6383724ea1fcfef87dbd10a4e5850f85da360e44e8d174cbef90ed32053080a6c88d676a3d26ef8b2e644d5815726172a4fbea7b161315f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae040000b76708b500000000d1017920a7cbb895a2e7ef9f06991d9980f4c4e85bc608e49fdd1d7d65c380e7a595ab3a349b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc537e558ef781b899d61fe204c75761e699bd42ede52c10b63616e63656c4f6666657267bd097b2fcf70e1fd30a5c3ef51e662feeafeba0100000000000000000120bd8f8b9ced198bf94e5e058a5a40e69f1c481c22010568655531d41bff0823631b91b06e945cb8e2b21c7d81f2dbfa8812fa91e3b4000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140554369cae7935b0ce030681d26fbd07dcd10b2adeedbfdcabe1f3323474531495fc1a282e5ac89df29f86100afdf6bb5d2ac41c1e56ad97dd4e0eb92a13bee012321030b5ea376ed6d0b3b539b0523a018e1fd4eaab597a9f12a0c736620bb2e913f67ac4140ace897438ceea724c1fec00f83c76c5fd6ca50ff1cde4bee504f66f05da879e5be0996dc9b7ce5deea955b6cf09040ca7d0322af61eb94c4d56eaa17f315d1ba232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac800000012412d1e57ba5b24a4816a2b8c681c5bf468a8a80701057bbb560ec2563bb3cb30100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50084d7170000000099123d1b6abaa77f81a8ea449e9bdd9106c5803c9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500863ba101000000d869c957823a320e3de3c2d444151d2cebbaf16e014140cb1dc4784aa71531a1ec9e3cef4e2e4e8f8b2ae8e9854cebe3f783f24a2f75bb1b25d87b0d75df18968609203a219cdf57c4ae15bf63a667fe039079522d7d052321034083d7663f11e95ddfe0227268bb6c35671f93164ede67474b6fdb8021f4c11cac800000015a485198317554890ec966637d8ab0e8f17344aa103a2c7f4636414e01873a52020003e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60005ed0b2000000003e561ef1f0152d93011403550a10d6e27ba74e59e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60b0626f6e05000000dd52430c75a9e8a49ec943e88814181dff2ce3c2e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c600a3f051a16000000758c5f8d6f79b8b7da7e36a2f2bd50d38e761d4b014140c991efbe84cb43becec4d0ef53729fd93038c115a208e5bd79dc1c339f62afbbb3e4b39b9d4cf82a92326d3a999fef9ae9d308d202953a353503fbbbda96ff12232103ddacd6e921a86246190d85983b0da7b029dd9dc698398f0f8734e461b105dd0eac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 4 trans
	{ ID:"ae4f0a3a20d3b519aaa2e92e798b0ff36d53d9a1cd42cfc45bc02704e7ac8a68", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"fefb0b8fff6dde6189ceeb2df8684d750fe18617a44fa9c846326371f45ad534", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"c4ccd4396858bb07bd0e6404d076aaa6b769c233f602559bd86da61ef35df990", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6fcf44ffcb9860afb0b839e01395f117ffc72369e4b963bed46af0d3aba60d53", Type: "ContractTransaction", Size: 322, Version: 0, InputsLen: 1, OutputsLen: 3, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "ecb5bcb92a47f77feb9d349e159dd06d9c0e72d28b32c687b3ec9abf385c2c3c", b.PrevHash.ReverseString())
   assert.Equal(t, "c3373ac41677698615fed5e5faea416d0bcdc958669372eb11454b2b82386bfe", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1528913256, int(b.Timestamp))
   assert.Equal(t, 2385950, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "404901fe37cf9984e1d7a913a1d55b1f4a46fcb737071766326c08d5c030ebf530b329e3cd5226be462d26444da668cb60ee063c918f85730408ec48926091dbfd40ff561d4dec583896f2ba14b489d756cfc5993bcaba573b250957e493a2beedf1f16e7e82e85cdb558405adddb7fdd12a0a3fa2fbcd1567cdb92b714041da383a40f820bccda32be26d17b9f7db587318d5d532a5f7cf0a6de1f4b49bcec4699b928cc159181d8e27b1256a9d1119430eb19461b15eca75537fa243a9c822312b2e402011be077b7c4df0b9c4adb9a0125b84c8636349eabf31b5ad550c7f9f68526c43d42c2a3a226211fdf639a8be38cd420b809e0f10dc32144388a60f0346a27340a1207237774f61f2bf6383724ea1fcfef87dbd10a4e5850f85da360e44e8d174cbef90ed32053080a6c88d676a3d26ef8b2e644d5815726172a4fbea7b161315", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015601c2796c5dfd7e7157aff50a08ce4655b9e7776313b45019e8403b00a2a",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1725, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode947(t *testing.T) {
	// block taken from mainnet: 001561ec79de050f58e5a37afd9806a5039dda2ffa99d586e0a7dcf217c7d397
   
   rawBlock := "00000000977427c3cab5a072f4b0f93c01a316e1a040fa174df6a27c406516969cb3685bcda0692f9771abd778655afd3460656061beca89758c54f7acf3c33af0bcff87ee2534595d0a0f0077c729d23f4fd05759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501405737aa03d51c6da08964afade84fe88755ca6b27c155be1d00eb2601a0f3eb2da8b34c84b2bafb10ab8f7d131de21e2bc262a98a4a4304fb49959aa5998e11814059e90d8670c7359643bd99b58feffc60c155a7409defcb2275bd49570dbd04f22869076cedd11b27b0ae40fa6a0a17ff11aa1abc4e74354282c26f05a1d2a10b40da1b9e9973bdfbd428c897c7985a2b8c6665fc38998aba2a2473dd4b44ce0cc35dfb7a5f22db5bcf472c41c82b186edde1821444c5319984134c540d1bfd7cd640a38da8980d31d731024cf761ca3bebb05dd0159ee2edf582af77faf2fefc072891de80178c69b1a29a189b70ba3dea18c0fc359205886ee0239c53cde1b5f45740e34da3068e61c8c2a1abd1d21c697c90ff3e80975eb4ba1f6221e829bf85f98bd37a1abe4c3d2af778abe342a274add7dfe1d74aa9f437ee425ba0784de3a9f6f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae01000077c729d200000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"87ffbcf03ac3f3acf7548c7589cabe6160656034fd5a6578d7ab71972f69a0cd", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "5b68b39c961665407ca2f64d17fa40a0e116a3013cf9b0f472a0b5cac3277497", b.PrevHash.ReverseString())
   assert.Equal(t, "87ffbcf03ac3f3acf7548c7589cabe6160656034fd5a6578d7ab71972f69a0cd", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1496589806, int(b.Timestamp))
   assert.Equal(t, 985693, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "405737aa03d51c6da08964afade84fe88755ca6b27c155be1d00eb2601a0f3eb2da8b34c84b2bafb10ab8f7d131de21e2bc262a98a4a4304fb49959aa5998e11814059e90d8670c7359643bd99b58feffc60c155a7409defcb2275bd49570dbd04f22869076cedd11b27b0ae40fa6a0a17ff11aa1abc4e74354282c26f05a1d2a10b40da1b9e9973bdfbd428c897c7985a2b8c6665fc38998aba2a2473dd4b44ce0cc35dfb7a5f22db5bcf472c41c82b186edde1821444c5319984134c540d1bfd7cd640a38da8980d31d731024cf761ca3bebb05dd0159ee2edf582af77faf2fefc072891de80178c69b1a29a189b70ba3dea18c0fc359205886ee0239c53cde1b5f45740e34da3068e61c8c2a1abd1d21c697c90ff3e80975eb4ba1f6221e829bf85f98bd37a1abe4c3d2af778abe342a274add7dfe1d74aa9f437ee425ba0784de3a9f6", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001561ec79de050f58e5a37afd9806a5039dda2ffa99d586e0a7dcf217c7d397",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode948(t *testing.T) {
	// block taken from mainnet: 0015637b6fd485897b56f76f9030699dc3358a8c0f3580ef9347b94d7c45d1c0
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 36 trans
	{ ID:"e5568639f1968f83eb4eba26cfb4d236c88ade14e1df0acc8f376e19203c1bbb", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"14c9c3b92072a2df58b9ae532406fe915f42a46c23f76c3a000c7ed686b2254e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"45001ecf784bfe634e53751e210e3882554e547ad9941b93b7969a8dd82a277d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"34efcb2d57c3e9ea13a8bdad5fea374ab1e6dc54fe203851c2e7b4a6feb316c6", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8a410140a77803b81433320be732b5add4668629ef44361fc1a05fccaaf69e53", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"bb10a8aa1a6be30a0b455a4eab28b11450727059b853d4137d1cfa73422f1eea", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"be573268687a2cdb5f774df810c7e5723fe77d6c2c19a302ec22381785331b01", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"80ab16e15cdd9871a3c25db1aba29cb93e6c670b1cc481e76794aadcf83d8f1f", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"421308dd074b1f6089c4dbc5ac77d3dddc97ab15198d6bcfdb5129d0282ba4cb", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ebe532adc478a048c650bc45bf654981d8db4ba662cbf6aa842c7caa17204888", Type: "ContractTransaction", Size: 780, Version: 0, InputsLen: 6, OutputsLen: 1, AttributesLen:0, WitnessesLen:5}, 
{ ID:"71b2ca39ed84115f288fe440c0b97284ddc26f7b8ad214310b1d910838b4d9e7", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"061bbabae7fe0663c58442c9d3ba16f840ae1dca9edd30811b44bd6c0bf7802e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ba2fb0d58f49485256fb66cb9bb54ca4cd4e94974bf4d19973e0aa933639b529", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3e700b481dc88c6fff7880b5d22c9bb3b007b5b8348c323094bf2e18f8013584", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"47ec8e073569a1a836135216abfd5b55bd3f4619efbd7ab193dec329d946de3f", Type: "ContractTransaction", Size: 338, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:2}, 
{ ID:"35ad1caba0e1e58d917e57a9d6c37cde6ffdca018d283b341657abdcc4deee4c", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0d7277d7c93019e851cf9e7b5dd31292ae89c04a55a0d5b8b1a5d5bc4375408a", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"bd8b499d5f7041b0cf9cd6d46cf0f546b3fefd922ee0e622a60cf263322bfe89", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"543200ef9fc9590f939fe234460a2dc232afe167bf5842d520e500d8eecccc87", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"d3f7bed36d8ceec7edb97580dcceb726e46971aa326bb3156f452b10a6841c24", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"fdb7b507aa470f90433c0700314376bbe16bd5e7df9fa3fcf81e73b3839cb864", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7db9c92d075d5ab28a38468b652be4a0f5da1701f2b30718efef6091b83bcc82", Type: "ContractTransaction", Size: 610, Version: 0, InputsLen: 4, OutputsLen: 1, AttributesLen:0, WitnessesLen:4}, 
{ ID:"af406f58a59782b57bf8acfe01193aad0a0ed455c812669fa8dd5c96ef86e396", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a29468f2cca62a2d67dbb0e45017a69b04facec8be630b9e41735a1726c86fc9", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3aa59b96c45ddadb693dd46edb4d99b36d34d73f5fe4107cf699ab7baec25852", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"29c381c16baba45676a7f7a96b910705bfbaa6a4305e29402dbcfbd91c589a22", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"db422aedeff4bae505bbfb836c0be484b2046d878a25471c8960da2782c41512", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1fa06d300babb4f1a272588a4934da7597c97d13e9b03dfc1e5e98a4592f565d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"068b7323c1ae33bce09f98878c659d1ceb3943637b6fb295cdc67b7e2683d94a", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"233dbdb74ec5d532fda1f298f4e3a2142b868c9fa1bc56905ae12583a661ef4b", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"18363c86017a1d583a3aede5a51a6902c9a8d061ad0ca2f66640001c45d539c9", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f42af4344a7a7603ac9549e18dc4452382654db154455cd171a33e1f3593c5db", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9358352b2721118d5b450e32e6ea40a638c7fb9c8bc26afae8a75b100b5b9d49", Type: "ContractTransaction", Size: 746, Version: 0, InputsLen: 5, OutputsLen: 1, AttributesLen:0, WitnessesLen:5}, 
{ ID:"faeea304cc05e9890a26384006d8a6750894d800f5d1e13d12d1b4d2113cd047", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"18451953b58e7e683e4b02bca4a030aabb3c60a2b0b67d8042e765df22432891", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"bee714ec82da75b2e1a5aab11e27ea434748cbe60df194199341229138b19524", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "aa6d3a995c69252fbeb90217ddfc483384fdb3e344ee4d397f42f597389c05e8", b.PrevHash.ReverseString())
   assert.Equal(t, "63a912249d8469ae9415a68c6ce005c3d8c116a79115e47ee15480e0df242718", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1504953437, int(b.Timestamp))
   assert.Equal(t, 1348955, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40ed5c085fec122c20343c7478e045fdf2cae8de0a637ff0a55711fbff1ca6fcb5ceda81905893d0c57fa3a8963791151d66dd7431bcf2dd495589b68f16a34e1e4087055473d3787f3c61af3a9c08a55fc690923d65519ccf71548cf439111691e39b528654de73c22dad6580b849c212654ea564c24f777a0f14f208554fb7420c4096dd70b6cbeb167a02332aa15b04d81e99741da89b53ca8fbc49dca19718e1f860acffac9980ed1d02db4970c9d45093ebb65cabab003233225e5b697de532b1401251c9dbca3876e6f88abd85ac72bd1e9fc0c08d0face1085b1b7e7d3f7fae5963c0688a325469ad21d0ef2fa654fad4da6239e0e89fdf5243ba02456b7fd359405453b01caa91605913e267bcc3df069c5401c978a33b5d27f96b1fca5832aa0009fda0262884953ce7ae343e3e6bedf77c2c96fca23d5b418c7fd4110ca20dcc", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015637b6fd485897b56f76f9030699dc3358a8c0f3580ef9347b94d7c45d1c0",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 9587, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode949(t *testing.T) {
	// block taken from mainnet: 0015664803a1aa2c85e83c0f96b031c67653822643aef5c807e507349dccc267
   
   rawBlock := "000000001fe97c478ae1ce36307cb3805a66776b1de949ed551219fab06c459be06ed0cf36667f3a6b0de8a0b9e841ab4a18bbcff221002e63403211177af8f0bbf1b4c77b62195893130100b018e71372ced6d559e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014021f75c4f8986cd1db7f0c85cecd6d134c8ec7ac5f153b2349b09a5f1675a066f8d4c545f66aea87ad6179602aa434f3fc391bc227a89dd89328fad10672eacd7401195ccb7d201446a90ddf048f0dd1b33a099f78449848ec96dca258ad129e4104a85cdab306fc81e92ace3223662f6a0b017b33712a18646bf17c3764779a10540a0f017af9d7ecb076656e15f934ad032a7e1e41cd75dc1b30407fbba771c448a35e8f6f8b3131cf71a08cc7b69edf66df75cba2392679af4190eebef08ea02d8401ea8ffd1d4f541ad79717231c2a841e787f3691a17d44504a380b16558612ab302eb96cb64835d7fcfe7e9fd48076e468ccab1ea2324fa2f0f6e24fa1342ca99402d53f67b8734b86986aeebf8a571d8996b3dea4fe21e1e53bf02e2be5b1545bde1f81ca1bf5d98ec5d60cd53c97d4d8624ffc58a492838d0440a88eaf8e907b6f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000b018e71300000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"c7b4f1bbf0f87a17113240632e0021f2cfbb184aab41e8b9a0e80d6b3a7f6636", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "cfd06ee09b456cb0fa191255ed49e91d6b77665a80b37c3036cee18a477ce91f", b.PrevHash.ReverseString())
   assert.Equal(t, "c7b4f1bbf0f87a17113240632e0021f2cfbb184aab41e8b9a0e80d6b3a7f6636", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1478058619, int(b.Timestamp))
   assert.Equal(t, 70547, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4021f75c4f8986cd1db7f0c85cecd6d134c8ec7ac5f153b2349b09a5f1675a066f8d4c545f66aea87ad6179602aa434f3fc391bc227a89dd89328fad10672eacd7401195ccb7d201446a90ddf048f0dd1b33a099f78449848ec96dca258ad129e4104a85cdab306fc81e92ace3223662f6a0b017b33712a18646bf17c3764779a10540a0f017af9d7ecb076656e15f934ad032a7e1e41cd75dc1b30407fbba771c448a35e8f6f8b3131cf71a08cc7b69edf66df75cba2392679af4190eebef08ea02d8401ea8ffd1d4f541ad79717231c2a841e787f3691a17d44504a380b16558612ab302eb96cb64835d7fcfe7e9fd48076e468ccab1ea2324fa2f0f6e24fa1342ca99402d53f67b8734b86986aeebf8a571d8996b3dea4fe21e1e53bf02e2be5b1545bde1f81ca1bf5d98ec5d60cd53c97d4d8624ffc58a492838d0440a88eaf8e907b6", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015664803a1aa2c85e83c0f96b031c67653822643aef5c807e507349dccc267",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode950(t *testing.T) {
	// block taken from mainnet: 00156ed330cd22dcd8cf7d98da474a056cc824bfe0f3f1ed8da5b92038858f28
   
   rawBlock := "00000000623a77fd003ee8858d4461779dc4a924032f568748c7e92d6aaf8a36351f947ef7b16bc55e4eed024b22c48706ec0000611db02020d1a5e2513370456f51c61e471d145ae58f1800fba7904e7a02803f59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014057297f9c3bb0b92a803c7528c09ed5b99a35280b7e53e6e9daa217754dce5c13e8bdef27b79d8a75e5931be4f9f51880d1667a954dadbdc6933152db8f5e599f4082381499788c61626c2b0437b570c6c2625c92336694d4da39a14732a51e47ba74e6d11abb1f18f80d30d1f458b53c425f0cc5cba7e8ca411ae7bb9ac20a04df40df9a813969dad6ddf0af189f4e95826fcac9f16c48e0d4a71fb11d0b3970fc992bd285ad4725d2ff0c0343f7ed165b4e2838ef0c7717a9d68267d493abcdae1140453e5bdd5400f1db24808bdf1c1fd36732d783e70f725196261da00da85cd867e8fd6219feb18c94a82c23ca4081b44f4abaa7d40840750f3a51078d39eaeb7940dd90781c227fadf6d5358597f90a1756834a9e4e6091d1e969caae5a20f1af6a886a686b965cabe7a5c79aa5689c87e16bc4680206551620bc03a18552324448f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae060000fba7904e000000008000000358bed84e23bc63ee12a8cf0c179a32825202cb76d60f8451caf47de73d2adcb0000071640a19cc1b6fdbce7ef788e49aede437b86de4ca4a938dc20f5f64db7181da00003b4d68ea10ceeda1585c8e0b2d6a481c4f393ad0353aa5394be1825d548e760d0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500b70784030000005da479e46dfc421ff7ef34847c72aebecbb5815d0141401cbab06bd141faeb65c77e99f36c1d2a0c0bf30c9ca46edb75973b5c3cd462e40e33a9927e0cd17f21c599d584b0df9e6be38bf9bc2b1c1f66a31e5a008d8f4823210335612896928be1817a037b353d60c5948da4cbe2a1e85130f38bc4bdb31e6835ac80000001d65ff231be500368e1878dc3e05f1330ec2b5e173a7082c1ff5781c256a7f9be0100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50033116209000000607f057bff327701dc44b0dc538c144e4836ec4b9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500d35519970300000ad5396ea9c7b9f1a141ce440fce3dbb272f77d40141402e193160c9870b039bf73b20becb9283ea4321ddf0863440c0b44bf09d0072f24203a62d74f51de4c65e9ed14e4753b65ca08f1ce8c11c6aaa4a0ab763efb8d1232102823c61b7b999400ffcf4f5fc61510ca702e26de85009de753fbe9a4f858582f3ac800000019e85891a3631f0d8d98bd04fff78d432b72d4efef4b879ac278c2772e338ae820200049b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500286bee00000000b103825e395e2b79412e05325349ba93ca787bab9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ca9a3b00000000fe1ceec3305b08582d94b98abf6ef0e7751cc94e9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50087ed650200000029f526d90be297f00d293fdd2425e763dd5e6b1d9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5003abbc1d3010000235a717ed7ed18a43de47499c3d05b8d4a4bcf3a01414068a4cdf01261434dad4f162e70418f9a9107680b78cff2fa84b0512ca2337eaa27777e616dc9f7d8eccfab61526afd833e274ad16029ecc6591d6e56bb894f392321030ab39b99d8675cd9bd90aaec37cba964297cc817078d33e508ab11f1d245c068ac020001224c7409367d543f1acdabac73687b51a2814f9e3e3af4f52c72d54ba0b0da0e0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000f6060000000000b1ae3b16a47fc2ce17c84760e10b4816876bca8e0141408bab4f994bca2757576f73bbedcd8f4ddab085a77749bb0c054cafcd15de416a8e04794184eeb8cefb2deaa772ccc01b84d1eb1810efc269fec6d20c1850e6d323210310f9243d2751c88ed44f3924c838f7f1b18295f1e5c2d2355cdeea8b197aa5b2ac800000030192bf35d895d03882db1fe375f6dfd1e86d9e111f242fd435805142ff064b6700000360aac2a49b9cc8eacdab121d50b4744361b0025819d7f12d930a3f2c83c2d50000bb51ecdd0809657199b7eeab8158edcc0c98d937a0fe0bcf54a2dd07b7137e640000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5009435770000000071d011a403f517f45f489f04117ef1719476fdfc014140ea851ec1a61be8b5abcc4342963e68b556466973cf5b385d9dba55e762f2079f675a18fd0a10f726149f9ec84cc3999f016ca42069181fe3be57d6bfaf2d2d9a232103b0e77bd13bc41d9969c8c94405194d72d1ef4c24f89e9019254132fb17bbbf32ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"ee0a8a27ecea3c7b56ad017037742ed02c9d4dd253de1e5e2ef539ceb9741d16", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"ed960d5b9f1a9028d8e7d943c5c123e23cdd9328459fa4b54a8114ab14c29ef3", Type: "ContractTransaction", Size: 270, Version: 0, InputsLen: 3, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b07301d4f01c6d512e8668d376fda09de6e4c0fb525ef61fbb3cbc92747ca68a", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"de302d591f7d2664b18165ac0e46dc8d3186363df49170a5b119320dc876b561", Type: "ContractTransaction", Size: 382, Version: 0, InputsLen: 1, OutputsLen: 4, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9e3e670838a02311c781e8f300532abe4cdd13ea8a153a1f195b6df0616a7ec5", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f1aaf95b8d3bac0707fecb3d16e8dc030f0654bce80a40a53eb0c711dd1d4b0c", Type: "ContractTransaction", Size: 270, Version: 0, InputsLen: 3, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "7e941f35368aaf6a2de9c74887562f0324a9c49d7761448d85e83e00fd773a62", b.PrevHash.ReverseString())
   assert.Equal(t, "1ec6516f45703351e2a5d12020b01d610000ec0687c4224b02ed4e5ec56bb1f7", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1511267655, int(b.Timestamp))
   assert.Equal(t, 1609701, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4057297f9c3bb0b92a803c7528c09ed5b99a35280b7e53e6e9daa217754dce5c13e8bdef27b79d8a75e5931be4f9f51880d1667a954dadbdc6933152db8f5e599f4082381499788c61626c2b0437b570c6c2625c92336694d4da39a14732a51e47ba74e6d11abb1f18f80d30d1f458b53c425f0cc5cba7e8ca411ae7bb9ac20a04df40df9a813969dad6ddf0af189f4e95826fcac9f16c48e0d4a71fb11d0b3970fc992bd285ad4725d2ff0c0343f7ed165b4e2838ef0c7717a9d68267d493abcdae1140453e5bdd5400f1db24808bdf1c1fd36732d783e70f725196261da00da85cd867e8fd6219feb18c94a82c23ca4081b44f4abaa7d40840750f3a51078d39eaeb7940dd90781c227fadf6d5358597f90a1756834a9e4e6091d1e969caae5a20f1af6a886a686b965cabe7a5c79aa5689c87e16bc4680206551620bc03a18552324448", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00156ed330cd22dcd8cf7d98da474a056cc824bfe0f3f1ed8da5b92038858f28",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2073, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode951(t *testing.T) {
	// block taken from mainnet: 0015774420552bc35693d0203a3e989e761fef1139352e8264f63447000e0b1e
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 21 trans
	{ ID:"02f6685daf5fb8aab9e27e46c5e2c70e54c5aa45611fe3afcaa6cccade84fea4", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"8ea4a2e665917624dfdbfd03fc447eb83e12c879bc9d550f19f856700b808459", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"c229fbfa04b70f751b26653f6dfadfa38c81d904c2b936c21e2b9c15e0c8959e", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"f51c504f8eff30d0eb6ac2bf9f316339bcda2833585fa06c58feb6184bee7195", Type: "InvocationTransaction", Size: 472, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"7c75d35d9efb142d17d08dc99ff210bdb1a674d85c59040340584529226d4ec1", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"a19e3fc190f492867ee8bd40544fc7c9db9ac761b0b982ee93103439e4edf93d", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"5f28b1dc03c76455b7237e39c54a235c1e9645421fad624bbcec5fb4ea0e37a7", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"4fb3a38ebd77d263f227943ff432f3b00cac3e2b675c53d71d1f0cc25a12132b", Type: "ContractTransaction", Size: 215, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"eeab885490b8b66b5b66716f981dda9d80806c26c10d256846e8bf653c933599", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"f8da523658aed423fdd7caccdd7c04d21b0240eb132da8bd5d305512649f313b", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9c29bdd4051760dcc78b30a5112f44af77e4441aa154932ca2811d8b81627dbd", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"155c1a7bf21291d1b6c151042de67cd4eb49c3dfc57e09a293a59a5a1cc7af16", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"4740a012e41422c0de9ce45828e52f46193d2c45eee58cdd431047510fb936ce", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"d1eb59aae40134392d505076373f6810a7e0b484258f90051531a19f69025ab0", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"fd696b470d8ab9ad50ab00a2af57425539d1840b5fe05a0234018a608472e7ec", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"95caa714f41b32a749c4bfa152995363737edd8835ca27095a437c457bb787d5", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"25d783b210c7f3e082d98506262732ce83fcf082273bffe4a87d6962ac1c709e", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"991acece0ed01dfd8e72654fadcdb459cd1150f1db0919dcd8f2bbe92207a465", Type: "InvocationTransaction", Size: 481, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"c6ba360f0dd09d4f03be8c556b73b3aef7ed39181d92247fb65cd0d0cb450a65", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"c8ef91c092a88ebbedbb5b982dfd079e1d277c6b1f36dd620f14b5dafcf6404d", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"56a16989b38a7338fef7a8b71fe86b5f30e9e71232be658871a1f0181216f44c", Type: "InvocationTransaction", Size: 232, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "485a9d7c38680253b20710ba892f81c7f4f1c4513b5a52fe423cc2cb086b22c4", b.PrevHash.ReverseString())
   assert.Equal(t, "bea1825fbb3805345bd82220009baf3a036771937f310158a93ee8b30351afbd", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1531862853, int(b.Timestamp))
   assert.Equal(t, 2516363, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "4089b78350bae66f8979d35b627b1daab880c353e928bcdbdb090590f6b795ad80bf3a084290905c2c398c6b7b9649a76eebe3a8f32d4b07abad8fa5bdbf443a554098af717bcb8af9911b0788fa6c27d9fa9393df6132838f2987375981ec90f564a2c630a9e440b6179b531f5a71135ae3599276efa655aa16f4bc81e2ebfe4580406bbd22c7f98c3285179932a562084da344e4ba1f86e4c0520b9b2918019eede246ad93f3dee736d2ebe5179f2d7e956a1e4203f58d04126b0e248a57ef8558e040329b41ee2668bd8a8fbf3604f6acc8a8e41644919e2c30a7e9e95aba548b13c123e08da6940de3870d75b61b95c1941ef6f9a6fe882fae88b884ff7b0bacb0d940d6b2f4d9db66d96149448f26cf5e704ba13377cc55724175df05a24554696a54b1ef3f5c8732163527787ac4e7a5196b0143121d39b763967929eca007e6eee4", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015774420552bc35693d0203a3e989e761fef1139352e8264f63447000e0b1e",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 6006, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode952(t *testing.T) {
	// block taken from mainnet: 00157fb7c3a52b0031129e49c756555e0708234908f5b4644da205d5455dff13
   
   rawBlock := "000000003a6cb7db98fab4b49f64dd3e44a6b275b476ebc590777d24131c30727ef090c8be4d53eaf4b7b403685332256815d2a41d003aa0b338e2a6cd641a69f0a070440d505658591d040025614d61a1ce4c0459e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140c368b413d55e3b74f986325b0908846cf96ae8c3c8f320459f7605c1311bee58c9bdc3d0e563f33d91ff38ccf35b2e105ecb38a84f9656cda64a836f4dcb6e71404387a9e6a245315a7c7d765876651c6766d9a14151201920e5326f9382fd0e7632f1d7a794c40e7243dc77d4b8caf51b5a86dcc879e2f0cfcc8dcd1a75e613bd4081109a9b1eeccd1b589772e562f2933d1d72f7510106c26cd599f0e59885df4082247f895ad9fd7c81643d38fe6e9ec42af418ce7b78691df398b4ce0440902640c5583a6eaade221e9aab889de95e054015195e7a7e64f306ffd2b06e182b25b2ba40c3b1d5ae4aecc90728d63e2fb12b3c584d92f79c88482a06a4cf562798f6408152182352d71acb00d91100d94c50f52dec93302a91752765fe02235951c561d0fa60b4bf2e6b7cb4e4dfee25284ab89fbf56996bfa5bf563e1135c546e4537f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae01000025614d6100000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"4470a0f0691a64cda6e238b3a03a001da4d215682532536803b4b7f4ea534dbe", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "c890f07e72301c13247d7790c5eb76b475b2a6443edd649fb4b4fa98dbb76c3a", b.PrevHash.ReverseString())
   assert.Equal(t, "4470a0f0691a64cda6e238b3a03a001da4d215682532536803b4b7f4ea534dbe", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1482051597, int(b.Timestamp))
   assert.Equal(t, 269657, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40c368b413d55e3b74f986325b0908846cf96ae8c3c8f320459f7605c1311bee58c9bdc3d0e563f33d91ff38ccf35b2e105ecb38a84f9656cda64a836f4dcb6e71404387a9e6a245315a7c7d765876651c6766d9a14151201920e5326f9382fd0e7632f1d7a794c40e7243dc77d4b8caf51b5a86dcc879e2f0cfcc8dcd1a75e613bd4081109a9b1eeccd1b589772e562f2933d1d72f7510106c26cd599f0e59885df4082247f895ad9fd7c81643d38fe6e9ec42af418ce7b78691df398b4ce0440902640c5583a6eaade221e9aab889de95e054015195e7a7e64f306ffd2b06e182b25b2ba40c3b1d5ae4aecc90728d63e2fb12b3c584d92f79c88482a06a4cf562798f6408152182352d71acb00d91100d94c50f52dec93302a91752765fe02235951c561d0fa60b4bf2e6b7cb4e4dfee25284ab89fbf56996bfa5bf563e1135c546e4537", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00157fb7c3a52b0031129e49c756555e0708234908f5b4644da205d5455dff13",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode953(t *testing.T) {
	// block taken from mainnet: 001582c6c519befc444354e0ee0bee0ee449d3c001f8179a875e2d0857960670
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 21 trans
	{ ID:"11a5b54d33680565be9ee179c338af558fe50ff6f839dfd7d5d57b07009eae4d", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"a33019662f8a2b4c4936897e1805658d032888a8476114ac6a43060fdb245a73", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5e1ee720288b5673b1a487a0d13223f55ec8f380a56c929d67b32395d25b65a3", Type: "InvocationTransaction", Size: 227, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"8b85b1ab0303a7b22f2f0506626afd4c68d8a0e4bea65cc71410e4cfb9940801", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"caf4c900ddfe08cb5ea28ee2203bd66fa9c4456321507b23e4668a3703690b74", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7ed3f737b6bbb8029c66e42a90658a4674d467a5a270efab19f4cb9704f7f998", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0a7cc934f5cc4e5f0326a39f6ffe98978255db83ae1773dabd565427ca859341", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ba59c03bc82d427652d8fbc5987b62d4b0acbe08d0742a9fefa6f0e4e2e97f64", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"bdfe21971b650172dd5c20e2dbb70fdb84aa85fae48c26cd75462d0fa4566952", Type: "InvocationTransaction", Size: 227, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"c4ff9a3845c319260459f16fc6b231dc126d4ec17a51f212d859fcd49503f66c", Type: "InvocationTransaction", Size: 350, Version: 1, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"27330bb3722eba11f8b6c82981e2db672b18d825c72e4893527c78c126d80c3f", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ae48f0e31288604a857c20250f8be4ec978c53fac7880b46057416c06b26ae2e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8d61e270d62cc5041f99084b8b50eebde7f2c43670b9e70bc367667733b43789", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"788b886d91e2895a089cc4f4ab86b7a125af1c9a9f316528a0bc81f81a6c564a", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"bda18a43af4a354cd10557bcc9bca1ac326180c2fd079690139429a90745daac", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"91f6aeef5c6fe61995417b351bcfa0d5aab3597781e3536037c79697f03d1699", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"59d07c3459c9bb61008fea3316dc2e22b7c1d4ae247f68aaa5bb0168d23f7a35", Type: "ClaimTransaction", Size: 271, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"bf212c5e84d55bd89aa013dd65c9420a9b5863ddb39b0266a10e1d637ade7e06", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"db9c76d915f24784dae762da94ad12518a26c1f4b0bb3606765c0d84c5b5e77b", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"098121cb433a507801fa6b836f2ac7fe03cf6a386c01212f467d52158907f03c", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7445733633ef278071428c38a7f0118194b220773ecd1d334aa2ea3bf5753751", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "62a58bd0a6998f478d2f276c42b8ef11326981ff401e3fd28857a9f01e9e364f", b.PrevHash.ReverseString())
   assert.Equal(t, "bb443b3d57af4a896b1b23e29bd420eb4034aab23cf59a6579b0faa3543a28c4", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1516267624, int(b.Timestamp))
   assert.Equal(t, 1829039, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "402c5f4d3da6b5ed39c136d0edcb94eaeb7e17299b0b3e902fe54ce65525cdaad9a428dc5b9acc5355f6b003f8830ea2f84c9456a3b6a16f947f09f3660801812140abe1f05235c85b772fa0ecb236e9e474140fd4c70041688c06e95fdffbe7315d00d5a96413250b13f794587e1c41dbd9d3269038c84d8319a9ffd1843cf03bc44048dd18e4ead60a5230324060b59f72c47ca17637eb28b9bc0e2239062923a4d4153fa9cc81c8d18a2029394e1dfdc7f5cd7292e51bb46f73e19893e4e521112f40cf677b9e380b644d0aab6176c63b9582cc2adb0ea037059bfa6f59e7f9dc04ad3429f0555bafe34befc2b870965848a711731e96055c76bdcebd17da7898c558404c783e4f2eb3115a86665013b940ef44a42ad047c7d877a382c1a63fb2fa88f2ce2026b13a6a274290242cd911192ef41f6bad8c8ef1a68a42d8104364d542ab", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001582c6c519befc444354e0ee0bee0ee449d3c001f8179a875e2d0857960670",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 5105, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode954(t *testing.T) {
	// block taken from mainnet: 0015865743f7927f7cb8c0f2038ef5cc6252f0a51d37e17576f471df9d6dae7f
   
   rawBlock := "00000000a217f5f230ce717ade84cb52c39380a01fb34c29204cbeb63a858d857b85b5ffe1ffb2773990b8feed1a29a1e7f54f4058bb10648659f07f45c206b91d2b55b7583dc0591d241500f28dc95f0946a82459e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140402a0edb84842ecd59c5e3f9762096b644ab94ab56815d8b898c99afca167e3c47a8a3b233e012b963ff0b610f4f7392e98091debb825cd2db21c2c496c1e64740316f06e188bd51594740c820785e277ba5d425de3094e4ce3dd3d1db905e10e658c7334b4c26b1cdf154d78d8bcd620161307b2d459e6d167fcd8725201bfaa040f78c46c3565343de619d38bc5e2de69bdce0c6571d2ad2e203dcf0942089a752bb8868dea252abbdd26772dfb8dc22c82949197b250e16f41b03b1e2e1785033401f8b414622d64876b65948a563dbaa897613051e710defe446c22445b113099d2e21230e41636b8ff783a39eded7231270fcb899fcbc05aee2b4fbd33acdf9c240d14ea53b0ad30975adbb6d11a3de0a70b306bac7503278087d35e93bf65cf638b18d669cdc7e46a0b67df306fe173e443564db8e2ef2149333c336d135286207f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae060000f28dc95f0000000080000002f379039abed4a3e80af43c13aa0fb286467f8b3d516b07d01190ae858d023c3900005ebb7cb05add352a3f3e85af6225d34c34d857806cd4dff43f12d93f70208bd40000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a8feca15000000f44df378207685bc6a02210e31352c3d7972d7940141409c67745485d125de0b0f037770464b5c66c5bb56c74aa5c8c3b23a91a05950922dddcb66863d82652b21a14a49482ce103f7642bf304e563496cf04368f972ca232102fa8afdff6c241f19f29e4a3ba88392e026fd91cb01eb0f29d61d100e500235afac800000011534eb23a78d9b05152078f68466cc56223fffd48b897d8274fc7f0301af4f770000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a3e1110000000055602de91f77a20691fa0888d46473405f292653014140e6b5de3a9cbe5459b10efc0a6c5940ce3fc9f12300616cec32a26c8ffad67f9bfb40722f5703eeabfa19069687a62c66d3e23fd5bc6952ab674c58d1ccfb6fc02321033489c69cc75757cb098f3d588b8ff4d7c4e02ee9451955b8741051c7b150633aac800000019aa793410463c052588f035b52d903ffa96da81f572865249d1ad563c77aa1f00000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e9a435000000001ab7df84708619308ce5f54db37cceb5755b7d08014140bcbb2023db9e46623ca5755e89c89a449adbc25e82db44ee6d95dcd8b39aecb3701a0e785081a63335d5eac2a8d00b7dbf17d7113533d11e04db4f46cfd98f5f232103f3939f441fc9ca9f940fe95c6c22a25eba8a470c7b264aae7240427e765f82f4ac020001b728a893c9fcbd4fa6d63a4aa5632c23ea7e8724778ade09e770fb168e8a4dc30000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60a45e4a12000000001a17b5e0a4c4ad43fa31b54c9ed946559e8a7e8a0141401b0b5c9caee8ce95b130faaed742f1cc97078a388aa262db09ad06f10b58d7ed6f36166599ce71d977d28ff1c2394af33e4e1e7e56d25140de5fca785c62271923210365d25e736ba158b7168536b95608e6acb71fa627a1b72c6bab06b3d0c57d7f00ac80000001cd1a47445565f92fe69af2dfd909db581919ca1d9bc2143486f11080edfe48c80000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500d3fb2f010000009cdedc9e774e4662721f54397352eb078a41da5d0141403faafa699844f293c2ea132a0cfcc06df8420d6aa570549fddd95b72046e8c2ad4472bc498b94e8a9614662b550b90cae81cbb48aa46033c1df7cc11d43c03c32321025b108a4ef9b6786fdacd31b6dd8d20e2d0149dab269c98da5ea7a6e35f35630aac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"67fc8e0d2d83c2f66aeb7b0f3622b3cd83246ce56fc86b811e32b6873ff0ea42", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"861a34a73878ccbb2a4e79cc6100c13c572d83c3b46f80c7abf3243ad38175d6", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4ac8c6ebf35884d37f7c906493dd5e8a94041fd88fbece4c2c9e7d1f17b0746c", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3ecfe400a4fe56d968f8ed315b2721db7f7eb2921fdf1911c3c8182fce7e3320", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6599a11819d65a9df03c8af1f0d9ced66d1758a9fba060981039708f14a255c2", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0b12e155f3db4291585b3e808c30070eb8b09d71056fe8537adb8d9753912bd8", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "ffb5857b858d853ab6be4c20294cb31fa08093c352cb84de7a71ce30f2f517a2", b.PrevHash.ReverseString())
   assert.Equal(t, "b7552b1db906c2457ff059866410bb58404ff5e7a1291aedfeb8903977b2ffe1", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1505770840, int(b.Timestamp))
   assert.Equal(t, 1385501, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40402a0edb84842ecd59c5e3f9762096b644ab94ab56815d8b898c99afca167e3c47a8a3b233e012b963ff0b610f4f7392e98091debb825cd2db21c2c496c1e64740316f06e188bd51594740c820785e277ba5d425de3094e4ce3dd3d1db905e10e658c7334b4c26b1cdf154d78d8bcd620161307b2d459e6d167fcd8725201bfaa040f78c46c3565343de619d38bc5e2de69bdce0c6571d2ad2e203dcf0942089a752bb8868dea252abbdd26772dfb8dc22c82949197b250e16f41b03b1e2e1785033401f8b414622d64876b65948a563dbaa897613051e710defe446c22445b113099d2e21230e41636b8ff783a39eded7231270fcb899fcbc05aee2b4fbd33acdf9c240d14ea53b0ad30975adbb6d11a3de0a70b306bac7503278087d35e93bf65cf638b18d669cdc7e46a0b67df306fe173e443564db8e2ef2149333c336d135286207", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015865743f7927f7cb8c0f2038ef5cc6252f0a51d37e17576f471df9d6dae7f",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1731, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode955(t *testing.T) {
	// block taken from mainnet: 0015867b4d16aec2618a4cd1c8b92ffa0b41ce915a4c83647907caa52a85894d
   
   rawBlock := "00000000a7669c046a2fd28cc5fb81729595737264ff7a63d9a8ca12844533d682d5ae743e24a272c3f3755e60273bc9275fdbc7ff9385aa6428db5148fc2d32d3cf5682b2844c58c39d03007447703edaedebab59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501405f2cec1db130420d8cf3e733656024dbfcb0876b7d1350793bc9f36976a7c5afd6b68e185b5494e855aaa2dfc1a082c84a5d93a7221c6c239fc4a04aa5d8b0ef404c7c41d4e2fb1f78cef8fcec4031aa5c2bded1d195cd390104f73df40f204b410c5552d5cf02abb215b3c31c68a8240c20c001c20fcc2e02815e7ebcef12160340c13967fb0b67f86b061f388c500663178b6f36913deeac0181cd16b34b853b9bd63a30ea0d496285eb3039af4220cfdb8647c32388bf77e10340485b78823d47407418145e2c3e19f170326ef31e8381be17eaddce644d9059e6559a1de8976fbc0ecb57ef68808a7f0bbefc89e157051d3a6d5653b42e3c91b7c3a1e1a95039ac40167769e72c3b597c0bf2954ba0f9ed55df71bea3dadec6af3e2643b8546e57b77adb8f922cdec4c59b55c9af9a6d3ba7f7b599ee80de4963480930190800a1a6f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100007447703e00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"8256cfd3322dfc4851db2864aa8593ffc7db5f27c93b27605e75f3c372a2243e", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "74aed582d633458412caa8d9637aff64727395957281fbc58cd22f6a049c66a7", b.PrevHash.ReverseString())
   assert.Equal(t, "8256cfd3322dfc4851db2864aa8593ffc7db5f27c93b27605e75f3c372a2243e", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1481409714, int(b.Timestamp))
   assert.Equal(t, 236995, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "405f2cec1db130420d8cf3e733656024dbfcb0876b7d1350793bc9f36976a7c5afd6b68e185b5494e855aaa2dfc1a082c84a5d93a7221c6c239fc4a04aa5d8b0ef404c7c41d4e2fb1f78cef8fcec4031aa5c2bded1d195cd390104f73df40f204b410c5552d5cf02abb215b3c31c68a8240c20c001c20fcc2e02815e7ebcef12160340c13967fb0b67f86b061f388c500663178b6f36913deeac0181cd16b34b853b9bd63a30ea0d496285eb3039af4220cfdb8647c32388bf77e10340485b78823d47407418145e2c3e19f170326ef31e8381be17eaddce644d9059e6559a1de8976fbc0ecb57ef68808a7f0bbefc89e157051d3a6d5653b42e3c91b7c3a1e1a95039ac40167769e72c3b597c0bf2954ba0f9ed55df71bea3dadec6af3e2643b8546e57b77adb8f922cdec4c59b55c9af9a6d3ba7f7b599ee80de4963480930190800a1a6", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015867b4d16aec2618a4cd1c8b92ffa0b41ce915a4c83647907caa52a85894d",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode956(t *testing.T) {
	// block taken from mainnet: 001588453e70f6bd0ca62f49b4eedfcd82e0b855321fdb5995b22e0b649d54e8
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 87 trans
	{ ID:"f6656efa14f0e8a8276008fb2ed33666f5af64b4865716f722f2c155a140bdb8", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"e3342a7688a6afb9840f8206660b1030403f8e34759f30d173556c36012f413c", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"2a92ed408fefc084fd51dd987652c40e5dbcbb296f3ef372d2a44d37dd4f7e63", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f654d2c6d1ee56c8476742e423e5153b66fbe28d91a9d950318cf433876855f7", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"cbe76d494c63c893aeff56f3eb23972dbffd3456ce5b3d78daa7039fa454905c", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"af58886cd1178b72072abdf244c5f778d26b5fd17b2efc93bd084b034686ff35", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"18df417e220e2e2bb36f7f0d98078cf685dfa04bdff266de527af4cfe252da22", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"5ea4942561ebd8c45cf90653b0584420205fa9f28390d8549b99dacefbb71bc2", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"583113a7542c50ae077e8f7b0b86f3a10d619d665c949de786f4d2ae907715f3", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"529a81121c3047d18d22bce79a34ddcc9b543be448b56343d336ccd58c0f1ec7", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"21195c38836c39e47ab47a6cbb6cc3ee8a95cc4d75d76adf8fa1d6ff15b00cae", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"2734e2fc8a828c9d904b374ecd3fa9fa30f91bcdbe28c14ff77d3cf77405edf7", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"db4f96ebe2484ae3945fc665dd442776f416e978e073b25bb6d8183519cd4f83", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"8af78226daae428f1e462faf84b6be6b85603f874e61b843ffc305d068aeb455", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"daffd7190b2bc967485adfe62883e5929203d27df7f1d79e533e13d43bc89550", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"95eac149476bb0099747602b90b124a6750089e70b47979d1036a608987d381f", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:3, WitnessesLen:1}, 
{ ID:"59fefe9cf2c70267e4292cc1cef03be82eec15c5a83dc60bb99ffc722c0dcdfa", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"592c05efa702d3eafc142d8c2a919fadce4710a7a3ae8ec69c68da12a6b40368", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"c845c8c1d09bf4d38c6bbdd6a03f9cbd40d0ba32c8bb1b4e48f4a51a6c290d9a", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"d02cfd81f3bc65698d738100f90d01c0db4cea0a7db6b8939e3b2d58295bca1f", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"755002bca0b9bac0d91e80e45618f6cb518de3c891ecdea44652b0446d10c22e", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"d600020fc19631aea3ae647c67de548582721010ef904192ee0b0fe505b90e0e", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"6f3cec2bebfdbca2526d5cb224342110a089515a2300e5a41ad6f742bd8353b6", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"5f0e36a6d89b20a878d73fdcd90c05759aa986ac1caca9725a0e8e5d6dd76deb", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"09f570b19cebe17bc262604525f1e030e4540295b123c487b74ed5f264a8bde7", Type: "InvocationTransaction", Size: 496, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"03d6a93810cbac30437e27580a9c437c226b6e627b9112c07b7c24903c949a3b", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"9b4798273a84103669ef3e3b71f8fc1257fa4dc2dfa15b14e5911ab53253f8bd", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"fa30182bedadacc133926f674cc0f15486b9e2e09318567a6aa1677b7cd5211f", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"43e815933003a295755eefe4e112c5f88d92d57e6f74a637b9b262b682a56db5", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"458102d5d40f0010e97b5067e54fb6b01f279bda701c3711770eb7340323be90", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"3abdfadb063e04aff74ca35079efec2359fea920a254e04d056cd23c1d2a32a8", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"bc4327e5a1349f6743957ba938208fec9003854fda34ff3376a4c3e98ff6a1cf", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"fef51464669f6030cd5c728ca73a6133f37e8b6ee504a172cc67ff53be453b9e", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"d78b0cfae4cc20e3429f5a07954d0cf84ddcd90c43718eefea69a95f9afc17f7", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"fd39a63eb0152478f74a28b7704114a73f5e033abac2fc6c074f5711cd0100ff", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"0219963da68b7a1cfe215edf6b9bbdf2fe3fde8060615e9ff427d130b6c26855", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8842adfc800bead045d3604a941b52b18b0a6e13e3aee4c45029dc76fbfdfdd8", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"4af3e5b19369242bcc7a8dcf86c1ee5acbde1bd125b6cc57edc3b0f924e720dd", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"86ca585ad3ae2d8649c5736d418443c3fb35145dacaea5805f21bbb8672c672e", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"1b2cfdd25e55cfe9b8a646d11ec65573e4ef32f1625b110f86e0189f4c4dd657", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"058f80c34f76f0ba9693934040d0f9583277c86638027be05a5e5ab5817c9141", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"853463e96e43ac900ad00a7d8ad996ad7bf8567ac0f59c1ff4cdff46beeb1b83", Type: "InvocationTransaction", Size: 461, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"c8f9d395a1a7a20694cf9c5e3e2e0e50b9fe9fc07a01884867204079b2d0f3b0", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"288d530a082e699337c273a16f63136c2ba554c130956ef3fc3adcd8a1326164", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"70ac50fa8fd90faa79b19808c1a7500294124ba680ad9b4b3a556e175cc965ce", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b37d6d69cb19df02852565672ea800ba89628f8203021a1dc1422c439e666f34", Type: "InvocationTransaction", Size: 334, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:3, WitnessesLen:2}, 
{ ID:"4ccf4985d2f47b45c7b6879fd375a25f5acbb49337dc4e6de70bf205bc23a827", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"22ce1ea2706856472a26b17508843fcfb4c8251a0569a416eb6d3993575c21bf", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"836abf516a7558e9e6cf1f352ecd3ec522d31ca2092c7c56646c408f94f9ebf6", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"10d40806d52e338d0fbfc91ff3719b77b378c56569f0bc5bcf5252c2bc328345", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"85dff85732fb066de6093bb9e5d353a0f6acca0890303d0d65f3798fcf37740a", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"d4b3b746c0767cbfcb2a006659a2de6be04b5e825ce1b91bb758b3d9670514a4", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"b86514ba0e011d733edec42409e73173065918a68cb5353609e56bf1490201a1", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"b53634aebb5bfa3235c4e9aef17d9b24a14c994b7715874316f714909cb18930", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"b30d7cad3dfdf2c460a482134844cb54e3f1e79fddf4a10d365a17948e1ef64d", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"b04698e6cff92a587a259cea5808e9f4fc0a35a14aeb44b68d0dd04886a3a380", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"3a709f565a404871271ecc8f47abacf990ce0d1595a50175db07d474cbea5670", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"48924d8cae1671f199aad35be24de1bdb7e05682ef745eb267bc1834c6948862", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"a1f0baf5320a27d28fbc1a71dd3e8460026c6b4a6f732f89198716eb0c21d419", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"6b2b76c27396f57d6bb2def2f6439acf8179d3fac342ae209ae9ab2ac226bfbe", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"7f13a6dd6908c9d147fd1fda3dd76b82b860d364cee43a4bc6149a2de8c1a2ee", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"981e79c216fa8202d8e29fe9f89a8bc6e08ae329f8e23043350c0ecd8f08b63d", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"ac13786409ff189df7cf9d3d774b7138d0446c5106f86691220d52ee22378921", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"358dfd5735f291bab3d40c891665954e8ad084b3bf6a6a745bfad1921abdcabf", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"e2bd8b02148bfcc8da967742026434f75163bf353ed3aa4717ec2fbeb9062225", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"89ef1c960d74635c8d9d4fcd3d340eed3ca5cda71bb9b7876dcb45df5dea12da", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"80210d954ef272df7a0e5aec0786f674661caf642571752c1900e864e8b861bc", Type: "InvocationTransaction", Size: 481, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"72ea26042a7dc49ca22ced7b8de6d1d5f98e4b9b69c0ff480397d35dc042fd6a", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"b9fbc9ae3c725693258dd8481c3a12deca994028037cfa2ee5336541358608a5", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"471ceffe1f29ec5f3e5e7a8901584308ae90d73bd1643a30f5afd5fe63d9012d", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"8484718bb9f7223ac31a388e5e1864c4e642b377b1e723328c523c3a5154e033", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"99720a8349953f8b81c883e43a1a719c08ae0d9a44d540943c382eb582d3f725", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"aae6fca210628e1184ab44421191fbe4a916e5f699abf08fd0391b9b2e1f2b11", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"fd8574d6e7d75654ed885fd4b631b3da043f901570d7dadfdee48871368b1d5a", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"b68dd8d7468cb1bec52b72f49c537f1efc7a36dc654dba9ec06da34415a32cb7", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"831e5b8b7cc4a56b88458beb39122c3114931142560d1addc5c9f1630b979671", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"7c63e73e367b4b759e051c89b46957299266e4be5f9f541400b618c346f2bd8b", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"24ceec1dcaf4c60f42e88d2b979b3374c67f62270e8f9482f1e11601f5693309", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"d2d489fb6eded55189738eabe30f6002c2612559878d0a488c3dc7c964dac7de", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"59431eeb724c8b3334abaae241fe67c887c3f0d26ee201b954bc70b46fe42c81", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"ae4e1ddd707d51a84f600f25dec830c7499dd2181c025f2679f19e1bd91eedb5", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"95595dadc68832ed7a430c236198c991c97c23db404f3ce2897dc10c09061ca2", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"0dc39d1e42071706083eabf67370e30b508098da5b4c9e1776bfeadd289e2d6c", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"fb5fd53f66b778f58d66b91c41bf2bd32a53c78a819c278615629e38b40403e0", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"d3de6950bfdf37f2fcec87933ad27e6e529853f4273b41a67e9785885b7adb46", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"f1215baf523bde8c2909df09d974e5f005c47ef9b5ef24e51d51f336658015f5", Type: "InvocationTransaction", Size: 462, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"df98c84a430213509e024351e70cdba2d5bd24fb318c8062e6d17322d72207b2", Type: "InvocationTransaction", Size: 463, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "cf7b3bc181770d57412cc24358dfe36625502cc87deba950ea377b3352a45af2", b.PrevHash.ReverseString())
   assert.Equal(t, "4367e156a7d48e4cf287d3788b3a5da79728cb5d6c9a8a1bcd34e2c723bb07aa", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1527280663, int(b.Timestamp))
   assert.Equal(t, 2312635, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40515eafd35ac7ec3324db57cd8ae2b5cb58961e53108e3cb470ce2d2281964cb93bf6645a16c8b26d5ee305f2b0fdd93364921dba71507653529a1fa4a208ebb440b58f83fc498ae1bb6926f2223e7828ac8fc9e72def8d753f8951fe0deb2b7fcc573cae88e59e08b942645dcc534326dcefb8761f7cde9796a0e342739088bcdb4041c3ab291fa547dcd1327187708ad8f2b34a5d6fe7270320f80cae0f3653d9df314fddf7dfd8e043cad275cd1a5bab2da51f84b4c67213bea6f7a32a2d24408f40a0bd90dad41947cc61b910f989dd9836d58e03280e48ef11b6a18eb25a780c78f0d26b2949630cf652abe8e09efbd8121c9a0a08d8d4840b1e3a1f8929bf77d0403afaf6bc67326ed4bf105c56b9200c78293a42c4a905d61ed83ae37b9b984a296f5c1c0ec7dfff12a40b40b2f024f4182c99b9d3b7dcc8de0cc24b57f9da1ae3", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001588453e70f6bd0ca62f49b4eedfcd82e0b855321fdb5995b22e0b649d54e8",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 38443, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode957(t *testing.T) {
	// block taken from mainnet: 001588b827c03939a19224172162f3e3239de9f557421f0d8f2a2d3d73a56d29
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 13 trans
	{ ID:"c322f9a48aa7c75e2ff7879e60120d68c81582c8222396d8a1c006b3ec7acad1", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"634ab61b7841f606b4ae579271805b777f4222ba53697c5a9e9d493c56d8cb2c", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5eb14cb6677411fff376d992e58d38e407701e707704223a98d561fc5c106813", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c8964a713731a7a572ea7bf07f22fe22efc6a2010f1e855691789c57ec66bdd5", Type: "ClaimTransaction", Size: 271, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b274efd1e98d96eab4930d26616b37058d28d0bc4825667752f4fa96446b208f", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9ea18faebdac0f907747ad98536b7eafbf81bbcf4a6158d46eeb60be6e181810", Type: "InvocationTransaction", Size: 457, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"c1dc4a798738ff0848d0a3bb0517562662d93cd9c949ae811c74c6a424ae28eb", Type: "ContractTransaction", Size: 211, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"60fead6c469255d54f54c0bfbc18ea3c27e2cbb5533ba6cbf89436dfa3fb8387", Type: "InvocationTransaction", Size: 484, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"d6c5e94df9e8c9c447e0a8ce29952225c75c400f8538a9295433b773391079ac", Type: "ClaimTransaction", Size: 212, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"ecc1ec21f210f4ca17288159184409c69405d4a405d0fa9d48f685635df3edf0", Type: "InvocationTransaction", Size: 465, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"88b0a967ad466a318fe519042aabf58ad6a131b4d6756c9ba5bd9cbb8c11cd41", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"d429b6085a26d7de53f537f2592f29ee55f5d1448924fe4bcd29ea64dbdd996f", Type: "InvocationTransaction", Size: 465, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"807b7b8f603ece1fab4c5f4e591c5693eb975c5f37e25ba7cf4df23ab2619187", Type: "InvocationTransaction", Size: 465, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "98c7713ae06c32b3c827ab2edf758a2d5fac1bb50561970880c4a6c13e08e6d3", b.PrevHash.ReverseString())
   assert.Equal(t, "7b566e541ec1a67ef40cb450dc822068f92865ed1dd9b6bc5ea6f15f6a63dda5", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1525961412, int(b.Timestamp))
   assert.Equal(t, 2250792, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40f4d2301e5e1238d8ff2b8ced20b224aed515c4e77adabf48aa7b1398a28082cf82bdbb55ed39f83f4bef611c18b0e088b289920acc6d396d329db23bf351f6a440febab8bada920f0dd1daa21cf980e2627e9d175e55a6713c6824656b0c5fd43ea9660c904d442e4d357cf7113d92659ab8a173320836828cf245f624a6f69cee40c54bf70d2a934a8127ea6f539123a172f2152c886a241ec552065280eeff31a96bcc56aa18d7ea5ac3b2e8b9a71ec8efbac50239464ebba37c24849503c91ca94068237621c69b3d508a2e6489a56f7f131c1c651cdd286f7cb4b39cc003fac2b3769144d02fd6ed51c2368b829e44d6b71b4982714d5f91d299b2ceb6ab641aae40d0f1ac8797f53925488cfd4dfc37c531f7418b06caf74e9d9085fd58776f791303b40c8c6d29aafb049fadf1109c0429609b566f3540fd91c6f8ecb45ba3067f", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001588b827c03939a19224172162f3e3239de9f557421f0d8f2a2d3d73a56d29",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4620, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode958(t *testing.T) {
	// block taken from mainnet: 001589f5eb05098ea433187d922350cc955e665e52a22c9d7bbf13b783b7b1bc
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 14 trans
	{ ID:"3228949ec94c77903516a49f7bd277281ff1ab4b190d66ee31251645e353c5b4", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"650d544bfd551e06dd0030c0c1fd1e7b3c4ad5395177148ee2782a775851729d", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c24fc5c73f2caaded671ab3cdcc7d523a6b5aa4e0eaa7ddc03ea211628d67b71", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"50add5ae0b139831424e803e1e1caad9b201a49df90a9acbc841be9baac5a314", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"981ce4810b236c87daac4fe33ca621a403116d7eb3acbacd520f0cb2ce624e01", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a3fb991257261a716fdd173aedb2a747956dcfb530690f4fb60e1e18b47b427b", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"1bd6d41876c580c5f266977a5ba0ad6f8959e11a8cbe682a58efbe15de2e35a5", Type: "ContractTransaction", Size: 1830, Version: 0, InputsLen: 33, OutputsLen: 10, AttributesLen:0, WitnessesLen:1}, 
{ ID:"497abdb911b1911e97dd716f8e47b5e7fad65df7daca962cd5ceb74a340a4e9e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"94146227100ce6aaada91dedbf96e641691df691baf5d052a40011cc8626276a", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9b79b32866f132b49d99f30acbc7723b85ceef0259ed53f1231a0f34ed0e5313", Type: "InvocationTransaction", Size: 294, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4c86c2484f0abbe7606d84c1cb0cb979f93e42df7ab8f174370130f4049b684c", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"32a91bcc08ab9b998be3733c186709b455ed5d9ba226c0d0d7cbfd5a18867730", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4ce8156686b6dc4c16c7176eec0de30a34f249f75d2154b0321cdfd37cb81393", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b96d1cbe5c750ef96f46497a2a6ba1f37c672ae984828571b907a7baf7b1fb8b", Type: "ClaimTransaction", Size: 271, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "aecbe87e5d40edaaf69a06895c525230485508f093642325ee3f70f81e7d0bd0", b.PrevHash.ReverseString())
   assert.Equal(t, "4a99a7a2e429ae525b65527bc87080360f1ce96370dc496f76b5130d53c1e57c", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1518657137, int(b.Timestamp))
   assert.Equal(t, 1925653, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40906ae7bd2e9b4215ad28544c945fe11bd592601392a44b9c52b545d4223e4d3b887d70240447b5e741d30c64f88940b6f297bc98ab8b63eeddef3e3f5250949a408f5b0ce3fd98d01e125215188636c9b8d2e7c5c7b9a443cfcd031cff37700a2ebe534caeb7ff9132998d2a3128612a18e4ea69984e1a9f6bd7685127e098c8c140b0045aa796d5d133c860153fe74ea1060567f057a1cb03b09618da6ff50334d0b19cda450760429313274588bf0891b598e047e002e02b995ca78abaee2db47f40d4adb2f65e024ea974de0b2fca7bda77c6b377921b970d4a180c51b4f721df3e240d0b43356eeccad2b793054e99e12b680d4a68ac57886ae512dc81ea110ef7403553bd44ae24732b63a2092fd48b304a5f43a11ae770980b6eaac80eea38473afa4d99eac4f9c6684fc6c08b0dd85ce34a822d6ac4d7cd1c1ddf612bebe78be6", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001589f5eb05098ea433187d922350cc955e665e52a22c9d7bbf13b783b7b1bc",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 5157, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode959(t *testing.T) {
	// block taken from mainnet: 00158d8f7fcb3d075ce288924f883f2d744dba070f2d0dfe8e8cd3d39be14b72
   
   rawBlock := "00000000fc66640938aa5b03ef056f8f9e9a7985b104b2bf4c483ee07b0e783efef4d85d0a4b64763adb9e0046e7ca8148ab050a2fd354c887f7c38380c3e1f66c3e8b57d51b015a05a51700110841c8873792e059e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501407c21c197dc16198b90f5b503abc3df0a9f94fb897e55e3931f178424d004d7d3eece533a7964060dc388ab107ec82fc8189b6f95859f2c854b84ce48cb351fca4022b500942a4070ba08847a63685680f613d631076d733f6a97888586e6be7dc37fa9f778a368a43d79032e2c5c9ab030188920417c5e98a543638068d767b71140002278b32a87b3d6f23daf0b68c229d603833bbec1c7f108137e4f3941233d83a26fb801f6f87a2611048928242e8e101b07875e89062272fe33ff187bb6e12640dd0ab20f559029a8f96c14d177de5d29d983e8b47a8ec0eff8393694c6f8283865a5e68c5afd8780b9fadf8a0d6ec0faf16d1a12dcfdbe52ef752fa47fcb09dc4057eeac4a3a65129891c0b8b6f471140fb3057439d3785cda3aadedadcd63baf249c0defa26783f1e1933b8fc33a3f0d7232f0185cdfb9d64727060b15a405e7af1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae020000110841c800000000800000014f2bd74c7b7301619b8f2251bd627e44d8151f9ad994d2dc558496e73fe9f3720000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5005ed0b200000000e783a203014795c09125c1e7687a69e95bbfd0a60141406095262c5dd31c41c4954c3441875c90f3317477a2da0285e6422fcb8d66dfc698481f5c367540284a9e9470c19e96ab0d4f2300615a9c7acb5ab1ae543becc7232102383ce330f27d8d38cdafc39b8fa16133e57e3a3ef7b482c8fca8fc218073a419ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 2 trans
	{ ID:"9eeed0edfe7e4205a308d39c8fb5b686477f2ebd0881c5111ef9d1831340fa86", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"3840975552da361378259c1a61f780d2c4c8863eb2538ce139cd47f49cd8a321", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "5dd8f4fe3e780e7be03e484cbfb204b185799a9e8f6f05ef035baa38096466fc", b.PrevHash.ReverseString())
   assert.Equal(t, "578b3e6cf6e1c38083c3f787c854d32f0a05ab4881cae746009edb3a76644b0a", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1510022101, int(b.Timestamp))
   assert.Equal(t, 1549573, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "407c21c197dc16198b90f5b503abc3df0a9f94fb897e55e3931f178424d004d7d3eece533a7964060dc388ab107ec82fc8189b6f95859f2c854b84ce48cb351fca4022b500942a4070ba08847a63685680f613d631076d733f6a97888586e6be7dc37fa9f778a368a43d79032e2c5c9ab030188920417c5e98a543638068d767b71140002278b32a87b3d6f23daf0b68c229d603833bbec1c7f108137e4f3941233d83a26fb801f6f87a2611048928242e8e101b07875e89062272fe33ff187bb6e12640dd0ab20f559029a8f96c14d177de5d29d983e8b47a8ec0eff8393694c6f8283865a5e68c5afd8780b9fadf8a0d6ec0faf16d1a12dcfdbe52ef752fa47fcb09dc4057eeac4a3a65129891c0b8b6f471140fb3057439d3785cda3aadedadcd63baf249c0defa26783f1e1933b8fc33a3f0d7232f0185cdfb9d64727060b15a405e7a", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00158d8f7fcb3d075ce288924f883f2d744dba070f2d0dfe8e8cd3d39be14b72",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 888, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode960(t *testing.T) {
	// block taken from mainnet: 0015950b13e4b53ce410a5f2912659a01e665fedb2254f38480a5df611bdbc16
   
   rawBlock := "0000000012bbd3cd69c848612c7c9bac1b45d6456ed1e90609916ca98c22cef9db06703da9fe7c488a89104c72c25817e1f5302ee03c75b2da9b5ecf496d714431a4095f7f0d165a8ca8180061f861b46284e49459e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014030c4416b6af9da82ae46d57f6916b3f771f96173b9d70447f5beaddedcbfda5bd413aef05fdbae70259923152ff347a7f2f4a687421a86c4e7144301235b3ddc40b115a5310cf4c66eb04e1b027eb6bff96844a9bba09477f7f2e2981de4ee11147bf5434d505c10c4fbd6920924378ccd1deb91d46af59b399c28e7fff21caf324050f733c0d9f3f929f39fe256e916cb1550881532e33425bd6373de767a15e233d8887417e52657dc174b88467c1727c655ac1dc75d33eb1d71ddd9d48499f54d405a58be94750c0ae5cf9a7cba6d1a58924cb1320ba8e8999e3558f98b6c8f94b0245254429e38dfe834b237a22de777c47e3deeede881d0da0777340029f7035c40aeffc10d813261f6d8dc2d3e041cb2fa74990600776358bba002ef61289b9f97f4272a92f5b701345860633a3c4c7cc422b0fe65a901da36cec53a23f447fa58f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae09000061f861b400000000020003069a9b4e8c92efb085526d34e1ed93a69acb7ecad06a102e3a35b08f71725d0d000022833068a9f7334a039d95747f2a3195cda506f056e1ff729749c618453b88d900005c150d0716ef76fac08e3543ea99f83de0096624386c3ea6836b7bdd84c996b10100000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60b0ddae000000000082ead3ee7596b15933ea19a66291b4e823cb89a60141409f09c1e845c834036e0576545b93150e3ca668396e55eb626436106a1fd247acc4673419d68896cd8632fabc5f03644452fbc0d10ed8dd9c901944c69899699f232103192a5ede63651ad8e44069e38bac4d20f6337e790c00918ed1fbc92e94a13636ac020001eda3a6a7661e8c34278913743b3e03324f27c64e93412cae2aeb9dedb1fb54bd0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60e878000000000000c0090a8621e9c3e3778767cc2aa7e6ab14a2de7d0141400d06fb725a36f42968b6e2ed6268791ae66641958cbb873de71cf0d8973abdab9889c9c363239713a0605b9c61156ca138122e1662cbb73689e9bd511f1585a5232103798812e9444d921c6ef9fb26a2973b228872bf8dac29171051424673b8738294ac80000001bdaeb4c7bc369fc763a5663c3f58d417f454c22b430ebcdae9511479d075956c0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ca9a3b00000000497939dea4b32cea50730a92a15487a7a53cb19a0141407623868fcd56caec91dce2e085245aa9d94b72a18b99ed534ec23ace6b37eb7746a0f89aa0fcd5a28bf680d3961071a9cd66724d3cf8e08f7e7589cbaf6e592e232103e5d8df9cb3fcc99fbfa57b9ef5c281f2eb79a36b78c54d5f62112ef0814eb656ac8000000187903a9de77261a0a6b16e2b1a0b9803f1bdf2d009eb5b1692318c9d38073ca90000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50046c32300000000b492236b277ef70e27a841fa5da060f475b1b4310141400ccbda524af018dc3f71c1093033276788d47a8924dab327ac7e4dc7354bef9a82ff8e44c3475f265f9b31004bc9d36b018f7b8bc6d02150a60f9434f78c15a5232102d79ea3e34d59643f1bf60119000e674e5ac84015c5cd75ca91d352d642464c1fac8000000101ed1c97e15acdef845c71c8c20aba7a671e7ef80c554e747526bd06fe2f3fd0010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60809698000000000002cf99de95e8f7220e3cbabd5f69b02a9fe3119ce72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60675bd90400000000235a717ed7ed18a43de47499c3d05b8d4a4bcf3a014140ce2d81fedcd09fadcc568e4d4213bcaaffb60cb33ebaceab362ed68d38f8e0c7f3097ac5ec697da8a951d100cc0a847a08c535bb0a50121395178e62ac38e04d2321030ab39b99d8675cd9bd90aaec37cba964297cc817078d33e508ab11f1d245c068ac800000017dfb90e3e0fb7ec611efa6e3b1e630dcb54426f3bad4f34315dd08edb50996e60100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b00000000e22924472966af2bff6c66c02d5d924c9eb236ad01414085e792e56752b58516ef8da402c4d9abe832e3181b17c39646507d5893b800508afe097b5f3835e3517e099182922870d010cd0d46315ca02668310dbe622b3123210281f849804e4bd3c2d321dd3cbefc262295b7c47edd67eddcbe7da35996208d07ac020001829922c86f01b329ddb1e97f5f0c9105bf95ea1f13e48b765a3bbc168b6ee7240000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c603002000000000000716f8ea9df3a52d01cf801ae1b87ad0c58bbbc18014140a7cfdb6fe29eff32798a878098ea48ab4941445531853a69becb7e0d06949f49913398a498269819d60676e4698770e8a7b6fb29bc3f7c18b2a7f08f86575dd5232103f59d4bb47395eb608b9c7da468b0bb08190bf0d55ad67dee1781306623bb3f8dac0200010b6b9b736104d62775b4038af9c7519f86171edb19a585bc2587f38397afff140000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c605840f6010000000068a1a4c7cbd305d61f3e82ccdddc5be978e5f3c6014140c8dd2df062dbeb0b0531ef1683990bac7ca31c07c1ab86c10ae071b520aaee67c8244e97bbeae0567790873f1d340f83d47fb0da08d05a7c1f42f2d65ded85d52321033385235cb8b63766fce60be16bc97f8b6be622048b6505805d1add8c505f6324ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 9 trans
	{ ID:"af64f9dae56f2638b75767c8d23ad39d09213c9335e99b800340baa9b7f2123b", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"78ea102d98d8387018ae5c1be5a7e06d54f45e06a548cb6c525ec2dca68ed667", Type: "ClaimTransaction", Size: 271, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1de35ef7983b02dd4c5e8d34ca69f7d0bd08450752a33fd1615aa8046fff2648", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e8a2cc8570845bb43fca760d97ec90169168527bd5886af7a2f57f83d8260418", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"65cc18901ca52aefbc7a1f252bae1f8c457dd1fd0b6f80a00d940361e5759771", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"2f7d8c285a85f62fcfba5cbb91f5dbee225a784d4c28cba987d8c2e431956353", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"2eefa1b30e7d5a6aadf9490677edd943a2dc22ef17e9bf80258b87995babbe36", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f0484d72f52c77667f221ac63477406cbb65db8e0dda9a069d0607e182696953", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a2493c799dee2ea3d4883c4d9658686f16bf4e3746357710efc9a24e56739501", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "3d7006dbf9ce228ca96c910906e9d16e45d6451bac9b7c2c6148c869cdd3bb12", b.PrevHash.ReverseString())
   assert.Equal(t, "5f09a43144716d49cf5e9bdab2753ce02e30f5e11758c2724c10898a487cfea9", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1511394687, int(b.Timestamp))
   assert.Equal(t, 1616012, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4030c4416b6af9da82ae46d57f6916b3f771f96173b9d70447f5beaddedcbfda5bd413aef05fdbae70259923152ff347a7f2f4a687421a86c4e7144301235b3ddc40b115a5310cf4c66eb04e1b027eb6bff96844a9bba09477f7f2e2981de4ee11147bf5434d505c10c4fbd6920924378ccd1deb91d46af59b399c28e7fff21caf324050f733c0d9f3f929f39fe256e916cb1550881532e33425bd6373de767a15e233d8887417e52657dc174b88467c1727c655ac1dc75d33eb1d71ddd9d48499f54d405a58be94750c0ae5cf9a7cba6d1a58924cb1320ba8e8999e3558f98b6c8f94b0245254429e38dfe834b237a22de777c47e3deeede881d0da0777340029f7035c40aeffc10d813261f6d8dc2d3e041cb2fa74990600776358bba002ef61289b9f97f4272a92f5b701345860633a3c4c7cc422b0fe65a901da36cec53a23f447fa58", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015950b13e4b53ce410a5f2912659a01e665fedb2254f38480a5df611bdbc16",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2434, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode961(t *testing.T) {
	// block taken from mainnet: 00159c0a92da2451b0f304a641c70ee9b0d07cf7fb03b7ad518f3cb3bf7efab5
   
   rawBlock := "000000005e78d700843e041eb319f409e174a2baabd2b83e4e3202fd3badc6d4784aaff4b4a039db21547e0e95df65e463692871425dc283002940d10a62e726e4ecf3b2a5e3315973ef0e00092beeae0370bcc759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140f69ded78ad87c2dd58f46543348d1bce87c175e91441f722633f6344a73bf7417880f81f5cc2c9814c7852b4d3dbc159aeac9186ce486d15fc68320d326f9412408848018689c5c5058894df55d6bc9cfd217b257a8f444c22feb2946406a99c25ff0aadeb0f526d44c19ff0b9f384ed01c545154993f2738381034805a01c8ad2403bb4dcaf2c4300d4b58d76a66b5f1ac5102a8029ac291d9693e4241ea89fc1b2974c867bf6cb9f3916de08fc5da89212d057600fb7dfebc0e63c1e43c429166640407d3deafd8e2988791af99b73460a700ded43b118e69dfe1e28ac3781c3d9c8e53afb4e28501169074b6370d691439c5ea473b6b6be3c6f9c1e269e741dfe8d40e1262ee813375da5b69fea20c16fb16a80ae901190f1ea9d8a0e14cfead0c6aceed4273fb5f12914bb5aee8fa9a6e8ed7756f289ce47156cbed5d228538caa5bf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000092beeae00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"b2f3ece426e7620ad140290083c25d4271286963e465df950e7e5421db39a0b4", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "f4af4a78d4c6ad3bfd02324e3eb8d2abbaa274e109f419b31e043e8400d7785e", b.PrevHash.ReverseString())
   assert.Equal(t, "b2f3ece426e7620ad140290083c25d4271286963e465df950e7e5421db39a0b4", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1496441765, int(b.Timestamp))
   assert.Equal(t, 978803, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40f69ded78ad87c2dd58f46543348d1bce87c175e91441f722633f6344a73bf7417880f81f5cc2c9814c7852b4d3dbc159aeac9186ce486d15fc68320d326f9412408848018689c5c5058894df55d6bc9cfd217b257a8f444c22feb2946406a99c25ff0aadeb0f526d44c19ff0b9f384ed01c545154993f2738381034805a01c8ad2403bb4dcaf2c4300d4b58d76a66b5f1ac5102a8029ac291d9693e4241ea89fc1b2974c867bf6cb9f3916de08fc5da89212d057600fb7dfebc0e63c1e43c429166640407d3deafd8e2988791af99b73460a700ded43b118e69dfe1e28ac3781c3d9c8e53afb4e28501169074b6370d691439c5ea473b6b6be3c6f9c1e269e741dfe8d40e1262ee813375da5b69fea20c16fb16a80ae901190f1ea9d8a0e14cfead0c6aceed4273fb5f12914bb5aee8fa9a6e8ed7756f289ce47156cbed5d228538caa5b", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00159c0a92da2451b0f304a641c70ee9b0d07cf7fb03b7ad518f3cb3bf7efab5",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode962(t *testing.T) {
	// block taken from mainnet: 0015a2649e59a3afa21450f01edb2a21c8eb054290dcb667230679dc40bc19f1
   
   rawBlock := "0000000095c4899661040daf4ce4461d2b040437ac0b0e35657b0aad1540dfd26adb2ca20aef2c04fda533577a5cb6a42115ceb69c43d963d3b691307ede319f3e3d2d10e63b88590ec11200ac3051b6daf1773a59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501402ec140d59c8cb8b2befb56018af86b66333099ef1c94112a4c19516ea92f9c8b3a1dc012bd6dc6a9cb0c37599fc0cc56cff6459850238a1287104a9a43cc702d403ed5ad2933ce192abe7ae238ac1c85599fe30d03f8b639b8444f76f70ceaa643f9f964acdf85e6835901a48750618a3f3e950a241830d582c7149c3bb94dced0400725925fe4c73369f13725e835dfc87f15fe559b8a7bf79461016db7da228ad92a2e9de266ce79962312f4c03c54fe11acfdb89ec2d1b389aa8b524d4ed4b79c40222613e595a56818827f4720750add9182330948051738961af302b392c230125d94d2405e630c92528227d08b1d6c85eaf0c2bc91914f73fe04b587e4f7dcb340cfc710fc52190f3690c2fc438ac4e30feff32fefc2e579128cfc0f32c76da1daa9d9226750f3ce0b99a005b7254564588b52fb1acf26dc536ae624d5256a4de4f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000ac3051b600000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"102d3d3e9f31de7e3091b6d363d9439cb6ce1521a4b65c7a5733a5fd042cef0a", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "a22cdb6ad2df4015ad0a7b65350e0bac3704042b1d46e44caf0d04619689c495", b.PrevHash.ReverseString())
   assert.Equal(t, "102d3d3e9f31de7e3091b6d363d9439cb6ce1521a4b65c7a5733a5fd042cef0a", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1502100454, int(b.Timestamp))
   assert.Equal(t, 1229070, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "402ec140d59c8cb8b2befb56018af86b66333099ef1c94112a4c19516ea92f9c8b3a1dc012bd6dc6a9cb0c37599fc0cc56cff6459850238a1287104a9a43cc702d403ed5ad2933ce192abe7ae238ac1c85599fe30d03f8b639b8444f76f70ceaa643f9f964acdf85e6835901a48750618a3f3e950a241830d582c7149c3bb94dced0400725925fe4c73369f13725e835dfc87f15fe559b8a7bf79461016db7da228ad92a2e9de266ce79962312f4c03c54fe11acfdb89ec2d1b389aa8b524d4ed4b79c40222613e595a56818827f4720750add9182330948051738961af302b392c230125d94d2405e630c92528227d08b1d6c85eaf0c2bc91914f73fe04b587e4f7dcb340cfc710fc52190f3690c2fc438ac4e30feff32fefc2e579128cfc0f32c76da1daa9d9226750f3ce0b99a005b7254564588b52fb1acf26dc536ae624d5256a4de4", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015a2649e59a3afa21450f01edb2a21c8eb054290dcb667230679dc40bc19f1",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode963(t *testing.T) {
	// block taken from mainnet: 0015b6976ab3d9e48edd53864c4d70d418712c43d6346197ceafb61301c2252d
   
   rawBlock := "00000000475cbc50ca9da193fbc0b8179fd0bec6885cd93dd7a512f2f52d53dfe02c0299274b4ccc20fcdce12a3d94c93b664ebdb62c8d13a9d4f94643bf81485238c18ab6df055bef2c230024ba5190edf4637959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501402694171ed7d1f5b767713a01b01788e1939163786eec83120da41ea092c52e80dc1fd4b8ece2b03d298b1c24830c7c76b2d386636f4e4db42966b9dfbd3264c240f5f74e3b877b1221a0666fd7225b95196d412fd2ad891365e79f8c4f80dc16169fe60e0b28a4130236a43d5f253ec293ba542030a592b99e10382646e98f1dbb407d495254456a3e8fccfe3854baef0bb14a0532229610a612cdafd260a799d1f005be1a078f78a5e4542f9664307820f2b5946345285f6485189a541600d4be02401a79e39a9022f10ded4a9c89e287ba4b82e299525b8fc35be335e290dbac762220b14695598a2699f6eab7483a1524d092c9e96fa7dd757fb295dc31403323e8401a562513ea2e9daa72e2546c738c265d1b6d14b9127eefbdb13a69592f42344686e7f1ec39499e3ae992a0fa22de8bf310c6129779c2897efed29032969892b9f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae09000024ba519000000000d101530800e1f50500000000148379af4fd01a6fa3cdd9ddc8eb983fecf70ec82c145bc11e65ebcf69a91e1a4ea6148cb804b14f168753c1087472616e7366657267f56c89be8bfcdec617e2402b5c3fd5b6d71b820d000000000000000002205bc11e65ebcf69a91e1a4ea6148cb804b14f1687f0153135323731313135343337353266303935333138310000014140ce58d60d46c09b53895726e360b120c1caa27dafbeaf767603e4960c516a8b3bbaf73e2235698b82d31fd36d6b2a6d326b838df469eef3a94a5e2eccc9712a3c232102b764064a481faf188c04fc5786d621a8eefbcd346cd26da6f0525dd34cf5bb66ac80000001ff9fe786e2bc81bca34bade27421217b7f793bdda071738d078ed16a3dc6a16c0000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000baaf4091236b96af17de99e65b313a04d4742a1d9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5008c86470000000009fde90117beb5cae826219359ae9fca7c535c4f014140aae435742f5df91c5cbae240145a29b9a1c476959599428d6b5bc674c478e25c53c14efda7bce62954ebc789f529c0ce4f25d0b5d92759243e2a4ffa803c5bfd23210245190c9f7a5e1f07d8aa8350a0e97b280d70d31bd022a8329378543d80c3c247acd101870892704c00000000000858d96a300c0000001432e125258b7db0a0dffde5bd03b2b859253538ab08d086ca0100000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc51490d61b31c27407aa9d9326d887d1bf97acb0552256c1096d616b654f6666657267bd097b2fcf70e1fd30a5c3ef51e662feeafeba010000000000000000012090d61b31c27407aa9d9326d887d1bf97acb0552201b1f2050bb0a07f847dde9ae109f2719f99efc13eab4d917b233be2015cd5514b000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70241409ad592e21342d7f8d904a7b96b95e43447a2bba2b0e9a91343d37ed9512b2c9876c87e3d30b62a3a09a90c3b17d6356f5e7ec361d79691c54779411b1ee6358b232102c85183e10f63599626d7160fb49c66b0c7811ab2d0f3f81c1572bd0ef3c3cd77ac414007d9ab91406cbaeb0451f23e0d2f93309c2d2cb92a409abe886090f9090b9691a101c3157be63a86db250f2588ef3af3e26b5505d220d7b483ec216b5401b321232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd101530800e1f50500000000148379af4fd01a6fa3cdd9ddc8eb983fecf70ec82c145bc11e65ebcf69a91e1a4ea6148cb804b14f168753c1087472616e7366657267187fc13bec8ff0906c079e7f4cc8276709472913000000000000000002205bc11e65ebcf69a91e1a4ea6148cb804b14f1687f015313532373131313535353735313463326564376438000001414033bb32e5461a27489bbbe46d63373f6b95f44e383a77e690be359bdc24a9f6f95a90ab5337e810f58f2c5bb27069f5e444a0cc8064417e34cfa9d9dee60edee4232102b764064a481faf188c04fc5786d621a8eefbcd346cd26da6f0525dd34cf5bb66acd1018708eacc5600000000000800c002da170500001432e125258b7db0a0dffde5bd03b2b859253538ab08009ce4a600000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5143f32d215691eaba025be0903fa634ec71c234f6456c1096d616b654f6666657267bd097b2fcf70e1fd30a5c3ef51e662feeafeba01000000000000000001203f32d215691eaba025be0903fa634ec71c234f64019d09622958299fc7a3cb973344eff8f447239907b5f05bb7adbf32c5026c5a44000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70241401c08f6f7b25c8388a34de666532412f4d26c480e933ce303eab702752bc9abc143e378caa7f1d3399cec7571a373ca58ce1aceeed2f75f570f0df031e2d36dbf232103103a85c18dc1a926f299dfcc525b968ba26f549167dfaab1cc09c6aa6d1c5b8aac41401b30119af3148cc0b6c7ae5c7035f6fb75aa20d7e6e6472902df1c807d9b5e1daf5e4cbbff70cc7c2d0d69ca49edcf787926a1e144a08ab4f875bcfc612f2454232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd10152086f71af5aa90000001432e125258b7db0a0dffde5bd03b2b859253538ab14a06d2d5b93651e03cd8e1b05cf08ad18801a3e0153c1076465706f73697467bd097b2fcf70e1fd30a5c3ef51e662feeafeba0100000000000000000120a06d2d5b93651e03cd8e1b05cf08ad18801a3e0101df5f8a910c94fbfbe08dcc7eaf32d8a65ccfdd1bacd5a1139f502409f72a8e29000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70241407848fcb521f32b027b394938e6846a2dba4b23ecb3dd71f8f17a664479b3ce8278ac3a6a41ea701ecf361f3211db5935b065268c3d75ccb7857306943d3d9db823210308bc5a89d295878192bcc4a128064e392c846ca51433e5963831dcb049e4cbc5ac4140bd9ad559e1efdddfcc7b38849542c0ab95d8bf6d26e264cf7392485e794e87dac5918d188697500a4798d770ea9af4e4e1d4a770a98bfcdb123d7c611aaf93b1232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd101530800e1f50500000000148379af4fd01a6fa3cdd9ddc8eb983fecf70ec82c145bc11e65ebcf69a91e1a4ea6148cb804b14f168753c1087472616e7366657267c5cc1cb5392019e2cc4e6d6b5ea54c8d4b6d11ac000000000000000002205bc11e65ebcf69a91e1a4ea6148cb804b14f1687f015313532373131313535313738323538623930336630000001414041b19de026c69d5626af4cdeb22e7457bdc083dfdee51514e1f43d5d2d458ec4b0c40d475094d42f7ddc6e297f198eb29f02e83293499131a4cc05e085f547d0232102b764064a481faf188c04fc5786d621a8eefbcd346cd26da6f0525dd34cf5bb66acd101530800e1f50500000000148379af4fd01a6fa3cdd9ddc8eb983fecf70ec82c145bc11e65ebcf69a91e1a4ea6148cb804b14f168753c1087472616e73666572677a9aade2572b1507599a582eb1f177f31fd6867f000000000000000002205bc11e65ebcf69a91e1a4ea6148cb804b14f1687f0153135323731313135343738333162613663663232320000014140ff9e3261ed7db1c9e7b2ca2569a9d7eb9cb8ddd5b41872873929d6cde80d4cbe120f92f86be5c8287297a7d9466d30e34069498b99ad4f8b33dbd81e226939e2232102b764064a481faf188c04fc5786d621a8eefbcd346cd26da6f0525dd34cf5bb66ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 9 trans
	{ ID:"8cab2f32d7dfdb92663fb069368eba66baef85fbdb6cacb1a2f2a06d08cd3a07", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"cee492a04184a92aea7fbf49bb3addaea6fadb0fc2a316435e8fd8d13949977e", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"ea9cd951bbd4bee0411f56090cf34abe576290391fad2a06ce889d2aba96cdf5", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"eff3cb89275075fa4440a66f2e71a762491bdb67bb2e2f460d74b2eac218ed41", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"da849cda18da83a652df089a9abfefa73f2ba26c7bd01fb84b76ad623bf92c77", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"9d6b867be4563b27fbe6f7b6b720fd1bc04f65186e69b0945c5e0e6de0e568b4", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"f5ff844800270c1a88a7fc0f40fd941ce340735a80e57734ba98130bc69fc629", Type: "InvocationTransaction", Size: 416, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"89e30675ce9169861eaf54f84d00e19cceb15bfff049cc5e4c5a589f85646350", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"92ec3a865f6ea16088f8d997dd86aab0d48cf65e29c792e446e12519b6b7d65d", Type: "InvocationTransaction", Size: 244, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "99022ce0df532df5f212a5d73dd95c88c6bed09f17b8c0fb93a19dca50bc5c47", b.PrevHash.ReverseString())
   assert.Equal(t, "8ac138524881bf4346f9d4a9138d2cb6bd4e663bc9943d2ae1dcfc20cc4c4b27", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1527111606, int(b.Timestamp))
   assert.Equal(t, 2305263, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "402694171ed7d1f5b767713a01b01788e1939163786eec83120da41ea092c52e80dc1fd4b8ece2b03d298b1c24830c7c76b2d386636f4e4db42966b9dfbd3264c240f5f74e3b877b1221a0666fd7225b95196d412fd2ad891365e79f8c4f80dc16169fe60e0b28a4130236a43d5f253ec293ba542030a592b99e10382646e98f1dbb407d495254456a3e8fccfe3854baef0bb14a0532229610a612cdafd260a799d1f005be1a078f78a5e4542f9664307820f2b5946345285f6485189a541600d4be02401a79e39a9022f10ded4a9c89e287ba4b82e299525b8fc35be335e290dbac762220b14695598a2699f6eab7483a1524d092c9e96fa7dd757fb295dc31403323e8401a562513ea2e9daa72e2546c738c265d1b6d14b9127eefbdb13a69592f42344686e7f1ec39499e3ae992a0fa22de8bf310c6129779c2897efed29032969892b9", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015b6976ab3d9e48edd53864c4d70d418712c43d6346197ceafb61301c2252d",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 3278, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode964(t *testing.T) {
	// block taken from mainnet: 0015b7145cb2bdff8900a4284ed4dbee4008faaa04f20675ce94d908cd5eb81a
   
   rawBlock := "00000000d1a7d0b081e281d35ebcad129e936828a90d14c387144f6a651065aae299bdedfd08504c50c769fdfd9f89b3ad01f104c6d6cdc6a24a5f1ba5a040fd3f7f16e0eaf58a5b51f0280016787e33d3896e8683f5011bdaaccee8c4d2555c829fa51e31551ef201fd450140d9ca00081d30f0d5669b1e6dedaf10d68aa50af132001702577672a6845cd6cc191483371160a9c54c0334de224d5f5335e95651418210addd6a9043b20e6a964006358d80a531120f14086167d537d1d9fc3d968b713e3c6fa1e32ce378a1ad29257389f80375312abe7c2aa343eb0af88bf5d5e8c9b7460df0c840262872315a40154b0556977ce3e134f3d825a77cc74afb3807a6442d057a9ef7a4807255d13c550b57435682a0c94a157ae0e6924756417c77fc3a40b78eb1bd8d52beb3b79a40661e6440e6235fb219e75729a25f1b6fc8dfc430b78b92ea9233605c5f7c3c5b3bbcb25983f3efc1d6a2bbfa8f21ef3331dac28b9d5ab5835c6851cbe5135f55406c3dbadc03a207daa624fb124260776f67d02aa3ae1a3e1799d06a800d518398d3de3ae7c72d58f8ab56878800064669ac3b428fc6ebced43d805a7125fd6703f15521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae02000016787e33000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c606400000000000000faaa0f339e0fb33f91697cbf5aac41d17921222a00d101520800b0e4874f11000014484cd8df57690eec73a5b44296bf94789f58fd78146ac062f385379796fb014b1235f0ba1da14e4acf53c1076465706f7369746726ae7c6c9861ec418468c1f0fdc4a7f2963eb891000000000000000001206ac062f385379796fb014b1235f0ba1da14e4acf029100cd3a9a2ecbced2a2f91cc6a39342a6e2287a8a9e10daadf1b9517ceeea03000021023a56b8ffc321382abaf0f0b1a7407c9488e89dbb4ac57b27922dc5bfbb10220001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70341404a9dbe94ee08b3f019ff861a19b9765fa27d487678e02f183dffdbb7fd40b20ec1a379171f7db9ed2c589c618cd37ecc86d38acf752319c8b9ec523459c6f74223210287f7d6763f6d9225bf03a109082655dcfbd7bed9947e11cb9546bb1886eb9022ac4140bb2a3f6b31e6a98b01d9717046e602dc301ffdc8a7abf3a7cd8fc0ff84311152023f50f9504f5592ca657c691e06704db454245e61d888fec81b86c2d06cb509232103daac55f46174a973247bb0a11a8572a88a8a6f838adcdf3c6af1e8aa77eca668ac4140de8a2d1229f850326a09e785a1b74f48ac3f1b0fbdccfe083e82fb1d796287ad46ad0b19b6ffa31fbcec6ffa620de588d40cb4b1fad881f599551621b42feed7232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 2 trans
	{ ID:"7c6e53d4a052ab32b1cfdd9ed8f37f3d021395de83953599f43afd4dcf517a01", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:0}, 
{ ID:"b13e2e94d905f78ef0071c88ffb7367a1a871b647f0d29acb64ee27232fc7c5d", Type: "InvocationTransaction", Size: 552, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "edbd99e2aa6510656a4f1487c3140da92868939e12adbc5ed381e281b0d0a7d1", b.PrevHash.ReverseString())
   assert.Equal(t, "e0167f3ffd40a0a51b5f4aa2c6cdd6c604f101adb3899ffdfd69c7504c5008fd", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1535833578, int(b.Timestamp))
   assert.Equal(t, 2682961, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "40d9ca00081d30f0d5669b1e6dedaf10d68aa50af132001702577672a6845cd6cc191483371160a9c54c0334de224d5f5335e95651418210addd6a9043b20e6a964006358d80a531120f14086167d537d1d9fc3d968b713e3c6fa1e32ce378a1ad29257389f80375312abe7c2aa343eb0af88bf5d5e8c9b7460df0c840262872315a40154b0556977ce3e134f3d825a77cc74afb3807a6442d057a9ef7a4807255d13c550b57435682a0c94a157ae0e6924756417c77fc3a40b78eb1bd8d52beb3b79a40661e6440e6235fb219e75729a25f1b6fc8dfc430b78b92ea9233605c5f7c3c5b3bbcb25983f3efc1d6a2bbfa8f21ef3331dac28b9d5ab5835c6851cbe5135f55406c3dbadc03a207daa624fb124260776f67d02aa3ae1a3e1799d06a800d518398d3de3ae7c72d58f8ab56878800064669ac3b428fc6ebced43d805a7125fd6703", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015b7145cb2bdff8900a4284ed4dbee4008faaa04f20675ce94d908cd5eb81a",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1298, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode965(t *testing.T) {
	// block taken from mainnet: 0015b8593ccbe103161c10200db5b183f7c3468f514edd3e941e819d13a3ec41
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 12 trans
	{ ID:"641177a07c201cf71b7230eb02043473e1f81dbdfdbb62cc68d3f372f0f70683", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"3c4058d5e4eec98098aa3fc4f72b87b8349025641a1a45c979e2146b20f16770", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"8687d7137afbf3b8742a20ef572c9c9ee6da1401b79fecec1a8b553f2b17bfc2", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c3f45ba78696c12c011492ba77686d42ce573e6efd3779366d12ffd34a8efa09", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"431f433130ebc757b749d2d548ff846e12e234cf6967965e5109fa50ad81d877", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3904bb6f8e32b08ae3dee38f7faf56bf8cd31b808447c066aafee4ab1916ee4b", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1936d74f146fe0fa7f6bd26b807e4b0089fe2b7caff005dcf50743deebfb5041", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3af5ab79f62396ce41971fe4e16fe938d152ddc63c6ea3d73c66172626eb595b", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"aca4e33c7d586bff84d7a92eed3d01e09ebec168996c43d928c44d2ae6d43d08", Type: "ContractTransaction", Size: 1212, Version: 0, InputsLen: 6, OutputsLen: 15, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a403b968e558d2a513dd837ac35cb5ef5b7138dfbcc9553a88925b8c085dbe9f", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0a63c1b6f3740aaeff3fcc6775aa6fba541a9f875ed28fa6db7d4cdc7224f2f5", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ca88a2e06db88d6b427d828c8564231211285e0892c7cb303bf7da90762e26a7", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "7e91fb14b268f5c8a9660e11058cb63a8589ccd67e3ad9879bcdeee6e3758bef", b.PrevHash.ReverseString())
   assert.Equal(t, "2954e12ff3ceec3f1e3f6254c6fed1717557886408d87123e7ba5b40e7072d96", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1518689116, int(b.Timestamp))
   assert.Equal(t, 1926940, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "406b1a45ba0d255af8ee02e42c59acb0c6be2bb5812b917549756ead62f5bd38fff9a9bf43ab32fccaf4fe94fe02ad98b873d7ecb717520284a1c40f43ecae099240398124ddaa1dd67a4f54032072649ba6d1c7120e5c2715135f326e8cf0c7f8aabfa5b8adfdf5d5da172f0ffb725e5d96de8827b48d3cc1407a3868d3b357980a40889e7b950d22a903ca153cdcf7012e153a58b3c01c062d0c9ae67fd6a9479fa55d5b452d472adfc0f500adbb7ef61e64d58cb0826528d1756015e2e48eb853aa40a587cb9989858020b89e51ed15ec15374499bbdd4423f4da73719c7a14d8af2a072e35e7839c7cf181b962dae558495086f6bc011b38d3f666ea3b561a7cf05e40461ed138b2f722f976253aa7580a2972c9ed232a12812fd3c29a571eefdcc5267775fc58ded2877bc4105361c4b2e852b6f81a3343e7e702ddd2f206d0b0ea1b", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015b8593ccbe103161c10200db5b183f7c3468f514edd3e941e819d13a3ec41",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4017, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode966(t *testing.T) {
	// block taken from mainnet: 0015d160b745ac3afad6ee2055445c2e4da240c5e1ba3f453a18cb3af9eaf51d
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 13 trans
	{ ID:"f79cb1e1b43e058d60a027fc15dd35e07485b869b49a902e2be3dbfa93892273", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:0}, 
{ ID:"9ee9e46d21a2f4e807d7a6afcfc730bdd49f1118d16c2bd285a41b49188540fe", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"14f2e92fd0750ebe0490207bb6c8d1dffecc12ddf0a1cbd6624e56c584b52380", Type: "ContractTransaction", Size: 271, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:1, WitnessesLen:1}, 
{ ID:"c5d0d4383f24f03ec8a838cd5ec96e989e1974fc67986420fa85c2f4a0172cd3", Type: "InvocationTransaction", Size: 364, Version: 1, InputsLen: 2, OutputsLen: 2, AttributesLen:1, WitnessesLen:2}, 
{ ID:"e0c40df338572540e84c25e2f7626bc99addf9d908900daa5b6b586232693f2d", Type: "ClaimTransaction", Size: 271, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"20f8fb5468aa88ac04f5d6a88b2f06f81dce767c7dfbe463d83bb37602981262", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"328f32e6a9fef742906bf8b81a3c353eed23b37ed0f4a44a761ca6f43fc1940d", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"2c12851ae6eaa255f3b14480340cc8e303df74e0ba90e1f0d1b84de17bf290ff", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9854cb777ca5bc3dd998e72faff200f5b8c6cdcd20a410fe9f2c7eb303336380", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"cfac4af7832ebe8d41715dea0b58fba3e50ced8e4df863cf834f505e352d6081", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a3951cb65abe0bca54414a9659ef25bc3caff640e1ed37bd005475d4d0357e9e", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5ab3e7ea839dd3e99abc17fcb1a93446026c22590575f226f395f4ceae3bb66d", Type: "InvocationTransaction", Size: 364, Version: 1, InputsLen: 2, OutputsLen: 2, AttributesLen:1, WitnessesLen:2}, 
{ ID:"7af40c850b6cf853c92967d34a52c7a417788fe61780f5d0969ca7a42ba66800", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "dfb5f9a41d0415df8d0992dc703b1909a5ff8d35f907b4d3cdd7ad1e2372b918", b.PrevHash.ReverseString())
   assert.Equal(t, "0aacf72f1c29f6d0157795bae25dc7f2c8580d1513996dfc6409af572ec3e097", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1536330879, int(b.Timestamp))
   assert.Equal(t, 2702897, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "4078ad2355b6fe352b4bf0662686e45ec426dde7a99e3cefaba39878b941c90684e143248387cfd6430a73e6f4a25184ec699d8c0a20edd84a3c10f8bc4c3f22d24000a1e454f42341ede28ee54c3218e64b485721b96586df0ac34750768ebfc4d9726e576d570cbd0c041cda98203ea527e31a15472bc1c2cd965134801bd310ba40cfde1e09a0c4496509d7b9a48106f3658f3f2bbe76e2dd094f90cf13e33d46743bf7923fd77abdc3d0b4a34d4ba1d37db6c832da3822247459f16065e6e04f3440752d041b8eb55e725d8cd1164270984f4ab835d4cc4a6ad44fc64648c1dd7365fa592c0f690cdb78c065f52978bdec2face5ed6ea57463cc24db7a083c195f4840df9455a83c020437849b80396458550fe7668db158645788aaa00b2c1a716ec792f0a97c663d47862666c4dbc0f8f093fbfe765f0b681ef8134ce7d1cd1cfccc", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015d160b745ac3afad6ee2055445c2e4da240c5e1ba3f453a18cb3af9eaf51d",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4074, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode967(t *testing.T) {
	// block taken from mainnet: 0015d82ce3a14674b0caa5e61c403c88189437c686454e50a291ae8c0acc1886
   
   rawBlock := "00000000c2654eacc9c5c7719df0a0e9c4afc129e8d3fbe79a44a1ac8205278edfdc6953601e0d9333db84e8e2456fcd5260f2d75a3b1c114d9ea53eb4afd544b22a4d3852311b5a40eb180045c6faa04c8f7daa59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501406f47c895d85b505f9d83f993f98ba33ab26cef62aa5a40517c397f7677583c2c25e705168e58f3a913f1663607d8ff3374550cd52abc6bb13d0d4cc20c04767740501e04a7709e4fd75f12cc0ecc0830e5e064bc0d47225c248dc6e2490766fcf0049a5051bfa8751f190b959b032351eb6b78f29717896ac8ed6e8e1f299ed58f40eab2e798815a140d25798f13f5b92b35ad00109f3be539ba2ac6ee4215d6237edce0807d26909cb63dc8e0c6ab1eb5be45962de3b4d292703c230c297085fdfd40a20281462706cc4f421a808076a55ab2457d71948d94537cb47674531bf34b639ee27e5131b005313b37520ce0b508ce3f46ce085ffd6209e34e356404f168c84047fc5e54fb91145b843a60ee661842aa6c29cb533d4ca36968124db4305549780017a000d15ce164b8157622d7e1ab236c011d9c31801501b04801b41b9c7cbbf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0b000045c6faa000000000020001ca8831a0d859488c5fa7f6fa7673e59d284b5b46b7ac004bf56bad46b9f3ef010000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c607e9c5d0000000000ce77a1bcb85e262afc168ca348cc7be4b6c4f6c601414078987730d2aec8e57189fb7595b215c053f39e4506d463830935a04e25b3c4bc21960c5a6a615dfc170119e7e5bbb8a3d220f8c7adcb26b644832cd15e529d7b23210213130ef4eacf3345c38a501ea14278dfee63f65b3b1a955aeb0a55481770945eac80000001d1a8df4856b5df4250c9f6908a3edb2c044f34c2e4c15dea42203fcc4ec7583f0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500b33f7100000000425db89f244bb47aaeaaf35be63a357a0b8b76ef0141405599a10def2faeb1da54ee861d547b98d479abbdcd36e446af8bb03d13e2c55b71fdb0d9fef1431faf54515886b0ce9e9f5cd3408d346bedbd3013499018fbf0232102cddeabd27d6f4395dc1562b0edd351effb8165871994b864461e37b0a2947560ac80000001d0b28264efafa2100de4302e3e73b8ea9ef5b50009797bda597e7a5e47f4c1280000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5007ddaac00000000548dac97c5b747490cf22d535a5cc6c64aeb740401414080f75832e5c7a1b5bc736bd5164d12daf9db03b9ec1952538df8b10ae56c17225d567df79640e997068f78ca96348ba72c4c3bf357ce30ff90d345e606ab9d7e23210288a98e7ca9c2614906307017c93204c9a697365874ce0df1e6d2eed1d60164bcac800000013d7bb40fae9ed8053de816e9bebd96782a61f664699df0d4b823755a3edc55cd0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ec7c6f0e000000eb3c7213c4436e3c4efc3726c33cb654ddd978060141407899ded74173a8142bc089465fbb642b9e07a0ac6d06133981c1f7ca791f56cfe1ce811b775e82c1892217cd23e004211e44b93dc9eecb31122dca04556c2a58232102427370a47862aaad1587b265bd9e5abb70e8190a58eb2f445c93329435313e8aac0200012d86bfd110cd9c487b4bdfec949e13625d1067c26214b59747689f607612c1ae0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60386b020000000000a6c0c6dad5525f069f4b03e2d3880d6c834b6679014140cbf989e19c1ff397be8ba08a8e89d72220559f226f47dec5de0702d641443e62931812b9d99e3d12a7ceb3a13ed1907abc43c1a88af1480831f8a13bb46f9548232102b71d1cf338cba83ec186f9fe04434382f8688f0c2b71011cd033ad9dd9867667ac800000010a75716594aab8d7b1639020d564f091e61a50f0431f6b1203bc4ae33b9247c60000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000012ff2306eaeee360bffc3ca4f76dfdc3a92fca1a014140681efaa9084f73d61e2e406b7931cb006f5ab78d99757a2e06bfd8b27f2c1d294483cdc6b97ee6d8100b3abcab1642b3da9375b8cc251174a7a31f0b9709d00d2321025fee75885ef39e53f326dea3662140b8286d656dac51f3debca02c27a3958285ac80000001686ce06e43ca159dd52ba146dae99b146e572e49a68ecb7a094059d05e7356650000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50008af2f000000006ccaae2ca3326d8d1bdebd56a4bde172abb446559b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f505000000000ad5396ea9c7b9f1a141ce440fce3dbb272f77d4014140b2faa7e96cdf04fabafd706fa4f6ee4b61d9f086f273ea32ad74b777ec3300a4065354f7266618f460fc82d618d7557190869fedd53bdcaab6c5e943c4f251e02321022f9ae90346914d3d6446e06b0554db07142834753e15e5b2c2460b3a0cdf817dac80000001cdb4cc1dd14db33da12aa14223971e26d3de30b85e074ccc71407e3160a9dfaa0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500286bee000000001ecb5f636b8322959b87d10f70f12dcd75f33bd6014140586d3be3e86d12b2a895c2303de9177118c74e5c6227f766ee3debe677257f39f3bb8306cb804a30d0cd7ed616d0a3ee0c0fc406e252b2581f3a5daaaae967f92321021459845a1fd89174bc22a8453f6e6b140c357ed9fd70fe4a3aba2ebf19305f81ac020001b27f3a08a08c72a0152e6088f8ca9246f52b4374b0040b2633b3bdb6e615bae80000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60c003000000000000fb484ea1a5994b508c93a63bf618abfc86dcd297014140f2e1718bad0fc1043d36b5e94eb6671e70f3e6de881bba7f61cd4a2aad0e674021ef16729cc576ce3b746f2e289128d747cf0129e2fbfac8a908babf672fdaad232103809685c0c129aa84cb6173bad8f2cda73115074e5e8378ca186e160bedc920fdac80000002e973e4bf4725e1dd814f8e4fb1bddcbfd5d1d26c05168bfb4060f3696ba315980000e973e4bf4725e1dd814f8e4fb1bddcbfd5d1d26c05168bfb4060f3696ba315980100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c11a3d05000000ee1ca1bf12c3052a6b71b53bc412ba4e9aab2e3b014140b2114bd987ba102cdf304babb4e5fc52ad991cd53d658664f94af55919606f71c61216f40b2f2df6647be934f4352e80f169adda81561ebcbb1ff0a5b102a3ac2321035828cc346d159bcc5fce028adcceedf58db1d191d848b00a29bc4a9f34585a1fac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 11 trans
	{ ID:"20bf548bea103aa6d5230f5a3ddeb46d55667c80c136235456b09f9a46718453", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"0092617ed96d627b7418e26b628db2fbdf351f43c30bffaad22e31e987f20746", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"4761a22957bebea7a810b171a0c896a5066024e6e649d5c05c456e7e5d13dfb3", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"efd5719d63014eda7f135e34e2976df41d77c1bf0939d1f4b287e763f781aaa8", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"da3a87331a6735089952e5418f68a1b7492ae1e572666da8db067132b567aea5", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"cf51b1b4743a05e5bfaba6325209c790a0f38b02cf00137d00da71dfe3fa111d", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9d15f088bb60b16a66245e437bd81a0f988bd15da216628fa116b2f99e740096", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ef67e4c8a9db0d98e8d28bcea2a50b8f5e382f556e0371e3aefc6130b644b480", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ce21057c22f2ca6004f0afcf8b51f2ee6225de79777cffa77776d0e67340bf97", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"274867520439c9c6313be6935abaae39121ac4a35c2aaf2b85d26128b4f84049", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6b305e9401c24f59f29fd70db6dbe9dac1e52f5d1a2eec564d64d74f9d839d1b", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "5369dcdf8e270582aca1449ae7fbd3e829c1afc4e9a0f09d71c7c5c9ac4e65c2", b.PrevHash.ReverseString())
   assert.Equal(t, "384d2ab244d5afb43ea59e4d111c3b5ad7f26052cd6f45e2e884db33930d1e60", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1511731538, int(b.Timestamp))
   assert.Equal(t, 1633088, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "406f47c895d85b505f9d83f993f98ba33ab26cef62aa5a40517c397f7677583c2c25e705168e58f3a913f1663607d8ff3374550cd52abc6bb13d0d4cc20c04767740501e04a7709e4fd75f12cc0ecc0830e5e064bc0d47225c248dc6e2490766fcf0049a5051bfa8751f190b959b032351eb6b78f29717896ac8ed6e8e1f299ed58f40eab2e798815a140d25798f13f5b92b35ad00109f3be539ba2ac6ee4215d6237edce0807d26909cb63dc8e0c6ab1eb5be45962de3b4d292703c230c297085fdfd40a20281462706cc4f421a808076a55ab2457d71948d94537cb47674531bf34b639ee27e5131b005313b37520ce0b508ce3f46ce085ffd6209e34e356404f168c84047fc5e54fb91145b843a60ee661842aa6c29cb533d4ca36968124db4305549780017a000d15ce164b8157622d7e1ab236c011d9c31801501b04801b41b9c7cbb", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015d82ce3a14674b0caa5e61c403c88189437c686454e50a291ae8c0acc1886",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2803, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode968(t *testing.T) {
	// block taken from mainnet: 0015d99a01668578d2def6fb92ea643e022b1bcf25931000413b36b21985ea24
   
   rawBlock := "00000000938c8d6b55fd70ef2b8da0868b5ecc5282d11dd64cec6e757927491bd0335e6ffcb3e9284f7ed5f1cc83db795e4ff63ecff12c31eb72037332275dfa1db2c2c61972ec5adbfa21009b865da92f3bd44759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140e9876cf64df7c8b70cfd79f76c6e399a9e85ab28603419c3b88427699eb59678ed03b0897eddb3b666a10e332b85f70214cc62f34f9b1b9a11c9b6dd4d2f9f744056272e5b269087f83b6110e11a5e74dfd70a9ec71cdab9cdb62513c87919374a051a967b8452d7eca30e91cef10c519edd61f624000179637c8209d76f65770740f891ca72fe788aa0e35c2bef3f981770aea8b3e8ca04e69634b46f9c675df9566507b53c199eb281ce3911658de5ef353575196da0e139fe03d4cacce98664f140c5335785a87b7310c8a229b4a247e1244032a123ac030fb1dcf39374dc0c521de4b4d658097d99600e331dcd7206355d5bdb14e594d7f1d12ac3aa17a34c80d340dd31350839261d00c6ef9446e9e1596aac8a814537607833e05fc742dd350baa30aeeb1e54bb867b7855ec49e8127a0de9b84dc718d078c54efcbab76e9e8a4ff1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0700009b865da900000000d1018708314a000000000000089b1a4d650100000020e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c600868de073db102000014dd2b538e2a0c1db1ae5061c15be14f916bd1e6781441308eea4ab15f75314ee29abad2c2c4329b63e656c1096d616b654f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e0000000000000000012041308eea4ab15f75314ee29abad2c2c4329b63e601a36f90e2a334c4cca66866a181aed66026bd43599acff6630e1eeecbc6b408ee000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140cd4537ab3c3d5b8d742b5d40370a653f614bdfb537581190067a94cb14ebbe24aa4ee0e0447df84591f6180da582e86aaa34f981e7d59fcf52b5d896f963061c232103f75f656b0bc96c973cb050d865ac419da93e5aae7c977eda9c450a0db061572bac41400b2e9a7559b3ad49cb3640e378ab2c2fe3fd07ecad99b81ff9eb19b816487ec3ae15a9ba3f4d101a702fdb7c38c25040caa98a951f72657185f9839d0e112a74232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1012000c1087769746864726177691f559d5eea8ca22910a3feb0e4637c0f2e71c50e000000000000000003a15000000000000000000000000000000000000000000000000000000000000000a2cf9472821400ceb06ca780c2a937fec5bbec51b900000000000000000000000020b3fb5f6355618a05472050b144dff0ebb85e34e601ef6fdea81f546bd0be824fa711be0dbec0b7aeba768146c9c6c70a6e10e56a3b000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000001f559d5eea8ca22910a3feb0e4637c0f2e71c50e0202000000414006649e8f591912519bc2898a79f714239e10a2779b23bc64efb9f7768d75e671b698fe6581c75a0b828b21a563ee781e24ecc1e8a5971644f29f7e9b4f2117de23210206e9e907eda456daea071f51c581986791e71022a09f5353e2d32808088c6142acd1012000c1087769746864726177691f559d5eea8ca22910a3feb0e4637c0f2e71c50e000000000000000003a15000000000000000000000000000000000000000000000000000000000000000a2dd2b538e2a0c1db1ae5061c15be14f916bd1e67800000000000000000000000020f3831c4f4a40b264b899b761d6052714546971a8011fafc877657200c2a1cc0669d44b987cdaba59032eb5a8772b23aa004698f8eb000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000001f559d5eea8ca22910a3feb0e4637c0f2e71c50e02020000004140576e38abf31875a94fcb63b366a535982a643a79f6b65a64b87d7de1e5c5a48ea5cb6b7adf039b1281ff411a57d560ea098e4e9d2da6bf34a21b7236f2bf882f23210260ef03dd2491217dc7a0bcfe8dc941d03f9ae4c77ab940cb41b41d5333c56eabac800000016db2cf9758e01e5ae6290f8458d27b741bbea0bba75a784c9fdb4adbce1a13120000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a3e11100000000ed43eb138d307841c6a87b3b0339b51932c9ea86014140d8cb0bf626183935a98ac31aada16a4e8ca3b8e0702f3cc050a1ea493da50e7c95f7e42aa532b6df067fe79ea9437ad70de0c067df70fa9c9bdfaa29b336e51a2321037c88b7e2b8f74e332773a34a3c8d59708015a2692877e8c4243d7f70d2a35526acd10152080030ef7dba02000014f9e6e770af783d809bd1a65e1bb5b6042953bcac14897bc6d655b0aa5a6699d92b2226adb2e0ab8cd153c1076465706f736974671f559d5eea8ca22910a3feb0e4637c0f2e71c50e00000000000000000120897bc6d655b0aa5a6699d92b2226adb2e0ab8cd10107c522b41fe2dab0ee8b14d08725cecfc478d8d8e1da304abf171ede6d105648000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140fa06760a40dcaf629d78053613a0f983a225aaeb26f7d08a7d927b03cf4a35e8db7374327bdd82abd8b6d99be5b53afb224d3c033dc7099ad402808300736f25232102bbf86ee25ffe20372c322b64d50d3c79779e8e53e044e148eecd935c89220fa6ac4140405e981a47ce1b297b6b87c7a3e0e036a4f82eaf13b85a0c414ace2f60f2071a1933dd848b0319727d3f3cc64be01306fbc6b3fd1f361373ee007bbb58b95057232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac80000001973089b2238d1fda16c5201642c8eebc68d2b00d33f634ce3e95bd4a829060970000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000003a67fdd8e9e2ea80827ae441d28e49de66402ef70141402b103d5f6944467258ee78412d478908d25adcd327c5d16a105dccbc5e3f91722f86924eb28a720b48faf1ff13ec073d7ee9793b47a0beeebe1c9045ec96cba723210311fdef90e980b162120c0b8fa2bc3db56a83a333f1185170dddc9cdc5c75d75aac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 7 trans
	{ ID:"fa11b9a59a25907497c51687df56903ae90037024f767dbda1ab7f6d735ebd9f", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"9e52cc5002d702c1d90896d494252cf1821a99fe24a23a780b51fa2bb0e65dfb", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"2db7d320d484878c53aef7f2f1bcc255e4339ee84cecc3523558f4beb8ee53e1", Type: "InvocationTransaction", Size: 334, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:3, WitnessesLen:2}, 
{ ID:"7e60af437d8da3ce61eb6cfd61d760cd48a27a8b087f3e100e8edabb381ebdc6", Type: "InvocationTransaction", Size: 334, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:3, WitnessesLen:2}, 
{ ID:"f5e2c7b4531554e66ac27b2dfc4aca2bb39f074816a6dacef97569f1a8c6329f", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"f4670ecb249ed362bfb88a99f1ae30b871083cbf4b7aa7a1bdb3600f324e47d7", Type: "InvocationTransaction", Size: 416, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"207993f32ab725e78336bd31f77d0681ba2a41c472f1e572eaa4b50955c4304d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "6f5e33d01b492779756eec4cd61dd18252cc5e8b86a08d2bef70fd556b8d8c93", b.PrevHash.ReverseString())
   assert.Equal(t, "c6c2b21dfa5d2732730372eb312cf1cf3ef64f5e79db83ccf1d57e4f28e9b3fc", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1525445145, int(b.Timestamp))
   assert.Equal(t, 2226907, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40e9876cf64df7c8b70cfd79f76c6e399a9e85ab28603419c3b88427699eb59678ed03b0897eddb3b666a10e332b85f70214cc62f34f9b1b9a11c9b6dd4d2f9f744056272e5b269087f83b6110e11a5e74dfd70a9ec71cdab9cdb62513c87919374a051a967b8452d7eca30e91cef10c519edd61f624000179637c8209d76f65770740f891ca72fe788aa0e35c2bef3f981770aea8b3e8ca04e69634b46f9c675df9566507b53c199eb281ce3911658de5ef353575196da0e139fe03d4cacce98664f140c5335785a87b7310c8a229b4a247e1244032a123ac030fb1dcf39374dc0c521de4b4d658097d99600e331dcd7206355d5bdb14e594d7f1d12ac3aa17a34c80d340dd31350839261d00c6ef9446e9e1596aac8a814537607833e05fc742dd350baa30aeeb1e54bb867b7855ec49e8127a0de9b84dc718d078c54efcbab76e9e8a4f", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015d99a01668578d2def6fb92ea643e022b1bcf25931000413b36b21985ea24",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2643, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode969(t *testing.T) {
	// block taken from mainnet: 0015db4d9fc45a0276a428d86b6e2ab702720df7520f9a57eec49eba30de0094
   
   rawBlock := "00000000f03f8a4f60c64017ed6ed5a973a5e6d3e2a8cf0aa73c9ec774bdf6da0e40db1a421007894aee67af6455fb155f6818a29fee6cb5320aa24ca1e956815df5413b83e8db59e32016003782a27e23dcb1fd59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140ecbf0177330c3ae1986ca2df2bc236292b7c607b64d9499ff05b63fcd264d0fc4244f8808fc1c72397ebf44ad05d652b38989f99dfc6ab386139e026f4087da84050084a964bc10cb41ea8e73315009004c6ff8e127f99ab4dbdac231491326ef36ed19fda790f8503a4e7ca9fc49f827b2a124daae90dff00e417dbc7059f3e78402f65ba45166d74ca62bbd0b6287fbc1b159b8306860f472e90d7979adb439218b3ff0b2b7ed2aeb93445bed2150d9550d0b52e3101a1fae3548b807a421a5f9f4038777e414d823aa8423d5885ba1b480ab1ef0325f5038969cae3fe843fb75dbfc5f250a0b41a0b448f2de13f597c853060c0dab207a589242d6e326d9c24ada740cbc5d249e45707dccdc91d5bab1085417f16b31330d0ae89b8edc94b9bcd4db3b17c41855ee280f7cebb16a72614a32170b305bb87322e93cd7e645b4552fd38f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0b00003782a27e0000000080000001326fd32a16d9fb5008bf15b64a40188941b7a3484248fc6f8f6b9255578f8a390000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500f902950000000065d9c544180dc308c6028b132c0b7478eb2752170141404bb4f8585b0577e89794978a5e562305f5c74309693ab68989ab3bceeae1f62f5711ed313580ab02662656c6b755b80e93baa5736161d3792d3ceb199208bba2232103203f33be8778c27a9c6fcfb66890e0fc0ca39258df067bcec228df0d55d8d984ac800000011e660869451e8891e9ecd40f857e2e99ad356110ef75707b7f35bdbe865548f50000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500216e8301000000648f42f00371b7e98279199288e7e494fa9d868e01414039852b1a5fa52402b7b1686dd710a56fd4416dd0c05e3416af24de8eeec74286977fb0ba1f3a296437e3833cdaf0d07f101ae1b6b5adc82ca59effe4dd974b192321020b57eb5dc761f726cb51e079080c2763bdda43cfba4bffccdf52db674746dd33ac80000001c90524d6711b2735f542a546d1fa0879a86341aeb9e2bc2c1594399e023e0bab0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50046c32300000000e2c01b19c5054ca852128cbed8a50abfd9027bc5014140bf8f489077ba45b57deca59c74f02fb3f7e2ae49b30d225066f7554d711c656d2b3a344e9ef7de4ccc056bb3d3dd8089ac2b951a8e2fd276209268bd11a47f9a2321020e6f26a3cefe256840493929eadac1ba9a9d243f3092ced1330f02d78eec59ddac8000000195aabd7066b7d2396564bcbb13c7753b8685a9520315c995e512b08fe5b92cd80000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f505000000007f5185be44cc4c3d4024f6ea956a2dc4d022d9dd0141409a447faa0fcf80c8f080381f2601176cee509e4269b722d5148b960ab2d995c1ac4f24d4770aa3c12505c5c9304e70269b81cad9355ac6e80c30297230fc292f232102c1f94733eedefa7dc785e9b61c9085348e57b2b6d80279168c6142264ebef7e0ac8000000125f42b6774f339a0838fe3c5be870c92a25f8f837bf1b3e2143e8558d6f4a6380100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000b8c0bbd460301001590ed8c1d7ee425326a6ee7001414014f696e5786936b4db75113fbd6296f0e634f03942be2aa3bc237fa60185613beba5f67b00fb72b2b1ee154ed5eced1693b6d6471e2494b3081d76d1d6f88471232102823c61b7b999400ffcf4f5fc61510ca702e26de85009de753fbe9a4f858582f3ac80000001c3da6a24ce98535362d08acd041ed53605dcb484c832980b78a480eb482462990000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5008254840400000043b6a6598ccc8f3620bed8ea40ac8289052f6c2c014140aa8fb46e94e85de8e2dbb10635c8d7d88b942cd4275c264b2e7b05f56b9c910798476a7d46bec582f3f0427e63e40f77a7458636c3577b7038f70a25f9e50c95232103e297e637393a2e09804c6ae2adfc4bdb3a3a1c5dc70996d117a4b29a56c52a3fac020001f8bf40565009d842ab59f6a371748f8fa522248ec324436620ee878f49e69a9f0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60e8890b00000000004a1aad17ce42186471de73184a01bcdf19078059014140b2dfc9df0d4917d90379969e7ab3c8d5d9c818c5ba7865a3592a846c50375285e37eff66e95da8a8c4576efb2ce8652fbbfc98e9ec3cda1d5de138b312517a38232102d15f895cd2d915ef9e726802458482463d158d98b207bdcd25f30353639c24dfac0200020d0057e3739bd695a0c8075bb65723f931aeed8b855fe5727603cbee954bc90c000098244056fd24e0c1df69c7dc44d088653246eed940adbf3c6e0f9138ebd807680100000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c609da51c0000000000e250733abe159a2571e39543ecbc3b67339da71d01414022eb9ae713c10ac0f11bb9490e08d7319368bb894a70c48811ba95b276047a6855de8a4cf7cb6d4cc4a70ab40157fa1cd4730b27b9435f7a42ad5bf3e4dd1aa42321035eef4f7dc554d2ea9758083f2bb1bc7f9ae0f9ea608b3a94014cb32f2614f5aeac8000000163fdd537e6ba23a0d8f7e0e1c15e290c4d4716db0b8b9e43434c012ab9800b480000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000071c5483c12f283b96f48aa27c31cb90f1f6418579b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50029c09413000000c5b20af5060e618f4f783cc2dcf91a34011b418401414032e5ebdd19d51ac54e2419bddb71f949b14f1b3369a3fb3d925ff75e3268b64324497b1724aec622b2e8ff3294d22f2da134c1e5c90a02daca204039741f080b23210236f3fb8871fb497ffdea0cada403ae303bc599650e228d20fa36ac62b406f9c8ac0200013b95719ca66c2c0d99c7e2a64f2d2566531680eee134b5ce7d051ede14aa7c8f0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60e05d0a0000000000aaeca7d487afa8421b0a1651bb97e504665e5dab0141405fc0fd3d5800f65734cf0f55600bacc12f30ea1de7e8afb706f6c343a6162ee6607b939b093574ab1ffefdf57e389d317490ef09ea01123fba3e32c26265079d232102a4c09e96cf6e5a5cabad5c34517189b9ff16afa744fe449dded2c90a80dec7b2ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 11 trans
	{ ID:"2247b18a6d628856602ad98b9dc96afe0df18e1252bab926640d03be3595b9b4", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"5db2e88f712de0501d66adc46fc345a84bb2e048cc3d77d040446c809830b43a", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3246969886f32cb40364af370caa7d907fa891841cb7998f1e6f22b215961ade", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6e605d36de398e1ce3c338941b89c1f51c0694ffeb59e946c5b16b4b90af8096", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"2584de882345ad43347f3dcd7dd30721e762453932a98a78c8fb260580c80676", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ea329a2ebbae09b1cb5a2556d60296471b493e1300bb142070219381efd1d3c1", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5e2883eb7c141d3d54ecb651dc65dff36f9a053c2dbe4be9beaa62a0b6f15f6e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"cf961317f6b52a9d6853b340343731656c9b551b7cd06b732e64692a47e5f830", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"21c527fbde469df692e1fe421e4932496a862e55064392389e9ee2bba2f45434", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"88dec3a7c20a029480f43a45ba29505e2361462e966dd3d626045ec2e66ba652", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e274065b7fb9c64181fbf2748836d7428375b40a9acdcb69c6db2726d5eee1b4", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "1adb400edaf6bd74c79e3ca70acfa8e2d3e6a573a9d56eed1740c6604f8a3ff0", b.PrevHash.ReverseString())
   assert.Equal(t, "3b41f55d8156e9a14ca20a32b56cee9fa218685f15fb5564af67ee4a89071042", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1507584131, int(b.Timestamp))
   assert.Equal(t, 1450211, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40ecbf0177330c3ae1986ca2df2bc236292b7c607b64d9499ff05b63fcd264d0fc4244f8808fc1c72397ebf44ad05d652b38989f99dfc6ab386139e026f4087da84050084a964bc10cb41ea8e73315009004c6ff8e127f99ab4dbdac231491326ef36ed19fda790f8503a4e7ca9fc49f827b2a124daae90dff00e417dbc7059f3e78402f65ba45166d74ca62bbd0b6287fbc1b159b8306860f472e90d7979adb439218b3ff0b2b7ed2aeb93445bed2150d9550d0b52e3101a1fae3548b807a421a5f9f4038777e414d823aa8423d5885ba1b480ab1ef0325f5038969cae3fe843fb75dbfc5f250a0b41a0b448f2de13f597c853060c0dab207a589242d6e326d9c24ada740cbc5d249e45707dccdc91d5bab1085417f16b31330d0ae89b8edc94b9bcd4db3b17c41855ee280f7cebb16a72614a32170b305bb87322e93cd7e645b4552fd38", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015db4d9fc45a0276a428d86b6e2ab702720df7520f9a57eec49eba30de0094",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2803, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode970(t *testing.T) {
	// block taken from mainnet: 0015e491ba8e39ea80efad866e103c533c4229aa58b2798b4af52d0a04c633ff
   
   rawBlock := "000000004368ec154302bfabf091d59fe82e402e4def67f02569b016df1541c8063e13d2abd559e5abf356bc1d83575a06c8d83486fd39d4f3555cb9f67c5f84fb94b9ded6463258c55002008e2d195c746afdf259e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140a825440f74809348e967ea738024f0594759405b89a810e457eaeca8af7e9ee44f73b1f782c6c3f2b22e7cb8f4c301494d5c5eaeaafa50af8eaee571e4be934a40200694390671061dde48d9e3f06103f7859a83c29d0a55c20424439b97e95ae11b311467e5d979c782c2f698b9223661290f7b51e44a0adb257067987b0f98a440f205dcbd5aece5a678b89055f230288ed7ad876dc39e599689cdd09bb5bbbd48cdb904528b712b058144ccbbde0793b8992fa784b2c079214d476f99df86aaac408ff029eaae7bb20927917c0f469be6332f1452f1b0896b896e39b5fa9d475c2e6767f932110bde87413391fc71c7169206fe8f0f3bff8134d84d3075239ae8ef4015b5f27ea73929583f4a927e4353c5810088993671931136b478d9c1f2888b31d27d7a9e713e49c4e26eb6fe33031fdb080b6b789f57016e4dfd5f147726f075f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100008e2d195c00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"deb994fb845f7cf6b95c55f3d439fd8634d8c8065a57831dbc56f3abe559d5ab", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "d2133e06c84115df16b06925f067ef4d2e402ee89fd591f0abbf024315ec6843", b.PrevHash.ReverseString())
   assert.Equal(t, "deb994fb845f7cf6b95c55f3d439fd8634d8c8065a57831dbc56f3abe559d5ab", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1479689942, int(b.Timestamp))
   assert.Equal(t, 151749, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40a825440f74809348e967ea738024f0594759405b89a810e457eaeca8af7e9ee44f73b1f782c6c3f2b22e7cb8f4c301494d5c5eaeaafa50af8eaee571e4be934a40200694390671061dde48d9e3f06103f7859a83c29d0a55c20424439b97e95ae11b311467e5d979c782c2f698b9223661290f7b51e44a0adb257067987b0f98a440f205dcbd5aece5a678b89055f230288ed7ad876dc39e599689cdd09bb5bbbd48cdb904528b712b058144ccbbde0793b8992fa784b2c079214d476f99df86aaac408ff029eaae7bb20927917c0f469be6332f1452f1b0896b896e39b5fa9d475c2e6767f932110bde87413391fc71c7169206fe8f0f3bff8134d84d3075239ae8ef4015b5f27ea73929583f4a927e4353c5810088993671931136b478d9c1f2888b31d27d7a9e713e49c4e26eb6fe33031fdb080b6b789f57016e4dfd5f147726f075", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015e491ba8e39ea80efad866e103c533c4229aa58b2798b4af52d0a04c633ff",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode971(t *testing.T) {
	// block taken from mainnet: 0015ecb5932577fbcbb70ee704f34a2b0e9a390566e7fa1fda9bf1a5b7eeb489
   
   rawBlock := ""
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 17 trans
	{ ID:"6bb970041e45fd6dad88324e40e8bbe3bf79f8500ac8f3e72f5a6b7a3344b34a", Type: "MinerTransaction", Size: 70, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:0}, 
{ ID:"1506354e98aa3a52be68a483eb4821b99bd90694b00187ec5124fa07a5ac601d", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"91c4fcef799a490e61241aee5f75bbb9c045ea59143fcdce40f6ae0103b19698", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ddd8cf9fc1ecf51d511ac924740305c5eb85a63c5baf3812094bbec6ca5204c9", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"27acbbf4e0e2c079e180f2eeec009624c145f3dbf8d2293d4620f1a1969c249b", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"46a416c8f393988ea3d69a9b054b0be31e7ffefc2853f69f0cae2c713d45313f", Type: "InvocationTransaction", Size: 367, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:4, WitnessesLen:2}, 
{ ID:"e66045255559079e9874424a897eb1124ced5529b478a69118e449f83c1c48f2", Type: "InvocationTransaction", Size: 538, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"ba4174b4f9fc14880ee95931295e11573972603c55fbea81f8d3c0b139ec2e56", Type: "ContractTransaction", Size: 211, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"43088388ebad9b765c4cbc9f3d93c88dea48cfd4742cedb44dd2056859ccf262", Type: "InvocationTransaction", Size: 468, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:4, WitnessesLen:1}, 
{ ID:"bc109b20a918486f0ec0565bc9b1e69273668d6490d88effcabaf4038f42133c", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"6f83765fe3a79fdabdc39cbdc00ae2c9da699d93c1537025a645cd5bf5907073", Type: "InvocationTransaction", Size: 597, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"956ace03749934a03d7ebedbbd628b928ac847344915b679ca4922da4a93a3a7", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"999bdb366627c5ca139a30a287606e5837df6f589178a1929ab2fd383c352a07", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6b5fe48b19b654b63460006d4912e6292c83ecb11758d8ce6d58053856c61972", Type: "ContractTransaction", Size: 211, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"89c6c7e6aa3de0d3ca62db0505f24ae0515ff8fbb2fddd74c0a3448fd09c5850", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"2a49da02395b32c8b7ccbad5bb9d0db07bc0a1b13decd2afa35e1d7dbb3d0e01", Type: "InvocationTransaction", Size: 633, Version: 1, InputsLen: 2, OutputsLen: 1, AttributesLen:1, WitnessesLen:3}, 
{ ID:"3044eb3c2a6fa368d6f0be2da477366ab8598957c37d29563499c7a363021762", Type: "InvocationTransaction", Size: 253, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "b7955288eb83fa0e6a4503a2ecec678cf41355fb73b5adbebdb9b5496dd462d2", b.PrevHash.ReverseString())
   assert.Equal(t, "3322e5acc934ab5e8a25397fd43f340f5dac07bed908b33fd64df67f324ad1e0", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1533268693, int(b.Timestamp))
   assert.Equal(t, 2576661, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "40e90000058d0c71d84e71d79c1be9df6e6a26d1ef53e012d1235cf4a21ce0aa89882a8d03ceb868e04f1ba3085a5727480fa0baab010b5f48ab2950ca66fd88e740debb543ff53219fcd68ad0822fe6b4ac253ad9b4ba8b27b1f3843b734743560b8aaf35d0dc6bae6922f8a9a37940b586d56cc009abc5284cc20c351e55c0efa64071639e81cfeaade8117f4ea5b6badea1531c993c2e267b1c8f47797966d7f166a2dbadbee2685ba2545980cd5cc4177a98518c64ac0f4ad9b387c14d273cf11740c67c06f47dc001c202c166fec8f4dbfde86044f62792507835ba4ec9813fa507a88cac9384a0135614e70b954e9f4e5f5b742108b956f9c590a7e5ee4f7ec842404ae3a3c9e9cd48260d1006c7431d4cccae932cb12a088b875f6f9f998ed6414c3d85812935133763811c2fb1a77e29a17325f1f5b688a0f1dac91271325d4114", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015ecb5932577fbcbb70ee704f34a2b0e9a390566e7fa1fda9bf1a5b7eeb489",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 7794, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode972(t *testing.T) {
	// block taken from mainnet: 0015f2de049cf68ee858a90e18b5a9a5efe595698838f362a40e91fdb3111b36
   
   rawBlock := "0000000064b2caf2059a364890a2e74d5e6bbe07e987710c96413829857ad965d8d0e2416c14b1a76a23d535c6f95e1eed5a4c807a9e44848cf0b7f9123d3d070a8b9cefd9740f58fd9b0000ebb4372de4e360f659e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b12a67a9ecd174d619bb5b595e7979e2633046db6bab521c5a7b5352de0c44a552fb23a11f419077dc7eac7d87ec594f939147fe9ef6cb88f0cdf1ba514512ba404ed7f46149258012ce3b11961c001d8ce021d6ccec2407cd1c52fbad3c2f5b82cc94fb6791f62ddd18438c410e32cc3304bf68b685305b985ba45fc9e729ac4c40dc9e67b4a9a2dc85a6c0d9d0b22a69b545c8220f54cc4eec93f6b9a2efd9d57f345770d12d8b82240a34cc48cc898096701171e94c23482389a18a58b9e824cf40d8943a93ebe09b3db0635751a9571091cd3023720a5b80dff5fa0225e18aab238cbbe77dc59138939d15d84718663eab1ed33e72898a0a24fe1c9805f58a487b400f67606911cb29d9bfc123c0c196855b48e931c7689fecd9c7fa5893a0fcc225f598345b221f4cb65bf952b4fa113cec54a2c2fe0b31e06092f0da180717d439f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000ebb4372d00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"ef9c8b0a073d3d12f9b7f08c84449e7a804c5aed1e5ef9c635d5236aa7b1146c", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "41e2d0d865d97a85293841960c7187e907be6b5e4de7a29048369a05f2cab264", b.PrevHash.ReverseString())
   assert.Equal(t, "ef9c8b0a073d3d12f9b7f08c84449e7a804c5aed1e5ef9c635d5236aa7b1146c", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1477407961, int(b.Timestamp))
   assert.Equal(t, 39933, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40b12a67a9ecd174d619bb5b595e7979e2633046db6bab521c5a7b5352de0c44a552fb23a11f419077dc7eac7d87ec594f939147fe9ef6cb88f0cdf1ba514512ba404ed7f46149258012ce3b11961c001d8ce021d6ccec2407cd1c52fbad3c2f5b82cc94fb6791f62ddd18438c410e32cc3304bf68b685305b985ba45fc9e729ac4c40dc9e67b4a9a2dc85a6c0d9d0b22a69b545c8220f54cc4eec93f6b9a2efd9d57f345770d12d8b82240a34cc48cc898096701171e94c23482389a18a58b9e824cf40d8943a93ebe09b3db0635751a9571091cd3023720a5b80dff5fa0225e18aab238cbbe77dc59138939d15d84718663eab1ed33e72898a0a24fe1c9805f58a487b400f67606911cb29d9bfc123c0c196855b48e931c7689fecd9c7fa5893a0fcc225f598345b221f4cb65bf952b4fa113cec54a2c2fe0b31e06092f0da180717d439", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015f2de049cf68ee858a90e18b5a9a5efe595698838f362a40e91fdb3111b36",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode973(t *testing.T) {
	// block taken from mainnet: 0015f43b95e34aa9ae7e57bd832d49f3db7d55d7055bcfa86a06132df09edc0d
   
   rawBlock := "000000002a7fe7599e98d8da0dd5e91ea82628ab161671e498c98bcde2df7d181e822bbe6482450b7c02e89e143e36f606802bf6aef27c1ca79e8d74bcb84f819865c9153a84ab58fc690800884c77758c8049f859e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140d07e01b70836334027642c925a368eb3c2e4a62fd82c04698e6a3f771a7269c644a2bf020d3b1e243dfa81a8b6e11deab1fedcf97643248bea156569fd50df9e40f7901419c95524f36b63a59cd4065ef8f5448ef720c620b82b5f0b162b6ce51ca96d1dd76d019e9509c40a0c214acf1b0f41ac3b82818409fb5d1d35b052d1ba40ffd9ac916de164956c4f266706a0771aa3b0a693ae9de0e5a6eb825c89d718a070176acd740626bd45adc93410e4c961fddb18c632222a990960b158d2ae954d40162f82ffc326e7b3d423c0c75c97400065b510f1974845661fcdc33bbba56287a7aed2abd7d6565b43916f5d680daaa2c2c7f49f94535e681871f400f7464936409473f77ba91482ef8010ca92aeb3b3f023e69acbef666b189867b75df922769ae59970025a4185be194547a47d28e0a50bd4703a3261dfd4a1fc00d1f499d871f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000884c777500000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"15c96598814fb8bc748d9ea71c7cf2aef62b8006f6363e149ee8027c0b458264", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "be2b821e187ddfe2cd8bc998e4711616ab2826a81ee9d50ddad8989e59e77f2a", b.PrevHash.ReverseString())
   assert.Equal(t, "15c96598814fb8bc748d9ea71c7cf2aef62b8006f6363e149ee8027c0b458264", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1487635514, int(b.Timestamp))
   assert.Equal(t, 551420, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40d07e01b70836334027642c925a368eb3c2e4a62fd82c04698e6a3f771a7269c644a2bf020d3b1e243dfa81a8b6e11deab1fedcf97643248bea156569fd50df9e40f7901419c95524f36b63a59cd4065ef8f5448ef720c620b82b5f0b162b6ce51ca96d1dd76d019e9509c40a0c214acf1b0f41ac3b82818409fb5d1d35b052d1ba40ffd9ac916de164956c4f266706a0771aa3b0a693ae9de0e5a6eb825c89d718a070176acd740626bd45adc93410e4c961fddb18c632222a990960b158d2ae954d40162f82ffc326e7b3d423c0c75c97400065b510f1974845661fcdc33bbba56287a7aed2abd7d6565b43916f5d680daaa2c2c7f49f94535e681871f400f7464936409473f77ba91482ef8010ca92aeb3b3f023e69acbef666b189867b75df922769ae59970025a4185be194547a47d28e0a50bd4703a3261dfd4a1fc00d1f499d871", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015f43b95e34aa9ae7e57bd832d49f3db7d55d7055bcfa86a06132df09edc0d",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode974(t *testing.T) {
	// block taken from mainnet: 0015f5acdf504a6c0da49cf53083d684d4b2db6a168ba70f3c7c244553cab2de
   
   rawBlock := "000000005b381070c66b91a61db33e4f0bcb1ff4ce668ad8bdcf037410db0a68860bedfb4c83a86c4ee261b656450bc5c1c8df7a99505f76d86852f600e56ab24702e4b8a47d6e5902b81100e7293864bed96ddc59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501400941458cfed4a3b57a91e2b3c37fa80ffea70f0c2680cdfb11f73d7fe872ba55149d459b8fd4ccffef6fd3d5d019893f7ba101a3c8c971ee610077b11226b6cf4004a8f2523bd1a32e839fbc858bd3dfb71f4bf38701a6d18715e82760d0f00d4828ee0d0e97d16c91cac0d0641db0cf7af1472d844298f4b40a7c9e7096738cfd40b37b6229e44350d3c948a27810fd9257533fb52d9ce21fac278fb912f2b0df1309cbd6a75333f20406538b8e032099f779244a0cf0b7ef26608f7f95a53af0184098656069b9d755c3cea6ae09821c9502365f275d71902e0003737b2014a87a4837232fbf8fb9d29c9ba4b8c6c21e73be2f47ee6b59b5ac53555c1126b9854a5c4070abfef7edc8e31f8f43a8eb501873866b2a8185b6a2bf87842b5e37d63f1fcfdc92fbdefde612cd70d8747eb24ec1affb23f14268e425d818859e5b246bbce7f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000e729386400000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"b8e40247b26ae500f65268d8765f50997adfc8c1c50b4556b661e24e6ca8834c", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "fbed0b86680adb107403cfbdd88a66cef41fcb0b4f3eb31da6916bc67010385b", b.PrevHash.ReverseString())
   assert.Equal(t, "b8e40247b26ae500f65268d8765f50997adfc8c1c50b4556b661e24e6ca8834c", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1500413348, int(b.Timestamp))
   assert.Equal(t, 1161218, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "400941458cfed4a3b57a91e2b3c37fa80ffea70f0c2680cdfb11f73d7fe872ba55149d459b8fd4ccffef6fd3d5d019893f7ba101a3c8c971ee610077b11226b6cf4004a8f2523bd1a32e839fbc858bd3dfb71f4bf38701a6d18715e82760d0f00d4828ee0d0e97d16c91cac0d0641db0cf7af1472d844298f4b40a7c9e7096738cfd40b37b6229e44350d3c948a27810fd9257533fb52d9ce21fac278fb912f2b0df1309cbd6a75333f20406538b8e032099f779244a0cf0b7ef26608f7f95a53af0184098656069b9d755c3cea6ae09821c9502365f275d71902e0003737b2014a87a4837232fbf8fb9d29c9ba4b8c6c21e73be2f47ee6b59b5ac53555c1126b9854a5c4070abfef7edc8e31f8f43a8eb501873866b2a8185b6a2bf87842b5e37d63f1fcfdc92fbdefde612cd70d8747eb24ec1affb23f14268e425d818859e5b246bbce7", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0015f5acdf504a6c0da49cf53083d684d4b2db6a168ba70f3c7c244553cab2de",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode975(t *testing.T) {
	// block taken from mainnet: 001608bfbb8f9eba22f09fdd543c131121ce93761df73794ebadfc649a7bc387
   
   rawBlock := "00000000768d88c52801dc43b7f2ae707933b40296450735a16e0708a26e5fd0149123dd7e9776ee6cebfeb9dcf7d05a9e82017055208c7a318fccecd13ce4737048d5f96f93ab5a9bf31e0077c93ad38783f65959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b41ee9a34889da08831ba7284fa135c2c67606d2aced516eb53a5a63485e9b439b488677dd815ae186c74dfe44bead1ff3cd34c7b683d856f1800a410b99a43c40b5c0867d5283416aac3a1962ad7e980705199c00bb0dbfabe2fb3ba633e56e2179412544beb8b056b24e41ad86c1ac4eb638d69e968065e2aa0efc372a2c6cf7402b713eaf6ed59cc7b75460505a02bf6605f2a636e2b02a4b7631afdbb401b7fe63c66f7019349c7a6e800ccbc0c00adc607770443de24ef514343cf7828986ea402e155e4d68f5392bec98a6cd9be51288afb52a5a8c0091b4f8871acf8764c449577f9d40b99a81cc09cfe4cd6776910683100986133d52d1e5fb9d335d7eb0ff403d58061f1fe9c5fb39648410c77d392aa68c7c7ecaa06d7727465df467284be7b1885d5164aeca4f0ad732e26b5b3297c28c249f2e73000021bff8c73e1e23fbf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0e000077c93ad3000000008000000160e9353ffcff0e2986c4b6b6e62079589979ff5d872d08fac4f075bade1066a50000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5006d7c4d00000000729e971b779586659ee60ecb7f7be95d8b960b480141404c55eae931abfb09ba417af5efbadeee9941a00491a847506d64f492f0b90c66d01ea9858ce71721fe5c405327b378abcded53f709fc632f2a8ccc93d73bd4ff232103527eb6f0ded02b66abd6afff72f011d85ece5539930b7e88df3b7661aa4d66e1acd1012200c10a6d696e74546f6b656e7367dd2b538e2a0c1db1ae5061c15be14f916bd1e67800000000000000000120dd2b538e2a0c1db1ae5061c15be14f916bd1e67801e4fe547c721e3c579e605447c4f5cf07e916537ab25a58dc50f469ebbe4791290000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50027b92900000000dd2b538e2a0c1db1ae5061c15be14f916bd1e67802020000004140c9fcde0cf8f34413dd16202a4b6206a3fc3b5324f58ab6b78572b9227be50c21caafc5db34360823d487fc142dead62f519facc2b7ee5f1e340b2254e33445c9232102231b6bf18cefc0aec2c4847ef1323a4d7103c3572e1e68352c0f024be39a9f17ac8000000127be2fb4d67dd4bb3c22a59544dec000d00880c4c7d71f270af54f6d0d68c9f90000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a3e1110000000013f486b923670e53a84c81847cd68e750a99023a01414001f9f258776b37a85624a136cfbd4849ebe4edc77c07e1868a2a1c7343ec41b124164562654cc3a6cacb8f705493c24e25e28184886dc60ad3538f2100cb1ed6232103804c79a8cdcc3a00a848a2cd4bb67c97e06f7b5c8f8016530390171faa696a0fac800000014b9f23824fa93df230281ae39699455843c38633da5508bbf4173858231a9b5d0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f505000000000fcc1d32e11be918f167cf3b0a72990fb89d2abe0141409847259d444bab4420ba5ff7ca81f8756810943cfe1d8ad40615e8c1f2ebdd949b73a685d433a8d6dced53a231030e694200758403bc2ad08d675b33d2106ccf232103f3f6deb58d91678ed79f64db86b731bb2804737d8935135e5eddb3e9024ee2c3acd1012200c10a6d696e74546f6b656e7367dd2b538e2a0c1db1ae5061c15be14f916bd1e67800000000000000000120dd2b538e2a0c1db1ae5061c15be14f916bd1e67803d9cc1ba06aad5346bf9f509639e1a6e4cda4112084e32a8686ac8c8bbec2d0300000544a91059cf6b9080316850833eb76f8c38726619ee0060a73b7aa839ec1002400006b383fd7f3b9ffb5010fb429eb5a4184e719fea7c61e9cd285a7f7dd6e1ca79b0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50027b92900000000dd2b538e2a0c1db1ae5061c15be14f916bd1e6780241409490785053153a626d468e62e02c83d6f0d8474a43968e45752c9b62b6ea1e926432277189efcd0b0b4377adfc872e16435a25190581c7ee89666544d864f1f323210258ff3252223f81094cf7b55e87762979f863ef5dc508dfae112891c37011b951ac02000000d10121000a6d696e74546f6b656e7367dd2b538e2a0c1db1ae5061c15be14f916bd1e67800000000000000000120dd2b538e2a0c1db1ae5061c15be14f916bd1e67801925612c1fdcd8e769e3c7bd7b0e7393d8a83765f3c79594837fc90861deb0b72010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c608adf0e0000000000dd2b538e2a0c1db1ae5061c15be14f916bd1e678e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6051bead18000000008169f49b78fc5f5a1e4a4ce2ee410ac0e7d402880202000000414006a9e784d54f22171729bb1f0ecadd19de35e42aea175d9fc25709106571c4980674f73d474f17758a1330c258b8f5856d4e75b53fada4286136a82f12e9497b2321038d9fa9b176849e17cff36412d0867ec0155ff1a25bd9a3cf59a83f26ee37ac74acd1015b060010a5d4e800146063795d3b9b3cd55aef026eae992b91063db0db14da96b4c5d9a9be7b9bfbc6d0daee042548ac359453c1087472616e7366657267f91d6b7085db7c5aaf09f19eeec1ca3c0db2c6ecf16642079c50d64856d400000000000000000120da96b4c5d9a9be7b9bfbc6d0daee042548ac35940000014140be0dd4e85604afb932365d295c89318cf3738355ced55897a29fe58a9feed417727130dca1faae1a201f34d76b5ecbffa8385b18d97379f351e8fa17a43d0e14232102fe291d07e42e7f7d9bf8ad2ba96a6db027acb1839d39ad61dcaed8951aa28cb2acd1015a0500e8764817146063795d3b9b3cd55aef026eae992b91063db0db14da96b4c5d9a9be7b9bfbc6d0daee042548ac359453c1087472616e7366657267c5cc1cb5392019e2cc4e6d6b5ea54c8d4b6d11acf16609a9c53b229f4d0800000000000000000120da96b4c5d9a9be7b9bfbc6d0daee042548ac35940000014140f45df93a5ddca436ba02d689c8bc55233dae7f42c28615a1f8c086b02e55305c06dba7cfe4c6ab2c8af44285f76689b30b3c38a60f67643f205374ff0b375b5c232102fe291d07e42e7f7d9bf8ad2ba96a6db027acb1839d39ad61dcaed8951aa28cb2acd1015b0600407a10f35a146063795d3b9b3cd55aef026eae992b91063db0db1417afde041a9ecd2eea82d987f27df97c33bd403253c1087472616e7366657267187fc13bec8ff0906c079e7f4cc8276709472913f1667cdfc6a1418843cb0000000000000000012017afde041a9ecd2eea82d987f27df97c33bd403200000141400dc5bb0d255875a98d5524bb1506caadfb554b3f7a7ea259a02063f3ddca954ff835061bfcf7c69c957b42e87e8754db38ff4e4a92ed502b0fb52b589d0c501b232103cffb1c583e83dcef972bbd93f1adb63990e379c4efe1daede2a5ee7cb3cc821fac02000243519c903aa8b17f27cbae6237f7d14416e8245980610e6bcfbd85821f0d042c0000a28dd4e2f8f43fdf45377d6aee3ec3af62b8b1d6c79f09824fd0d085c9de5c55000001ff076e656f2d6f6e650001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60441d27000000000094456ba64d71bd03df6a0f3998daf3aa5a23936b0141403738dcba4dffb763f024e1e87c40dcc5f023ca58ce247f2ae01b9be0497ed09bb115109d4e64ff6ec78a32c0699ba24985573c80fd5cb19ecb4542d2a40bccc7232103e320fba24bba088303fc300091c555e8f14717d640dab137bb981d9a35c039e8ac800001ff076e656f2d6f6e65014efaf4c025f6e778e8d1b8cc7838b94aafddc6d7105aa7a7cec5b1d48e2e1b020100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500dbaa5f01000000ee07989f7e7c6e8485ad754146b4b179c8f5530f014140c9672eb11543fd47e93b53874c5062bd78e1773383625a25df929c05c056092a7cbb38524e65f4d269561f049b020d1c9ed3fb8fcaf108fc499c3e61c62cb47f2321023ba8064bac121da6705927fd3158a3ac0d78bb720c6bf7ac0c2ebdfbe4322033acd1015b060010a5d4e800146063795d3b9b3cd55aef026eae992b91063db0db14fc5af973e413bd12a1e744858080874cac145b1953c1087472616e7366657267b6155db85e53298f01e0280cc2f21a0f40c4e808f166a8dc428dbe445cc000000000000000000120fc5af973e413bd12a1e744858080874cac145b1900000141402eaeebddd745fb2406808a3db4faa3d27142133c2be4569dfbf422daf53226694134cbd5cfa240cb5b05549f81a1e9de5ab705642a2ad4bf3b9cb6b852624e442321021488878692c71f53c4e470c529683c5f4de106cc04b3f84c1939fbcbdf25109eac800000019bb7a382a81d6c8cb3bbd474caf2d57c8e2bd803970953350fc5d40c929497410000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50020bcbe00000000453b3aafcd5b8fe5c933288e633ef50646158e1e0141402b745ed15e0192aa3e3a15861a57fb8ab5be265101db91adefe5d2fd2d0aa2e3a4c05946c98863d0b537e9abc5d9891e8037c6947ee25d7f3567b1c08951fec0232102ca1c63198e79d15ec38e77b0dffb9beb9ad91c78f39b92a96fed24ba760521dbac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 14 trans
	{ ID:"7a33a195c2c75faf99178889aff99770e3f9584a3ffab2cfe8ed3b7a32469bb1", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"6cf8d2a647b85245a40f4f8064c7ee48d82154ed77da6962885730d7d5b720f0", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a8a70ede50e81b43182dd524e40b018d1789edc81d64fd2bbeb996e1f6150de8", Type: "InvocationTransaction", Size: 270, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"40886ce529a578e3a7b5d1b40d3ee9e68680eaa5e0b4e76500db4639d53900b5", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"40b964464bfe62321883f428d74e0d1af6115c4f01235a235e6b401c4a9a8f8f", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"cd3ae6f6125e322671a34c72485b537be8470b3d101dc5d380270df2458d9c0f", Type: "InvocationTransaction", Size: 338, Version: 1, InputsLen: 3, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"990db01b534df21cc68e51f42301ae7e7db319597668db5a1ea381394c187cc0", Type: "InvocationTransaction", Size: 329, Version: 1, InputsLen: 1, OutputsLen: 2, AttributesLen:1, WitnessesLen:2}, 
{ ID:"5aa9382d394162eae592636ba5cdaf54b0becfd6c551ceb4d3862b3597e1a1dd", Type: "InvocationTransaction", Size: 229, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"a548f9b35e37eb22f68b853b0ee6979cff6d77340c72e5f668f91e64149347cb", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"7f7e20d324dc5018495396b4d8d6079e4f2acf756b6646df5f602471a3fa38c3", Type: "InvocationTransaction", Size: 229, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"c9347ef3382315260dfe124d158d6f2b6b01cc0f6bae1885bdffdd01cdf8fad5", Type: "ClaimTransaction", Size: 246, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"db8f0bb2f1158713a3074315a0a4766dd223d68092e2a54e5b72e0f4655fce3f", Type: "ContractTransaction", Size: 211, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:1}, 
{ ID:"8d7b73cd8fa42dab9b724d1d2a9cf00176e94463f5d3f04be8416c2058b86623", Type: "InvocationTransaction", Size: 229, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"72a31c8ce0dd1e8789dbe70156eed199f041a9e01a92d775a33b051a68587ecd", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "dd239114d05f6ea208076ea13507459602b4337970aef2b743dc0128c5888d76", b.PrevHash.ReverseString())
   assert.Equal(t, "f9d5487073e43cd1eccc8f317a8c20557001829e5ad0f7dcb9feeb6cee76977e", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1521193839, int(b.Timestamp))
   assert.Equal(t, 2028443, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40b41ee9a34889da08831ba7284fa135c2c67606d2aced516eb53a5a63485e9b439b488677dd815ae186c74dfe44bead1ff3cd34c7b683d856f1800a410b99a43c40b5c0867d5283416aac3a1962ad7e980705199c00bb0dbfabe2fb3ba633e56e2179412544beb8b056b24e41ad86c1ac4eb638d69e968065e2aa0efc372a2c6cf7402b713eaf6ed59cc7b75460505a02bf6605f2a636e2b02a4b7631afdbb401b7fe63c66f7019349c7a6e800ccbc0c00adc607770443de24ef514343cf7828986ea402e155e4d68f5392bec98a6cd9be51288afb52a5a8c0091b4f8871acf8764c449577f9d40b99a81cc09cfe4cd6776910683100986133d52d1e5fb9d335d7eb0ff403d58061f1fe9c5fb39648410c77d392aa68c7c7ecaa06d7727465df467284be7b1885d5164aeca4f0ad732e26b5b3297c28c249f2e73000021bff8c73e1e23fb", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001608bfbb8f9eba22f09fdd543c131121ce93761df73794ebadfc649a7bc387",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 3803, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode976(t *testing.T) {
	// block taken from mainnet: 00161a2d0e38159686aa7e368f082d086dfe124f6afbf7553496c7b9ae3ed643
   
   rawBlock := "000000002f3b70cf7372947a9afdd4e7b048d804f0454218f0a085deac772ca351f6b24c3fa860bc7220bbdc3c49b27b67b9925cb98e43fb08f41d154eff6a9e5bc8c8a92d8a1d5aff071900444dffae5da291ec59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501409d4acee94bc1fc4117ea25f18cf90740a252302ba853369a4b9f56dab089ddc9b1226390e2ee7eb2d713ff97db35b1e1890a4b0981bae0c981ffc470c71b9869406b053b728a1787a95a9eaa5062c1711f6295ed2d62e80d03e740ed664fa0be3c9cb1471c43048da53bfb57ba79396cb8d3d18cbb92790f0ee29939136340fb7a40a23a533ffe2e3b7d3b1370d59fdfc0c6fc88d8fc01dd9456655ba560ed1e8d6ca845716a0f765f308b625381d5cd68d7b4e73b5f63ce701d141da292c8ff800440cdc204d73d4e8909d82c85156e04ac248c3ce9cacde70dfee4fa409c15aac92b175dda0dff608a366be98114c612114b2326cd8133ac741ab044a516b44d4b554073fbc990dd5bfd3a16e05027ea07099387599625316462818c787cafda5c5e59f51b237229bfab581bd5e4fc599b5033eb0afd1c7f3ec0cfaa3af9ad15d79c5ff1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0b0000444dffae00000000800000018932e7653ee0b32de05ef658aaf4b0ca118360a472537f7f56cac1b3660259710000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500180d8f00000000a1ba4babb4d43df01df5d6627c241111bfce53ae014140d9180ede0e71ffaa075494d5188a34c323d26b89e1f4b51281f791ad7ed042a05f35630d5953d775c452b69c7839882a10ce81c8cd11c2b8215ee5afc8b7d812232103657560c7d86a272e0cb91b0b53266f3b6a932c3bd5dfd18c8450fe7eb555f38aac80000001e31775a01510c362909fa274666748a467a4a45c30fd9475114bb6371139cf770000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5007841cb0200000033eb21d847607597bc0f98a705ec23197a7008eb014140b33fcc2476cb3c02d37c037be5452ec3979cdd62d00ae27aef6133737188750005195a168b4724b2e561315e977aeafd92beab389e9e1049884b5d3d4be3b0b2232102d7fbec159bab4b0a9d0d94ffa96b7d4ca706d9f004b6f1ca9e050fee1fd606fdac8000000167d257ba3b727835e025586e02262b67e165063e57cced3159557216fd6cd5b70000029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500b33f71000000006a87c4144e365127806b0e14c4445a565392508c9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500752b7d000000000ad5396ea9c7b9f1a141ce440fce3dbb272f77d4014140549de821181425419a9db81ab0a787af7cd67d04597979f0d7124320f6eb735b90418bd357803164313c603815565897f3017c6a11ab2e3ed9a4d7492867594d2321030ee48aed27d04784b71d9ad8f2edbe36fab8067406939c2f4483ad17427e5590ac020002eb2ebebd2cea1b0f8dfe18b2da47dd6060fe8105537a0f7eb3bd6f76cd5534d400005db0ad7a9b3a49454c41c62845dd5ff75701864fe125ab1dc4b71e11c8e0c5c30000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60c0160000000000006ccaae2ca3326d8d1bdebd56a4bde172abb44655014140b7f19e1e57cbf7081802a30f124a9cd0446061fa97bce225782653c7860ea55a58d70a1bae227243b1331fff9775cbc615b633e1044e62862e75669b0976e72123210252acd495b3e141a1425d603cd8223eb4d3f3f72c7fa7204aa02e1c3cead02a5fac80000001dd0573a55cd05e4fc584c25c2efa4d96d2090a3f52e332b90a79e7c9261245900100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50046c323000000006a3aecab4327e2fda1b3ce120ec8ace5fdf3eacd9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000000ad5396ea9c7b9f1a141ce440fce3dbb272f77d401414015bfbab48d49fd45d5735004a43659a978672713c06365473d8666171f17e2444e9e81c26ac75d0bf1d348bd74538b54f039b8998b427fe4e6d2fddc992a846a232102823c61b7b999400ffcf4f5fc61510ca702e26de85009de753fbe9a4f858582f3ac800000013de70bffc3a51ec18adba76c0087af5d7f2beee1d704b7397304d5074d44a6860000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ca9a3b00000000eb3709f56eb024b3754bf8e4622948e465a7eb7b0141408519b91c23fba81fa8403205642c237b55f76ce2ad39ee92020a8f4adb2f77d701bbb4d21cec11d91a1128ea29a843fcb26a70b35af8682111257d4422269f3f2321036a4ef1225c1c5e68d342b31c84595618f1cd8ede366cc59956c597c085993bc6ac020001b0e0e62da553cdddbdaf3b9d5e6e03e3ba1d1c237118811f00f8e8b112e412ae0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c605ddb640000000000a0ab8a77047465a7e744d52995e03406385a5e1401414015bdbf6e403dbeafad761acf6901638cc2c3e78b07313a610939a7850391646e26e82fc1922da61a9c0af810eb1d8a79f9a10c7e90717ec0be543aa195e3b73423210230a665afddfd766154295448a8b84668f7c5e417e33e81b2127baf4b47de4ee0ac80000001d7348e3ccee22e34860be5a05deeb45b4d96215acffb96451ff178b0696109eb0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500286bee00000000afd405412264906a268a33b9eaaf897c8d57834a014140f1eb75f8ab361f48545f25d7da3d5283d3e74d16fe6311c15681e80fd100b61f953055d1153456a48b0988e8eb82a8851f85795ad853b305233ab72f04426cf2232103f991b5885ca379a5d39d21cae0f9548ac948b0f9874c6d603003c31f86eb412fac020001bb54f9c86e5fe1122725f2e69c94ccb9ce2c71571e484e6fe44852848be622d40000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60db3bb2040000000038f0cf52ac051c913290b9a59ba800f7e93303b00141405f075e46e6b29e0961bede85dc7faa944c9c1d7d9af91d232c54bd86ffe9359b1b253a9aa942848d405e714739bdf95c4bfe066e9a9181bdf76cab0268ab9db9232103a970ad4970accd1e8914f8f6c5443e88cde4524b91967af11247496fb3a11405ac02000214b83e6482af7672aa186aef92181a7484681765dc89703779537ff8d4bb29ea050005262637e3e8a43f67a5626b949e8fabe23449db9168fdd1e2fcccd844e3c0631100000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60a0e143010000000095d3c75166635a79d7d71cba4fc72fa4a003c1e0014140f855fc01c4ff4b7de67628f96b3662aac6b38603faf80e1af7425faa591ea2ed128cb3863183fb488bb428e9db497c3dacb701183ecc200e473dbdacd2e7b948232103a563f485e7ed4c5d06bfb121e29fc743eaf118b16c7d190ce536d131bd28919bac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 11 trans
	{ ID:"8f1ea4ddbae3773a86b99240c622ca00c44635d2f6a24c701112e9d218171b6a", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"cc5ec372adeb1d6601bc66e361a7a3daa41a2fac13ccf4308b5ce577ffd770b9", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0468e1dd192e62e6f5092b08c1c896147689d22fb8de37c872e6a9eaffb24c56", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7e63a7a8cd041251252ca74c29c5c12407a317fa652b2268302c96e3287f9e88", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5ca8b5bf35b6640696b05dd1c3aeb0098f291f54b4ee8beb81b2ba325535eac7", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a9a6bb41f9f70af8f2c79dc7bed6a20518f98b5a1ca6bf311d800b8d7706fb86", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b5158544cf4443cc55494921e14194cd2be2f993c99c3e99b00f3266c1f4da45", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"6c7c22b72b841d26c92a3f74c6156aca6954f88459962d26db1a1a887cb60bcb", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e536f9dbfba9a0ae42dfa54fa72f33fbbedcb0aa8a22e414f3d609ebe986fa81", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"626efd74f675f152a3a11ae0e7831ea305749f2e4e6dc380ada432fc65874a51", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9ae160e80f5561266c81485b6cc29190d14528c68300442c33a7b0c25dc8dc52", Type: "ClaimTransaction", Size: 237, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "4cb2f651a32c77acde85a0f0184245f004d848b0e7d4fd9a7a947273cf703b2f", b.PrevHash.ReverseString())
   assert.Equal(t, "a9c8c85b9e6aff4e151df408fb438eb95c92b9677bb2493cdcbb2072bc60a83f", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1511885357, int(b.Timestamp))
   assert.Equal(t, 1640447, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "409d4acee94bc1fc4117ea25f18cf90740a252302ba853369a4b9f56dab089ddc9b1226390e2ee7eb2d713ff97db35b1e1890a4b0981bae0c981ffc470c71b9869406b053b728a1787a95a9eaa5062c1711f6295ed2d62e80d03e740ed664fa0be3c9cb1471c43048da53bfb57ba79396cb8d3d18cbb92790f0ee29939136340fb7a40a23a533ffe2e3b7d3b1370d59fdfc0c6fc88d8fc01dd9456655ba560ed1e8d6ca845716a0f765f308b625381d5cd68d7b4e73b5f63ce701d141da292c8ff800440cdc204d73d4e8909d82c85156e04ac248c3ce9cacde70dfee4fa409c15aac92b175dda0dff608a366be98114c612114b2326cd8133ac741ab044a516b44d4b554073fbc990dd5bfd3a16e05027ea07099387599625316462818c787cafda5c5e59f51b237229bfab581bd5e4fc599b5033eb0afd1c7f3ec0cfaa3af9ad15d79c5f", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00161a2d0e38159686aa7e368f082d086dfe124f6afbf7553496c7b9ae3ed643",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2898, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode977(t *testing.T) {
	// block taken from mainnet: 00161a45fca74c4a427e7d361045cab50d05cf8eaaf50e7b3ab35711871a1b56
   
   rawBlock := "0000000095d9029b7e106842e03f962d5e05508e301154422df20505f80b4c88028af067fc9770564715ee0860df73d1062db8459640549a4a9a95058c641fe7c0e62ef331fdf458b9fa0b00a50faad914fa3d9059e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140b84519802047b3395ca5159cda385a29b36a35279bd7e33165f9c150f55e9e1c041fa1a5c16076bf6bf4b61ddf7f389eae75abffeaec1955a20c988f0c364c10403448447ea8798b5ceb68c7de5b6d06df48d97a8709dbcec8ea244930dc608af5a30fa6fdf1d587d364b5e912aad6ce74c9c36c2a4cb43937ff5ca5aa3f73215940660f0d5219b0f076f6827ee232f01768b928068ad8e513311d056f9ff2177c1d9e8c60cd595dbce959ee7e9df5a90707f099c51749b1c082ea957a9a13d3eb7140e963d39fcbe192d5a6da44fe7cd18e2665054acf66a5139f45feeee29e8cfe097981919ea20747fec90d43987ce2798e3303f3e69e5cee26c688dd1e9af468c2408d1072fce29cf53ffa430b3fcf34b5c87c58cca77be34b14d0bd99840fc5b5fcc03e615c209a6942923f77ab7dbe795fd4b29b42b38d5f27ae15ae2e1d5860aaf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000a50faad900000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"f32ee6c0e71f648c05959a4a9a54409645b82d06d173df6008ee1547567097fc", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "67f08a02884c0bf80505f22d425411308e50055e2d963fe04268107e9b02d995", b.PrevHash.ReverseString())
   assert.Equal(t, "f32ee6c0e71f648c05959a4a9a54409645b82d06d173df6008ee1547567097fc", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1492450609, int(b.Timestamp))
   assert.Equal(t, 785081, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40b84519802047b3395ca5159cda385a29b36a35279bd7e33165f9c150f55e9e1c041fa1a5c16076bf6bf4b61ddf7f389eae75abffeaec1955a20c988f0c364c10403448447ea8798b5ceb68c7de5b6d06df48d97a8709dbcec8ea244930dc608af5a30fa6fdf1d587d364b5e912aad6ce74c9c36c2a4cb43937ff5ca5aa3f73215940660f0d5219b0f076f6827ee232f01768b928068ad8e513311d056f9ff2177c1d9e8c60cd595dbce959ee7e9df5a90707f099c51749b1c082ea957a9a13d3eb7140e963d39fcbe192d5a6da44fe7cd18e2665054acf66a5139f45feeee29e8cfe097981919ea20747fec90d43987ce2798e3303f3e69e5cee26c688dd1e9af468c2408d1072fce29cf53ffa430b3fcf34b5c87c58cca77be34b14d0bd99840fc5b5fcc03e615c209a6942923f77ab7dbe795fd4b29b42b38d5f27ae15ae2e1d5860aa", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00161a45fca74c4a427e7d361045cab50d05cf8eaaf50e7b3ab35711871a1b56",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode978(t *testing.T) {
	// block taken from mainnet: 00161aba9524e9dc3f1706b841b4cb717927da6e2ce10f081a900c55d277bc94
   
   rawBlock := "00000000dd6feaf425ea94e63ae39433738eec6b058999d570ac4e5b7958e95f35b7d3ec858617384615307f6bce6074c2042528c5356c82666de1daefef37928e405b4d10c11559668f0d006844d71035e1a9b759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014059185e871fce714c2e4dd5827612adc75939a7c1fdf695fded7332dac593c9de34eb2573bc9943436444c6897eec1e4960dc3b60f567951f03243415c6927bc540372c919498abf856fcb1a8b63f1b30addb2a414121a679a77a049deb559a2a23c57666f7904d940795524e4fe2acfd4c7aa5a15cd83c4b328f4e4e4f20be18d440bb80d727a8a71cd6dd28e051033f3ee151deea56ae1472ebb72d1c94514a246b47c44614c1b3a6e40542022e579f85a842aa14ce9fcdf80419bc1465826c7ea140f8c2f72d8255505965ae804a3231313f047e7066d3acbc6fb983440a4cff2025e777334fe201242e79e927c4d6c42539c13dc1cc657941a208e396d8e40ad6964071e097a5ddeb0f5a357d146e951db5209e130269579a277220168f7a5edc8e2b153ac54c422cb4408b551cf6782c400d59ceec5154b54712f618ffb5c393d654f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100006844d71000000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"4d5b408e9237efefdae16d66826c35c5282504c27460ce6b7f30154638178685", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "ecd3b7355fe958795b4eac70d59989056bec8e733394e33ae694ea25f4ea6fdd", b.PrevHash.ReverseString())
   assert.Equal(t, "4d5b408e9237efefdae16d66826c35c5282504c27460ce6b7f30154638178685", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1494597904, int(b.Timestamp))
   assert.Equal(t, 888678, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4059185e871fce714c2e4dd5827612adc75939a7c1fdf695fded7332dac593c9de34eb2573bc9943436444c6897eec1e4960dc3b60f567951f03243415c6927bc540372c919498abf856fcb1a8b63f1b30addb2a414121a679a77a049deb559a2a23c57666f7904d940795524e4fe2acfd4c7aa5a15cd83c4b328f4e4e4f20be18d440bb80d727a8a71cd6dd28e051033f3ee151deea56ae1472ebb72d1c94514a246b47c44614c1b3a6e40542022e579f85a842aa14ce9fcdf80419bc1465826c7ea140f8c2f72d8255505965ae804a3231313f047e7066d3acbc6fb983440a4cff2025e777334fe201242e79e927c4d6c42539c13dc1cc657941a208e396d8e40ad6964071e097a5ddeb0f5a357d146e951db5209e130269579a277220168f7a5edc8e2b153ac54c422cb4408b551cf6782c400d59ceec5154b54712f618ffb5c393d654", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00161aba9524e9dc3f1706b841b4cb717927da6e2ce10f081a900c55d277bc94",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode979(t *testing.T) {
	// block taken from mainnet: 00161cb11cc684201b56580133ec01c5849c5277362c7ccb71b5154b3d56e484
   
   rawBlock := "000000006158920d61c1033a290547ac15db9845c5e5d5cf46a3d49d63b8ae27e655d92157da4d0f771f64f9ec51017322e382a845c254aa4ec0fc1700288529d0e291fecf297758abc60500a6517beb9268edca59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140e7e17df3f19e0a028541f28b1de40f45403b5b740e1f3c85d855a1afe49a61aa0ef7e1ccff679825aa9e9dc02aa9289ffb977834d8cc517401ead92a4648ccd540bc603ccd60722651506a51098867f1b5f1f230fe08d1391460e7956b234c6336cf8d786ef2d705eb16d12e7fd1248edf4a0a37082617d39f3177ff9084edbff8408c24c0ab0628729fe11fd4ee537799149dd9f335e772edf1cec595665d345e7cb306e903f8c1d8ba79193fa6bec21868f8cfe07e81242b8c8650e749495b61a4408c645fac75b0b793c13ea65a7b662d8987999cfe5ed777d040b19a1cef316bcd2603a4834b19789365f3358fa2c873b24a0501f80c679d6c4226301d4c8b844d40553b236f739e4d66fbd9cd3743db88f929f87f0daf935b8569a33d8b904386a0fc54cb499c4291b51f769f615e5807fc94746224949a04004e469b2dba70f6d0f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000a6517beb00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"fe91e2d02985280017fcc04eaa54c245a882e322730151ecf9641f770f4dda57", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "21d955e627aeb8639dd4a346cfd5e5c54598db15ac4705293a03c1610d925861", b.PrevHash.ReverseString())
   assert.Equal(t, "fe91e2d02985280017fcc04eaa54c245a882e322730151ecf9641f770f4dda57", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1484204495, int(b.Timestamp))
   assert.Equal(t, 378539, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40e7e17df3f19e0a028541f28b1de40f45403b5b740e1f3c85d855a1afe49a61aa0ef7e1ccff679825aa9e9dc02aa9289ffb977834d8cc517401ead92a4648ccd540bc603ccd60722651506a51098867f1b5f1f230fe08d1391460e7956b234c6336cf8d786ef2d705eb16d12e7fd1248edf4a0a37082617d39f3177ff9084edbff8408c24c0ab0628729fe11fd4ee537799149dd9f335e772edf1cec595665d345e7cb306e903f8c1d8ba79193fa6bec21868f8cfe07e81242b8c8650e749495b61a4408c645fac75b0b793c13ea65a7b662d8987999cfe5ed777d040b19a1cef316bcd2603a4834b19789365f3358fa2c873b24a0501f80c679d6c4226301d4c8b844d40553b236f739e4d66fbd9cd3743db88f929f87f0daf935b8569a33d8b904386a0fc54cb499c4291b51f769f615e5807fc94746224949a04004e469b2dba70f6d0", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00161cb11cc684201b56580133ec01c5849c5277362c7ccb71b5154b3d56e484",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode980(t *testing.T) {
	// block taken from mainnet: 00161cc43073269b9d0aa2365f35fdb0e920e9051f59a92de1ba4d0314832600
   
   rawBlock := "00000000422b1b8b6ad10ef012af1efaa6a1d16899920c5ea8fbaaf17ff9dde8c5a7707d5375e9cda6aa70a17ceed89d36903790851f6a042ada5f098bd06951cbea945a414080581f3c06006bfb7ba31078053059e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014078d5e6da2ce702d77c38e027fbf4cf00b3546e57ee54c038d36161662ec7a3bd56f782a25d97ef79b7a64c4b8d7b6d547bc0b14a88722eec9ac7d247436685c9409105707488f190fd531a76245061a4ec4bc53b367110d1593823ce47a6811dedd6848617eda1b9a5c6cee4c7df9fdcf6c5d1a6abb5a1fa8f3478074608e3b125406428f583594b490b756ad3d5d32aee3dacad6ce82a79294649dfcb298ca914545c9a2176be6676de6a1c0376307dac5db29b1df3f614d465f45726b22baa3ca140cc837e65e74fe0cbc9e40be3e456875ff19833b9c15c8f3978db2be654c209cf6d5ebe778f2c1d9806c6e2b2bba0f95d1e637c68b948a055ef17d23d6da6dc0840b765b39f64db23024647758dd030f98a6898cd1640506849183cac6107cb3aece5723ebf71bca13d099b164e595c6558465df64a42ad22c56c21f01ece11afcaf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100006bfb7ba300000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"5a94eacb5169d08b095fda2a046a1f85903790369dd8ee7ca170aaa6cde97553", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "7d70a7c5e8ddf97ff1aafba85e0c929968d1a1a6fa1eaf12f00ed16a8b1b2b42", b.PrevHash.ReverseString())
   assert.Equal(t, "5a94eacb5169d08b095fda2a046a1f85903790369dd8ee7ca170aaa6cde97553", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1484800065, int(b.Timestamp))
   assert.Equal(t, 408607, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4078d5e6da2ce702d77c38e027fbf4cf00b3546e57ee54c038d36161662ec7a3bd56f782a25d97ef79b7a64c4b8d7b6d547bc0b14a88722eec9ac7d247436685c9409105707488f190fd531a76245061a4ec4bc53b367110d1593823ce47a6811dedd6848617eda1b9a5c6cee4c7df9fdcf6c5d1a6abb5a1fa8f3478074608e3b125406428f583594b490b756ad3d5d32aee3dacad6ce82a79294649dfcb298ca914545c9a2176be6676de6a1c0376307dac5db29b1df3f614d465f45726b22baa3ca140cc837e65e74fe0cbc9e40be3e456875ff19833b9c15c8f3978db2be654c209cf6d5ebe778f2c1d9806c6e2b2bba0f95d1e637c68b948a055ef17d23d6da6dc0840b765b39f64db23024647758dd030f98a6898cd1640506849183cac6107cb3aece5723ebf71bca13d099b164e595c6558465df64a42ad22c56c21f01ece11afca", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00161cc43073269b9d0aa2365f35fdb0e920e9051f59a92de1ba4d0314832600",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode981(t *testing.T) {
	// block taken from mainnet: 00161e19f5c0b6bc957b93b02aef139f7fe7302a0827e1db2fbc193dfc766318
   
   rawBlock := "00000000018a907c1e831be898456c5fbd035cc69b8469051609c2b3f64164d277468958989e198a8f0953eec55871548f004ad96d72385c86b5019316a5abddc166d4c211699758d560070040ba50d03443546159e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014068fe1bb48882970c0dd12a7a42dee510f68e918574aa23664dcd83febc7853cf02c281bdfa9ed45f906debd16ae7f39d2b38b6325485cf64e060c45abd395925408462870f86c3241d51077a08f55d76962f568d8776c5e747e570439b5a948c57c6ad660d3630ae19e93cbc7ff406154ff034ca9d766b2a5736862c97305ddfcf40fba05291bb254d705059c6f9dccf9ecfd7706bd5eba1426d62a5bcfbc1ee8ae7444420093fb7c408172fd44bc9a41cff86480329c7481db98763dbde92d392e1400898ca6a6cca3b9054853f77015b121eb159e01511cf092fc49841a3f96bc0573b7153f6feada2bfa37f700de189d6a4d554645353b8c343f5ac0e24b8391bc440996ff57a626c6c7bd565143eb90e4057f4b39562c8fc8d2b9a8450078594e6f840f3ef92469171c1f31a9c3d06430e3c89894d09809ee492bc7142792b9ce023f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae01000040ba50d000000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"c2d466c1ddaba5169301b5865c38726dd94a008f547158c5ee53098f8a199e98", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "58894677d26441f6b3c209160569849bc65c03bd5f6c4598e81b831e7c908a01", b.PrevHash.ReverseString())
   assert.Equal(t, "c2d466c1ddaba5169301b5865c38726dd94a008f547158c5ee53098f8a199e98", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1486317841, int(b.Timestamp))
   assert.Equal(t, 483541, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4068fe1bb48882970c0dd12a7a42dee510f68e918574aa23664dcd83febc7853cf02c281bdfa9ed45f906debd16ae7f39d2b38b6325485cf64e060c45abd395925408462870f86c3241d51077a08f55d76962f568d8776c5e747e570439b5a948c57c6ad660d3630ae19e93cbc7ff406154ff034ca9d766b2a5736862c97305ddfcf40fba05291bb254d705059c6f9dccf9ecfd7706bd5eba1426d62a5bcfbc1ee8ae7444420093fb7c408172fd44bc9a41cff86480329c7481db98763dbde92d392e1400898ca6a6cca3b9054853f77015b121eb159e01511cf092fc49841a3f96bc0573b7153f6feada2bfa37f700de189d6a4d554645353b8c343f5ac0e24b8391bc440996ff57a626c6c7bd565143eb90e4057f4b39562c8fc8d2b9a8450078594e6f840f3ef92469171c1f31a9c3d06430e3c89894d09809ee492bc7142792b9ce023", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00161e19f5c0b6bc957b93b02aef139f7fe7302a0827e1db2fbc193dfc766318",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode982(t *testing.T) {
	// block taken from mainnet: 00162169881cd9688c0022cacf2652186608ab230d1a6f2b2a5c195555e49726
   
   rawBlock := "00000000626a79fbf4ce4958f81de6336303e11f5b9fcf350aa36761b2ae23647883dfdecfb1cd5bf8ef70446a4587490df9ed76ed02f519aa4ebfd600c519ae9c3664ca1bd27d5ab5191d00ec32725ffd050d9c59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140d21b484c34f126999664ff2009867047d7492180bd1cf0917f7ad77dc5253f7d82108c4b5e45581862ed119ba082cc71cd0ab585ffdd033c7ee82dda7b709b13401311e9aa55d9f94a1e3f3ee31012d034d20a9050f341e6e0ac7429e1b9eb5ace4d7808cade98a592d847a7f9f84ea1a33d33f633f22b3be99ea219cc9bba3a2d40be36ea638674258b83d833de340288ab4b699eaa6a64d95a926dcb7fe7f531ff121a5c9f3fdb2a2e683d444136af437dae69cabebb68d2364a50a9aeb81c6afe403f4d42e221999306c2972f0ea03cd75eff47f0ec9e5650837af70318abb3ce77fb0d7dbc977dcf4daeb5fb720e2f14a085193cfc581e54444120089c67d7a6d74009f629f3e6b557abe3edb2fbbb0723add838105134f4f4bdfbaeef99d1f3ac51d4c2dbe00209c438df0fd6d35fb4caf0053ccc9a6a030dbc782c510d6d35ab19f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae060000ec32725f0000000080000001c118d7c2ac4ad445bc0028ec23961966949c57cb182e50b1a73a6de3a6b797680000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5007e8c7101000000cfe2935d0e2aa463c061eafd0494586f450eecb2014140616106f4d607fc2bf7c57d0b31885b0424edc54b40cc6a14622802078c9d8826aa3fe8592779dfc6d328e0e40c6089a72f64f67f94b005c0874b8cbaa9606ece232103d6d9a09c0322373e0adfb83356d7faa098fc3bcc26471f7521f22d356dbed834ac020001e1abc890693e698bf34553653c98eef7ddfd344cd668b5ff2e49017b137b41800000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60f7610b0000000000c39137fff67818bc03ea530bb422fab64714837f014140c7547322a8fada1cabb06b066924a8cb239ad8bee8876eeccf11a5934fb21e619be8ae3573c2979de6129c427db547c4bd086b8b4d298f1eb7426ecca2e990a32321037cdac674394fc521cb7702839f6802bbe422a6345663dbbf7f791f8854efe0c7ac0200011b0bc85e9e7f167c03dbd9df7ae8d0e546a48eca7969de5c1d00062e70baf8c80000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60f097ed000000000019f59762e70b3fb55487588f8f0d1b0850846ab8014140b658339de5231f5a41a405c1346f9f9575580e71612c60904bcec5773ee4daf34e616d3d74cdadc30e15e392c1f7d3085ff550246e03dcf2f07d0cb93fb36c24232103cdc892be6ea2db76d51309fbc02c9a0d0ee9ca576e558f70d7a4cc845b5b1744ac80000001104abdc6f0ca995962ba2afc4aa6d08c12b81b9191e590af2c5a086517d5fb440000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5007ddaac00000000780b45773b9ee3112c4cc115c7308932370f2b07014140c988ece2dbdee8624dc1f8a48da7a41e568d861181df165795202541ba89407ce45f9f7617ca0303cc33634d2c0980c6aa61f0063db47793b7170b4accf7c60f23210307627b294c1966a325d103bf6f9ed9c4ac399f264dd37b6f8fb443b1b8ef53a3acd1015307005039278c0400144ac9be59b0d13d00ebe1e26991f999b8d5e7e3ef146aec5a6b989dd8e96dbfb236e1f01bc01524677353c1087472616e7366657267cf9472821400ceb06ca780c2a937fec5bbec51b9f1000000000000000002206aec5a6b989dd8e96dbfb236e1f01bc015246773f1057c078014000000014140ac171266f1d1cfac2fd443a46efbbc52432cef4dafc6cadb30fe7e6c2d20a0fbbf964eef51e80a747b17f55b4d4c9694f8b214ff65d8aa5be5a603d12d61c858232102acec337f7694f0e97320fb296e5ea811764b31560398e09de256deba16a82772ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"6da961624b644dc5d7bec8bbf206b91ec5329166b8a1fffc6fabe6c06a2e1a39", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"e2a64213ea8a8a185c16c280b6b99b536d55cae68feeee673b283bf8b10a4605", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0fe20519b3e2b0b590ff9e34141b7ed2340d1e863318f3f0809d4d533d5bec95", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0a9c065fe706c388f490d152e28ff307c0996ab3480f7d2b0454d24c34949bc5", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"fcc96f7cac0529aaae8e218ee1706f295c6808bc87c7d42affd4962a3ee0ab63", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1c58363bb5f4a1ed58d6dd7f55d1894b21c276785053b8f987feb414257fcc93", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "dedf83786423aeb26167a30a35cf9f5b1fe1036333e61df85849cef4fb796a62", b.PrevHash.ReverseString())
   assert.Equal(t, "ca64369cae19c500d6bf4eaa19f502ed76edf90d4987456a4470eff85bcdb1cf", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1518195227, int(b.Timestamp))
   assert.Equal(t, 1907125, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40d21b484c34f126999664ff2009867047d7492180bd1cf0917f7ad77dc5253f7d82108c4b5e45581862ed119ba082cc71cd0ab585ffdd033c7ee82dda7b709b13401311e9aa55d9f94a1e3f3ee31012d034d20a9050f341e6e0ac7429e1b9eb5ace4d7808cade98a592d847a7f9f84ea1a33d33f633f22b3be99ea219cc9bba3a2d40be36ea638674258b83d833de340288ab4b699eaa6a64d95a926dcb7fe7f531ff121a5c9f3fdb2a2e683d444136af437dae69cabebb68d2364a50a9aeb81c6afe403f4d42e221999306c2972f0ea03cd75eff47f0ec9e5650837af70318abb3ce77fb0d7dbc977dcf4daeb5fb720e2f14a085193cfc581e54444120089c67d7a6d74009f629f3e6b557abe3edb2fbbb0723add838105134f4f4bdfbaeef99d1f3ac51d4c2dbe00209c438df0fd6d35fb4caf0053ccc9a6a030dbc782c510d6d35ab19", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00162169881cd9688c0022cacf2652186608ab230d1a6f2b2a5c195555e49726",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1724, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode983(t *testing.T) {
	// block taken from mainnet: 00162e9d4b76c9bc38db75bc47a5b59c0e9f430165fd3a28464f46869a2701c3
   
   rawBlock := "00000000359597a64537c4b822fa0c8f56a1f686d06c5ee4df6af547f56ff5ffaaa1427fa04add63c7237d4a713f93cdf59c8d9e7f11f93ea1b804cbcaeeeb7f34518ac03a21d05a45a32000ef5d22887a5f4aee59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140889b5f5240245f52643b608db90ccd14e633ea9cc20304e0a3dff03d03b57452eee38c84c17932221bef884441e42aef1406201ae8e30cd7e97e5d3ee64353c740bd75dc710e20673523d0a462facb9df65e7a1276a4a907b4fc73fca6fcae023a6d53933f26bf93e29c1a137d65cf306029769103c38d234b868cf7b5183cf3c840fa980b7b11a539f665e54936240d291a4f203885f4a29be5286c2ae43ac248083af028b64821a83922111d8cae5fbb4447f98a409405ba3d1d5851a6d5bf9ba2405e7df8e8de4c5e6e02d84901c1b5b06487f31911265918e87a25218f0fd9fc0c1774bbec357ae62c41242fc8f4f3f4b7dbc2600f949ef7e11ade266a7ef0592240b74ef26a3f1e0aa5b84a1e89cfa7a4a606e2504a9f87f33be0ec247ce7006f28ba5d57b8990c4dc5526321daaf32b8c36e8e5a1c3bb4e2a908705b514bcce31ff1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae080000ef5d2288000000000200019ce6a255563d8b3840b4e11f9ef8f6b8c4175a59e53850faab98b5dd5d75ecf10000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6050d804000000000096a0eeba71638e75df5734b8326b71b6965afa72014140254e94976ede2925dcb6954fe702214880994a61dcf7dd6c9de241c3420fed6447d67b3cf813522d0cb785a6f15e3f21b2a91db1a14c0be292378ba3313ff87a2321023e0f35691cbc122623004d4c702427bc0c40a96c76d7fb45930d13800d8a2632acd10159040084d71714657150d9fc5487f131350367087c54f556303311143fea0cf083b5314a1cd08e8e7db29d0b6c03387153c1087472616e73666572677a9aade2572b1507599a582eb1f177f31fd6867ff166db0c2859cbb67ab9000000000000000001203fea0cf083b5314a1cd08e8e7db29d0b6c0338710000014140ababe3f65a3cc69f84408d8dbeff309cf719b21c8ec3494114dfa3f954058906cf113728d9fefc43d68e41409804d0f07e792f706d00946ae05c56a2e7e8d48323210320b6ed83834a08b95c0d14bb5b881c8155cd80cc5f01848f6870c641c4fe9f6aac80000001061087c25bccad4be0af7eb1870485b1d309bdba75b5edf13d6c50734c043f9c0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500cb4c00010000002cb25791b096008b59447d9ccda8c507c9dba6b001414005d1833b4d91406311e4c80b8069c61b4be7ab4e973f85dab2844d1908a4fa585ea4cf7a3f91965452f1e26b3c9639ca67fcab0e9c85214771d8441899b3a63523210344a1cfbca116004350fc6ab9ab5414b97ad526b7aec04313b7828f9e71e15c11acd1016d206b9604a8ae2c03f1a58e55dbe814b64c43b3343c85f7c0a00c98675a9cafbff2288558ca14c02f47b85f4a2404f4a53ff7a693d445dd2b538e2a0c1db1ae5061c15be14f916bd1e67852c10b63616e63656c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e00000000000000000120d809462225c24db2cf182388db3f75e922a20f4c0128c7406278b9c2b653770bfcb81f5b0538471f6bec74739951171263c0c44ac5000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140b3c6fa83976e984ee9c3f6db639b9ac25e1c8cadb69a48e577d607b8f44b06fa76ee0a512474d3c3fcd836fc35ea6a03929f61d80645f43cbf6efbb3370365da232103a6f88302bb9bf1edb700e4b018aa420d1ac2c783511b57128a73f36190c0a4daac41405d2eda63479fe80cbf97aeb26d418ab7e2e7a79f2240c234bdc61054bdca1c33cfddd050da427566641db6bb7a3ee1d93dbe956f88cc46b3f8701627c01ccadb232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac800000028ce171d4999aedec216870628c2280b11e16248f65c690a54b386a89d22d493200003205c52218670d479cf281a83346dce097f26123e64595f1c5c5fa228906a0d40000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50094357700000000e742ca73a9e5fe86ffd419874df1a74288ea907f01414080219ad49d7cccc5f1414986cec404696a7e1c0b0f9db4396fd0b8b56ba76d0e05dac5672ba330c4f9bd2b8a2af3992c79b20438af413cbe7ca04aceac187994232102a529a5a293022a797931d824f813badebd77f80c950c4eeed18c01884f7421e1ac8000000189c779e90e289434deef5cb2687e81b2dead605dd370f6a48e02b66b0e79d6f60000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500eb08bf010000007e024cf3233240b38c3c0cfb2435c783a5fd0793014140071f17193e262b29069ba3bd076ed309d7ed63319e310896322715fb4ea9b11218a1b647ae9249873dd68a57381e8439522db104cbcb4282102f8cbc719f5519232102dfaaf3a37a628351f453da0c4c73a7211e14ca8845b818fcca1a5faca8a61252ac020001e4f2175a54ebc580eaf50101ada00e829f497252e7b98f6eee8585432ff576530000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c602abd00000000000083ad939e10d38d2a359f1f4d372ea38598280e9501414066b9e196d51db700f5791f7c8237458260841dd7700f664ae877c32a95a1107f56bb1753020b0a3cd9c83efd0fc4bd98004c88dd3e22e13be696198768d415352321023629c870fde83b427e7790321469f5844c360d2ddbd22fd7eef7a310bce3a7e3ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 8 trans
	{ ID:"cdd3b15817fe7e5371154318617a3fb73f3ac2545b7e7f06593eea784cbc3888", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"343d9ead4faa496147be456330f083d610a2ccd02ce5a17ae6b02d3ce7b3c324", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"d504f3635ce190ee8a989671f9937e9f95b47327463585a278b215cda52ed7c6", Type: "InvocationTransaction", Size: 227, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"048c66b708bb67f41aebb005b7b1ff33960bd559b79eabf17d5949afc20220ff", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a969809d7834942a7cff6c9943a0ad3bce5050665d18a35649e718a597f467b1", Type: "InvocationTransaction", Size: 443, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"b4fc9e35303550b73d4726004b7675c4eb626740d13db1803182606ba807a707", Type: "ContractTransaction", Size: 236, Version: 0, InputsLen: 2, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"0e8757d9a177ac9a57dd4c982bcd4e89256e1126b86a51ab5812fcb08853c421", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"662cfab6197122e6f294519afe624cfe74833f074374f5592643d1d5ea0a23d9", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "7f42a1aafff56ff547f56adfe45e6cd086f6a1568f0cfa22b8c43745a6979535", b.PrevHash.ReverseString())
   assert.Equal(t, "c08a51347febeecacb04b8a13ef9117f9e8d9cf5cd933f714a7d23c763dd4aa0", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1523589434, int(b.Timestamp))
   assert.Equal(t, 2138949, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40889b5f5240245f52643b608db90ccd14e633ea9cc20304e0a3dff03d03b57452eee38c84c17932221bef884441e42aef1406201ae8e30cd7e97e5d3ee64353c740bd75dc710e20673523d0a462facb9df65e7a1276a4a907b4fc73fca6fcae023a6d53933f26bf93e29c1a137d65cf306029769103c38d234b868cf7b5183cf3c840fa980b7b11a539f665e54936240d291a4f203885f4a29be5286c2ae43ac248083af028b64821a83922111d8cae5fbb4447f98a409405ba3d1d5851a6d5bf9ba2405e7df8e8de4c5e6e02d84901c1b5b06487f31911265918e87a25218f0fd9fc0c1774bbec357ae62c41242fc8f4f3f4b7dbc2600f949ef7e11ade266a7ef0592240b74ef26a3f1e0aa5b84a1e89cfa7a4a606e2504a9f87f33be0ec247ce7006f28ba5d57b8990c4dc5526321daaf32b8c36e8e5a1c3bb4e2a908705b514bcce31f", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00162e9d4b76c9bc38db75bc47a5b59c0e9f430165fd3a28464f46869a2701c3",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 2402, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode984(t *testing.T) {
	// block taken from mainnet: 001632084bd64a3fccc5e2651ac198f80ded70c7cf89879de71a26f9308775c1
   
   rawBlock := "0000000064bcb845105cd479b60701f2dedd017db039466764c5203ac06bd64f6ca2b0137e0e5e3fde4d718a8af6fa2a928350a3b7cd4b11f6e5b607eed6628a54a1ca3e85000e5ab54318007d272c8a765ea75d59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140f44e6039dc64dbb335d23726fb1d6b6a33a6c96412da50b3a758ab4c04db9c48c61cd2fa3ade67c3c45ac51a941fb97db7b270aed86426d32f7f8c346dc1d41b40e0f245cae8e23c85acf4493c13fed962690c0b4eaac8220fc72cd1c18151cda69c8041bebb3113b4b55b88a1013f6e6df16afda068117f13aeb95fd27402e583402c77353facea55a74ce7359deb8ae65a96cc611378fa519bd5458c5e3bf8ddb20d34e9ab39d915ff322c8aefcf4c7ab4c6e993c78c730940a091c4ec18feb18b4098873ffe5a371f4efca91d8222aa7e90ae2db39cf117bc16f67b0c70a4e57c0c45af388b5a19ce848c21be01587e6613ccf4b6ad27301089366a027128803e004057110249ac9cd3181db717782ae76de2ef228e06f2c28e094b2d42eb58b4ea9c19313672bdfaf342d7da75b3031b8ebbef136f7738c48cd0a5803741d47896c7f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0700007d272c8a00000000800000018ce49ed9b70b3fcffc856b8daf40f14a1ca979ea6d3fc7e55fe75e11582f9ed60000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b0000000061b643b18eb9a67e637fb53ea3f13b2a458647e1014140ddcc05861663218e107c08bd5b8d8763f9be41dbc3c573c852d98a9705ad446a0b1ba97d123f87613dcd650fa1d3cd9d95b9f04e7b70a69b031fb933f2c79149232103eb2af38d8f445f4f62d7ca88d770a4e246603d9758ab1b5ef47f444098be351dac80000001fad64d508bdd3110b0f002f95f21db89dca7580fc388d4c64fa1d00e0fa90a680000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c4308b0700000004218d9d1847a8d1629dbd1202b4fe5e27b4fa870141404b28add82593befa22c487dfea38de91a0a3f99ac5a2e6ed2f3499ad91a2f29e00f2a21ea8519b38ef58ec25f10f3587bd10c1736bf73922be11ac9000a7f604232102eeec32da0c71df425c963e51af3139fb482f1c0983057a64ff155048bacabad2ac80000001e26ee43e1b7924224530b78dde589de0eeaddfbbdb7637908089d7452fc95bdf0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ab9041000000003913f6315670886ecf9e050ad4be811adb3f3986014140fe66420df7bc8eee63ae669428ffb83967812afce21806869333b1312d9366d85e1dbf51be0714ccf3929b254d92e03a44092a3d2fd808bd8143ecce8cdf9d7e232103321795f5e5b46e8d4b417b447b3e77de1c47ced390595f6d2baf2541ce80efe0ac0200015f6abef98b1592614c3365e89c564d7503e2c1128a738fa6ae83a9014a0207870000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60f00300000000000096073c21dfb346b0ccbb9f877a448c72f1648be70141407eaea5226fca3563dad032c97346f6b74dc804e8234a1e57c2f8d5b87188f3805c7e608e16211979a1ee80dae7382bda60b5a3fc1239aac7872e239655d9cb502321033f7a792717cdb6ec30b1ce3dbd1f41de444e44bcdd3ddb5ae2b741135d4c9faeac8000000135cfdff905dd9cc9677115906719bb1753380c03ca42adab8a236916a78384560000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5001110240100000015f62a897a39a1b73b61328193ec0420ffadec45014140c53488d617e5c6dc9cca671aa422fa7989fe4ecfc53b7f5eb44e894affe7a4fe8fa15340b7622aceb54ab6746d07e56808c5da3a973c3c9b75e9d8f9c7b577fb2321034f555bc344c076af00822f3301a908ccc01880dc26a8f7c8c249ad66c89b04f8ac020001a987430ca1f8c4ac211cc35df445910a4fe3ca57ab19c601bd920dcc367bfaaf0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60102b8a21000000003da6f85ee4b980d83ced35c6f97fb9605790a77b0141401c5d7cf72d97f6f141dcb2b8d20916dc681569d46b4cc625d0b0ef7274cba725c46b1a776745d554feeb2ce0e60b3209ec0689cb2f6f1e2a5c0d7ddebd1db3df2321024d96fa37aa67476220e2ce66a16145275ece833adb6355851064ce09e11851b2ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 7 trans
	{ ID:"f1486bf59a2258be8c25b43e724ccd8c7efc8a64bfcb3a5bb579e7222f1a1716", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"6e03fe2a18abdd4db9a71ef9726fa2341d2054464a3f3f9c9e60d2bc966c7026", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"08027f0279f7d04c2b34db391548343731c66ce943642c82d88083f3c418704d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1251b77b3a1792f327e35f7f55fef5b2829c5f0e8f03189fce8cf712054bf4e8", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"3e7fe8e12390d74babcd3444c31b179fe9be811322590b22f25e1c45823761af", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"063dfbcaeca7c9e9a350e720bf6acbb46d78fafe6b64204f4f279a61a5a9ce03", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ca52baeb04d4de2d480e75b2514c411503a5aa6edca6d227e7128340e54c6fff", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "13b0a26c4fd66bc03a20c564674639b07d01dddef20107b679d45c1045b8bc64", b.PrevHash.ReverseString())
   assert.Equal(t, "3ecaa1548a62d6ee07b6e5f6114bcdb7a35083922afaf68a8a714dde3f5e0e7e", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1510867077, int(b.Timestamp))
   assert.Equal(t, 1590197, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40f44e6039dc64dbb335d23726fb1d6b6a33a6c96412da50b3a758ab4c04db9c48c61cd2fa3ade67c3c45ac51a941fb97db7b270aed86426d32f7f8c346dc1d41b40e0f245cae8e23c85acf4493c13fed962690c0b4eaac8220fc72cd1c18151cda69c8041bebb3113b4b55b88a1013f6e6df16afda068117f13aeb95fd27402e583402c77353facea55a74ce7359deb8ae65a96cc611378fa519bd5458c5e3bf8ddb20d34e9ab39d915ff322c8aefcf4c7ab4c6e993c78c730940a091c4ec18feb18b4098873ffe5a371f4efca91d8222aa7e90ae2db39cf117bc16f67b0c70a4e57c0c45af388b5a19ce848c21be01587e6613ccf4b6ad27301089366a027128803e004057110249ac9cd3181db717782ae76de2ef228e06f2c28e094b2d42eb58b4ea9c19313672bdfaf342d7da75b3031b8ebbef136f7738c48cd0a5803741d47896c7", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "001632084bd64a3fccc5e2651ac198f80ded70c7cf89879de71a26f9308775c1",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1900, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode985(t *testing.T) {
	// block taken from mainnet: 00163e53a111c1f6adb7073d9435cd8e3e3e8f3894c5e04c1676343a9dfb59b3
   
   rawBlock := "00000000cdf6b65c9dd8bef44558a0c5f7317a971da8688ceadda4784e9ac501ece3c537cd34713e51812f713df3308a4bd6f0c27dcb615c41e8c5ae2c291168e7974a4c8d8fa15951c413008f991f831d7e51ae59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140606950e236956c8f784de05cdf583f297f8e54e28ab7c1dc280a88d638c9e4ac9e3dab2f9e18437df0c4d5ed8c883d412f23cfa1f4961dbe696e5ff66fa378d2403527c9b7ac1e837c257e98e0e2d6d49d3cc923cddaa742e89125bf7f9503bab465f96f7e5ba4e3816920d75d83ffbfff92fe0c1f30b81b528d5bd3079d66166140005a9f0c5b8d9225225ebc0f9d166779682b1a5e2189e9453bffec3e4fb8bddb42a4d20d88a3809fb27a6c270d490b95a1731ffab95394c99f397e426a46d6f94089e087998f26f321816c7ad4eb4c1fde459571fd07b7cb92b64bc2948ad2603f74d9cc07fc468928d64a545766c4a6002703a34d4c83f60a0050c7dc58e0a1824021753f7617a9e7a676046aac88efbd2c91ddc4a519bb35e38c9e5ca460e617ca980936adf26c6fe00f9f70b880396694ca38b4f3937122b1213ef44623fe61bef1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0700008f991f830000000080000001839f28c781596386ba403fe386bfd8ff1043498518d8037e8ead74d7da4ad43a0100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b0000000096af7d7d74780f8252a1fe93b66a0fd8b6fd4f9001414083becd4e9a1f22287b8752d62c5deabf9d5cb562316475522203b0a996bde4b1530e14618ba63f5db7a042fd63bae962c16fa2ce4319ef25e1756825cb14ccdd23210343625121b380c81eac9fad47b867425fba50b8849afc79796e63f530ab321ffcac80000001447e1657ab283b1262b416001757566778045f94e108d6649671823aeadb96080100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50027b9290000000080024321573a8d788803cdfc6454af3bebe0f04e014140d121077508d625075918454468468e40cb3c8c3c4b0da95062d75afb4f86f7aff6a5b955701ad45e54be754d2b2b79a3c0d84a9c5c29ad3198359af7a331f21123210343625121b380c81eac9fad47b867425fba50b8849afc79796e63f530ab321ffcac8000000144f2cb5e65429fec545ec72c57b21f4c3d9bbe168f897f6745b5993b63e884650000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5008589dc000000004e6d05b6970ba11768393ba101276cf72ddb3b340141408d458b067d5c255099dbb26f603eec38c3c24334fe58aabc39c82c1385292659eba870ecd955a747dfd5dcee51050d2e7e17491fc560a2f66fc0856b5814c2182321021b5c1d39f9650f2ce0b5f3f14426ad3ac1ed5a3f85c2742ebadf64aa92095831ac800000011b4d7d712cd28efb9216a4d4569da3e10d166cac7716557e81fc440d3a5cc7630100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5006d5d43060000004e6d05b6970ba11768393ba101276cf72ddb3b349b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5007f3e360200000065d9c544180dc308c6028b132c0b7478eb27521701414092b7e662e24d6150a352f709d548f537ab44df39fa779230740d55c2441ab5328496090d6802b1bbe192053811c1286e3970838dea56935a741250406402abcf23210343625121b380c81eac9fad47b867425fba50b8849afc79796e63f530ab321ffcac0200012a209704f9a707b5586e71ba444b19c7c3d1535b099da982730461a46632c8340000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c603060000000000000cee2c6c6a15ee1e78b0027fdfdf29f6b697d65eb01414071f160c0648a6d80534b791048a20005c268a09449014d5c49869fe85234a6c94fa652f78644b218204620452767f4b0a571d51245000b022506c5b5114584692321039b88440f977de8d90b9659c40c688c0f9dcf096cefb05812618d68af37740b6bac0200014e90b40e3cd01f64149d08002c98d13357d216b219819acd1b4ef631a364e2260000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6040f7040000000000a910c1719148c8ca7ca9dd5ca3a3978db8192b190141409865aeec6db101e4f80a3d0a09e01b8be9846224eb20ae71152a05e24888fce514555851ebca0ed3ee84777b0f1fcd1a6320bf265473e93cece9a5c3094bc2c92321030abf2b7983755362b54d40f0d00206bec3167ceefe543963341e0d44092901f9ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 7 trans
	{ ID:"6b1f2290b538444fc9121d06c49e5d8da978ae3243b933ff663b855033590380", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"581bd5392447c9afdcc8d0aef64a00061ef6c5f028917d40a5ea39b7f9f6ce12", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"53bdbdc817840e48c6da0d822dc4b826db8e5992749e550e31c7503bf7b0496d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"340c702995e1872f4d115564311fb492d5ba3e4fe534c64e76ea2901e3aa80ca", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"89d3463eb171a52e791b7a88dc233078c0fcc0cf0476f3c833ded74a14927255", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b6b97d389a154c7d5d99d44000b1c7a697048b42bb6fd85995feba9b6cdd1d85", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1db38adac519d86ebce187a913f8474350a3ae70370ba3bd76bf7304d91cb400", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "37c5e3ec01c59a4e78a4ddea8c68a81d977a31f7c5a05845f4bed89d5cb6f6cd", b.PrevHash.ReverseString())
   assert.Equal(t, "4c4a97e76811292caec5e8415c61cb7dc2f0d64b8a30f33d712f81513e7134cd", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1503760269, int(b.Timestamp))
   assert.Equal(t, 1295441, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40606950e236956c8f784de05cdf583f297f8e54e28ab7c1dc280a88d638c9e4ac9e3dab2f9e18437df0c4d5ed8c883d412f23cfa1f4961dbe696e5ff66fa378d2403527c9b7ac1e837c257e98e0e2d6d49d3cc923cddaa742e89125bf7f9503bab465f96f7e5ba4e3816920d75d83ffbfff92fe0c1f30b81b528d5bd3079d66166140005a9f0c5b8d9225225ebc0f9d166779682b1a5e2189e9453bffec3e4fb8bddb42a4d20d88a3809fb27a6c270d490b95a1731ffab95394c99f397e426a46d6f94089e087998f26f321816c7ad4eb4c1fde459571fd07b7cb92b64bc2948ad2603f74d9cc07fc468928d64a545766c4a6002703a34d4c83f60a0050c7dc58e0a1824021753f7617a9e7a676046aac88efbd2c91ddc4a519bb35e38c9e5ca460e617ca980936adf26c6fe00f9f70b880396694ca38b4f3937122b1213ef44623fe61be", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00163e53a111c1f6adb7073d9435cd8e3e3e8f3894c5e04c1676343a9dfb59b3",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1960, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode986(t *testing.T) {
	// block taken from mainnet: 00163f5f21ca834673b08cfe62c56af988666d5aa78eea1d8e11a545fdd18f3a
   
   rawBlock := "000000005f03ac4d0ea1ab101cc83562637ed96f36936ac5c8780b62d5dfd1604f32994809a9db53364245a198ebe9c444d43171a58619c5cdd6beff218aba9858a4b0d4f59aac5be4682a00f726bdc7f0fdcfd583f5011bdaaccee8c4d2555c829fa51e31551ef201fd450140a494d4834d4eca8d9526a41efa5eca6daafc2438c1245b3b423d7621b3e391f17cb8d56985826ea51344139d554a1967d5c92cbddfdbaf81651de0a75f6295684018f50e8426530c87d3c7f0bac03783fd1ac18e319c014a4d958b53d2d84da68e9b96a853ab843824deb7bf5a7a305948693bf15b16fe4736580eba18c80b1c7b408fa321165cc8f1be87bb58950d4cc03bdf4ba2919f728eec7d271974d84d492d4ed908a2efa1dc3836c84b88bdf0f97e9c06c53d092a713282ee4bf9395a5b7a40e127cf6c9d8d7806073ce7b5ec8f08317b21237ed446fc1d89ce9c13edd4b4540e7c95ec2b0be5adac04cb8d3dc152facc2237fc8274de3e1a91e9424604328c40bc45d45695c7056d2977c326d65f39ae181f4d9b0ec2868c9a0a2ce8acf53a6920d63b19344b7bb9c0a22cb757720dee6b2ef262806f13b230a5ed7f3108f2ccf15521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae040000f726bdc700000000d1012000c10877697468647261776926ae7c6c9861ec418468c1f0fdc4a7f2963eb891000000000000000004a15000000000000000000000000000000000000000000000000000000000000000a3e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6020b7634295e58c6d7513c22d5881ba116db154e8dea47c5607d446e40b8192b95512611707141ce4931000000000000000000000000001d37c5da3a0c9c0e5b0f288e09a8d5b5b46d601170e0830dd96f58440f5674e54010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60030000000000000026ae7c6c9861ec418468c1f0fdc4a7f2963eb891e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c601a0000000000000026ae7c6c9861ec418468c1f0fdc4a7f2963eb8910202000000414000178a2cda3300966bfcb5901dc535eb3437f92a5853462d09bacd53ff5fb883d1e329fc94baba7e5211a548967b1b01102fb65a3904bdf0ab1ea4cd950bf05723210378e6c1fe50e74b2c72ddc372f5d28dca6eea5eedc182ff872f1dc617d8fed411ac8000000176bbed58483726e0925249f662443448a3cfb2cd9654e711b0544566ab9f89e60000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500b33f71000000002d4d853b3c5de601496084a8cf96eafc9a1fefc40141400b07c28426db0b3b79c7b4c3616617e667e77bb30ad3432cf97fd0250999e3030576f0a5c92f29008d89417be8ea5f65437f6907dc431505890b910d740ec602232103c49881a3b842935cb3926649c6c00b0f4e2aeb1020ecb8c2bceffb9b34dfc0d6ac80000001a105fddad6f6fd4c231ffd24e4e0cd2c877bfbeabeb29d8ca8eb7fbfe4affd4d0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000057ee5b3a12ea26dd845f4faa4d23e0580ee59b7b0141407dfb7f4ccd0823be88f536a721a2b8e2362d17ea8b990d99f806ce1e60042dbbbda409098679713bebb5a97c3e2b2df45645081d200c930f81ec4b46fae0df34232102d9afc9c3c52cc2a635b187271652d057661618e88eef8dc09da50c6f647c85b1ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 4 trans
	{ ID:"078687bc41ef12c603efd718089be580503ddf15e090ee1389c0ed15d142ccef", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"0fc13aac7eab95f9a17e754da2fca3625a6a17aa7ce8e84fc6a935b9d3a67187", Type: "InvocationTransaction", Size: 427, Version: 1, InputsLen: 1, OutputsLen: 2, AttributesLen:4, WitnessesLen:2}, 
{ ID:"1e14c4fca8401356dfa01df9b86e12276ad82c5b9a66f56668b6e0e7cbdc4251", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ce09f17e7178b2c4c06241f0a3e24596466d3ad344699b3f34cc6a5f6ea45fa9", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "4899324f60d1dfd5620b78c8c56a93366fd97e636235c81c10aba10e4dac035f", b.PrevHash.ReverseString())
   assert.Equal(t, "d4b0a45898ba8a21ffbed6cdc51986a57131d444c4e9eb98a145423653dba909", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1538038517, int(b.Timestamp))
   assert.Equal(t, 2779364, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "40a494d4834d4eca8d9526a41efa5eca6daafc2438c1245b3b423d7621b3e391f17cb8d56985826ea51344139d554a1967d5c92cbddfdbaf81651de0a75f6295684018f50e8426530c87d3c7f0bac03783fd1ac18e319c014a4d958b53d2d84da68e9b96a853ab843824deb7bf5a7a305948693bf15b16fe4736580eba18c80b1c7b408fa321165cc8f1be87bb58950d4cc03bdf4ba2919f728eec7d271974d84d492d4ed908a2efa1dc3836c84b88bdf0f97e9c06c53d092a713282ee4bf9395a5b7a40e127cf6c9d8d7806073ce7b5ec8f08317b21237ed446fc1d89ce9c13edd4b4540e7c95ec2b0be5adac04cb8d3dc152facc2237fc8274de3e1a91e9424604328c40bc45d45695c7056d2977c326d65f39ae181f4d9b0ec2868c9a0a2ce8acf53a6920d63b19344b7bb9c0a22cb757720dee6b2ef262806f13b230a5ed7f3108f2cc", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00163f5f21ca834673b08cfe62c56af988666d5aa78eea1d8e11a545fdd18f3a",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1517, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode987(t *testing.T) {
	// block taken from mainnet: 0016414d43c7dc2140bad35ed7ed0f3893f3f3e77f8a26c34a3e9c74985ff58b
   
   rawBlock := "000000002d22ca186ae59a25afbabeb9d7f9df9de6d7ed2c501b2ae4fdd28495f2007c95e2713ae26b0f0bc4da0e45a8b38027e8e1ae05c66ee01c6e719e510b0cdd286597dae55a63aa2100574e0f7f0eadd23259e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014088263ea82b5d89b5d9d2af17480f240abb4931cfc9eca15a84c04158840de7457b83a27a543f484b6067582a28aeefeff44e23a209fce51554b99068b753e8ae4060fb2e2536908e786d9d2b1fef645303d94724a59795863ae4a37c1efc8ed5bce38f19bcfb85d177911fd6bd42d64d9daf50c73963b57b86c724375091ddef2a40805aa84894c222d6e6a9a0fb7de0559ef173488778896189974b3bb160d953eb221cdb37db37228ed026cb136712c96756735171e782a4e20183fa9fd016daa4406696d0befa13bdb069f4fe88a183a33d1135ded19e7e08fb47ce523df281199b4fe85efcb4401075346c6a54f0594b9c58623da5b25611a9a9cde4c70abc6b2b4063797736d7bbf6586cbc9b1c98dea40e02f4a57ea5b2cc4ef70ec5d252f38a3d5f84c09409f8511bf41485e42f5ac7d8b719e680b5868d88bdb65eb0f4927467f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0a0000574e0f7f00000000d1018708ba3455000000000008a97bc31f00000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc508402d771d8500000014f9e6e770af783d809bd1a65e1bb5b6042953bcac14f67db8f8c11805287ae383c5e5523f1b11f5969356c1096d616b654f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e00000000000000000120f67db8f8c11805287ae383c5e5523f1b11f5969301a72c2d2765e84ad81f4ec5528e708a1abbef2f89b642c612fd8485d4831fd407000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70241403782fdedef5570e57a1850621b1921d9b1275c1ab3777dbc81e7efd309971e3266d66e0d64279be4e8a24c310c872cbe6add1fdb7927e31895ae87caedfddb52232102ca10d73f313a4fcb0aa3a450ffb2bb28b635f66a40c571565e112f14519396c7ac4140e32a253d37ef26e2e2db742f654bd7a7ec98d522404c8e1ba012ac01913620f55da8ccacd753b1ee826a689a637db0082de79ba80f8d2b9c59b328555e315edb232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac80000001dcb70dc9a88df8a127c10132ed237e98c5dc10012f0089e02afd0074a6567be100000b9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000009224d976924d1f43de58d3310bbcd8bb26e8bc369b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50026e85a0500000055081b9697a18216ea96164c8a560f572f1b2dd99b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000000a7ac8ca5c05033ade587e6f5b8f260f7645f819b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50094357700000000b7c4d0c4c04711310fddeb6eb88315302980cb3e9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000bcc40cad589d4e87b83f8bd581c94333e698524a9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50084d71700000000a19bb11c3135fad3e5772978d902b5c471bf26419b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5008c864700000000ba6ec4add885105c90ca6bcde07e82ac3b08a89a9b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50027b9290000000069d9bd36fdc8329e1f9ca50202da7b3bb39bb5909b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f5050000000024ce2f0a326ca8017b03caa727e22397159359759b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50065cd1d00000000392a18c7476f1c5b1af86669e2c94170592177f59b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e9a43500000000235a717ed7ed18a43de47499c3d05b8d4a4bcf3a01414088ff1444b6fbd6ea471836f2eb0e1cd610346060591f0df55968d055ab729fedb1950e75d478ed6678273ec3667362b3c2846245cccd0afb142de8ee2dbd839b2321030ab39b99d8675cd9bd90aaec37cba964297cc817078d33e508ab11f1d245c068acd10196000800ca9a3b000000002074b1ffcd58d7821878f807ceb4a2bd47c19ca55f483de5f68ac7396c803fe667348558ca14c02f47b85f4a2404f4a53ff7a693d4459b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc514f0ae01833530545fea998184445f7600483900bb55c10966696c6c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e00000000000000000120f0ae01833530545fea998184445f7600483900bb01e6243ea197af15f799a0d4241e9fe28ed6fe731fbf1c60aeb759fb011faa08c7000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e70241403fcecfdd8c87836df3e47cfa6b950c7180e89bd00bf93202aa573770fad3a273485e0b77b21d193e625a6703c7d6cfb66a578f97c163b501c03d8aec1b60171223210390e8a3420963bfb3fc14672693aa92f156e768b0e0b596b1640edbefc4bcc1c2ac41409d5036e2ad71f6c8b532ab3abe70d6c9d273a5b668a56dcb940b94362b8cf9f3dd3d9d21448cd8779155e342e39172a0bd037060772c541507fff403f3f5f201232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac8000000996918d362b42c5509a19fd2f4e53036b84eb5bd85c4431ae7820ce2363d511c4000096918d362b42c5509a19fd2f4e53036b84eb5bd85c4431ae7820ce2363d511c40100a8ee1985d6ab8ef25594aa634908cdc3acd38095be76cb7d7b765e5151ff35420000adc0ca3e7cb1679eb5de349dc1854474e8c4168df0bc73ce28bca87dbd3dfba800005bd3d89ae03c06b4a040910dd6488f6ec48276b539e6ba91371391ab1d9122810000e13ee52f0781fb3ca22f4dd75af96494574b4caadeb71952a4bdaae4f255c8a800000eeb39ff772401272f5dcf1d5c6381167f7e1bf99cc60e8b7b0e82330fd76a670000ddecf51b7e8bfa67da316fbc2fef93b9f3da9b6f391d7838de3c934816717c94000017c8a8e2d4dfb614b68e09046488fa44ad411a83c4adb2c9e53fb31fe6470954000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6013da550400000000bae0c41bb6abad3a8a4f04ed231e071ca49cedea01414053905181a1af03a02cfe0274fa980a8ef81531774611eebae7fd14234c09521306ab16f57f3034cb6ea1840a61442830b7d0a47c4e5fc62e91f1d01b3f9dcaeb232102bd76cc894531c9ad525e11ba573fe5bf4c904175e0f8716ca67cc92a72cdbce3ac80000001dea7955ba3117b09f0fbac25d77198876b3c93abad707bff74a634663060d5700100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000a8c84157973f8b0517e9986ab3291605e0d1aa85014140ddea4960ed38c1a91e0145ec7a4c17982c36c08e1a4a5c8f82b45f201919eb2c14c7abb99534b8c7c400d8b6fd1e9daee4b599e25cc762ae12eee0a1bb97537d2321038b8e33741db94fb31fa0ff3c20961e9d0e9e9179cca8af4637f1dbda8adf6d42acd101792009bf4f38111309f6d92ceaf096b32dab37912cc053d7ed51cbdead520639a8ae34f9e6e770af783d809bd1a65e1bb5b6042953bcace72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6052c10b63616e63656c4f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e000000000000000001207fbffb3d448b9f489d15199b9bd4cde5736ca67301b796c55df08a42acf8280796aa1b0273145212a9e4d8c7ee10aa72c749c44737000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e702414080efdc5af6daa73ebb0697972fcc3d861107cd7c5aaba5024833ee4927b9e92263e1dffeb5727bfe2dd6cbb192d2d024d1424e6492ad4ceb234affdefb2a26c1232103ea66869302b9f75487d19c66533ba1e1d8519c7ebd0b9b680d82868b3ac5ef66ac4140203d4f4e6caba5e7f4a6195db4712f82b27ae4cd78ed4177bbf9df074985d70266d360091745406e92fdaaaab9d5349631420cb50420e396209066d2513e03b6232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac80000001c8b62001ca39fa5dd9c529e834e42235d1f14e77ef70ae47a41dae03f262ddb90000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500a3e1110000000027ff10cc6f641cad5902d9c09158089042e3dc9d01414077647942833c19a09aca77cd787fecd5b084ef0f7499e0ecbdf9980c578711ebd6340253387301756d871fe93a03ee8e36622587a0cb8050b870f67c5ecc46a223210315cd4aa12db664291463283ee4deb437031a9bca9a7b352aff2cff0a990eddc4acd1018708e283740000000000084085dd1b00000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5080024e2a1b600000014dd2b538e2a0c1db1ae5061c15be14f916bd1e678145e83df8870f403bdf06103f9a5963b1a9956aa5b56c1096d616b654f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e000000000000000001205e83df8870f403bdf06103f9a5963b1a9956aa5b013c4fb7635f109b30e755bf6a477247a9e24791471a72623568fc0811df7754bb000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140c170e8b429048159d4976719ba9b42a267de2cfa8322a0a87dd3ba10954747f036e921d273c3d53fd7baf3393f0b9f7f068b1cb7196544aacb5839cf10691082232103246d4e2c8d5d3a9e4646278def96bf8e31462f0f01ba8a4008514d4d3e3c50b8ac414082928322a0f9e73447d5c22ce0c7333231f4b468e25e9dd21e2f1f917b49f3864e345200ce2df685a13f7aeec99099ea28f7dc78c11c92669f7be5f65de5e616232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaacd1018708de2e74000000000008502cfe8400000000209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc508007ec3888a000000148558ca14c02f47b85f4a2404f4a53ff7a693d4451496f692a3ec443e569e76d3712116f80d29455ee356c1096d616b654f66666572671f559d5eea8ca22910a3feb0e4637c0f2e71c50e0000000000000000012096f692a3ec443e569e76d3712116f80d29455ee301c9b80465286adfe483d7adcbe33cfea5a0ebb6f412cfd94fbf5bd28e39a23a75000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6001000000000000007335f929546270b8f811a0f9427b5712457107e7024140e2b1d6f3083b3f60f8a209288e62bc4b09344eed5c31ee600f12e27cd0462190dbaa36ebb238e073e59abb23eded7d10ea242f7b51eef15c0333828d906907f9232102416b8f00636c689213232395b1ca0d4842de3f54def4cc0f305d2dcb2ffa9193ac4140e85cf0d4d9af4f1e30f4ddbfac27623eaf189cf924afbd109b421a8e2de7691890ce631aa24cbf92a1fbd55203e4f4736de494f96aca548997b5dfe9454237ef232102a1e6ed9a5cff73ad33b7896465af8e9206eab9c8c75502868b783deb64f232eaac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 10 trans
	{ ID:"1c71bcd3d5f485720bc4e7714e11eddae7d25de2bd1bb52d45163f92c0806a04", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"0d2304ccd0b2b7d64024008c5330fdc31cff67dd38aadd9b7f68581e34fa9caf", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"e4120b597ba73cb40a612866b04871ba3af3827c03085aef30d3f066fc7468ad", Type: "ContractTransaction", Size: 802, Version: 0, InputsLen: 1, OutputsLen: 11, AttributesLen:0, WitnessesLen:1}, 
{ ID:"c3d2ce0d28c0ba0123d2d0ec07c43b5cfd2c4668ce0690d3a29b6563be434a31", Type: "InvocationTransaction", Size: 484, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"e5076bb1c05a839fd5a36e7b7eb21167ced95e51eda993d131ffe526477c71bd", Type: "ContractTransaction", Size: 474, Version: 0, InputsLen: 9, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"beb7c705cad7a84bb53e56f6cab8afca8d2b679d3c0c8cf59150ca027b20cf0e", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"e5412fbdb5618732ec3ffac51c19ffd0dd0a1a2ff7e45ff3fd5549e5537b7b27", Type: "InvocationTransaction", Size: 455, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"4b1d3fabf234ca822915e6f1997b4aeb2d575e6b71dfa253d934cc8a7c756835", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"81c33f83f7a7451e41915428cb156efabf04ecec149f022490639e13e834cace", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 
{ ID:"2ec44c3fde394bf9a3b9cb1462a96e91dd68b60952cb8abda2968783b55cb8c9", Type: "InvocationTransaction", Size: 469, Version: 1, InputsLen: 1, OutputsLen: 1, AttributesLen:1, WitnessesLen:2}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "957c00f29584d2fde42a1b502cedd7e69ddff9d7b9bebaaf259ae56a18ca222d", b.PrevHash.ReverseString())
   assert.Equal(t, "6528dd0c0b519e716e1ce06ec605aee1e82780b3a8450edac40b0f6be23a71e2", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1525013143, int(b.Timestamp))
   assert.Equal(t, 2206307, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4088263ea82b5d89b5d9d2af17480f240abb4931cfc9eca15a84c04158840de7457b83a27a543f484b6067582a28aeefeff44e23a209fce51554b99068b753e8ae4060fb2e2536908e786d9d2b1fef645303d94724a59795863ae4a37c1efc8ed5bce38f19bcfb85d177911fd6bd42d64d9daf50c73963b57b86c724375091ddef2a40805aa84894c222d6e6a9a0fb7de0559ef173488778896189974b3bb160d953eb221cdb37db37228ed026cb136712c96756735171e782a4e20183fa9fd016daa4406696d0befa13bdb069f4fe88a183a33d1135ded19e7e08fb47ce523df281199b4fe85efcb4401075346c6a54f0594b9c58623da5b25611a9a9cde4c70abc6b2b4063797736d7bbf6586cbc9b1c98dea40e02f4a57ea5b2cc4ef70ec5d252f38a3d5f84c09409f8511bf41485e42f5ac7d8b719e680b5868d88bdb65eb0f4927467", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0016414d43c7dc2140bad35ed7ed0f3893f3f3e77f8a26c34a3e9c74985ff58b",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 4712, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode988(t *testing.T) {
	// block taken from mainnet: 00164776a0085f588e4b563d1253372b2410d55db93069d055c39f3da530aff2
   
   rawBlock := "000000003c8ceb173178c61cc7379bf95687f1ecefc4d62c17c626d6a7d7cda60ef6a81b2e907ba4f87dac7b265f6d6aeb8f7670b0c7137e29278e357b617ec41ad7fd76fb8eaf58eba00800e2efd2fe627268e359e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014078a8d24a3cc5d3c2b542c43828931796dfd5c358498c50083b8bd2c592d25e62362f7c95465b10059623f21b558363c1d1a4d83cea088eb2c29e77b3b2fb2a9f40233d3922115f9a6feb3ed87e4c94ad3bce835064225189ca6b2cc54ab81d7d22b7fb552a0c850221c9971e5bc7fd9069b4fa051729627b818ddd166886faa77940d87ee2c88e896cfdc7b8b58159932c0746d60dca1c8a865d0af7ae0eb371472913f78f1226c1f7c8c372bc4451b71ff30098f7c9b99b45d3583b22987a0400cf4094b1130dd16bb1da6195d76dbce2a549d2a4569a389da08dbe35333570fee23fc2f7255c0b70a3e0bb9c9a955983b32df6f2f0c0d936696b8bac49126e6c2cc1407fe4267ae5c3b37c72d268575374e129ffbd01b2294e0d3201b60fef0f82a55c11d2b17049e55c05b6c68fadb7b13171dca68e38fb79a3d263ecc6735e45b2bbf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000e2efd2fe00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"76fdd71ac47e617b358e27297e13c7b070768feb6a6d5f267bac7df8a47b902e", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "1ba8f60ea6cdd7a7d626c6172cd6c4efecf18756f99b37c71cc6783117eb8c3c", b.PrevHash.ReverseString())
   assert.Equal(t, "76fdd71ac47e617b358e27297e13c7b070768feb6a6d5f267bac7df8a47b902e", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1487900411, int(b.Timestamp))
   assert.Equal(t, 565483, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4078a8d24a3cc5d3c2b542c43828931796dfd5c358498c50083b8bd2c592d25e62362f7c95465b10059623f21b558363c1d1a4d83cea088eb2c29e77b3b2fb2a9f40233d3922115f9a6feb3ed87e4c94ad3bce835064225189ca6b2cc54ab81d7d22b7fb552a0c850221c9971e5bc7fd9069b4fa051729627b818ddd166886faa77940d87ee2c88e896cfdc7b8b58159932c0746d60dca1c8a865d0af7ae0eb371472913f78f1226c1f7c8c372bc4451b71ff30098f7c9b99b45d3583b22987a0400cf4094b1130dd16bb1da6195d76dbce2a549d2a4569a389da08dbe35333570fee23fc2f7255c0b70a3e0bb9c9a955983b32df6f2f0c0d936696b8bac49126e6c2cc1407fe4267ae5c3b37c72d268575374e129ffbd01b2294e0d3201b60fef0f82a55c11d2b17049e55c05b6c68fadb7b13171dca68e38fb79a3d263ecc6735e45b2bb", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00164776a0085f588e4b563d1253372b2410d55db93069d055c39f3da530aff2",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode989(t *testing.T) {
	// block taken from mainnet: 0016482ad1b9ac296f8361b8f753c743487e89b29a669b7e938abfbcbc1e2a38
   
   rawBlock := "00000000b043f9540b7c43acc8edb0f480e79595ba32a29ddace4f04d1aef5d42cafcd11197a169c078b930a82bc93166bae9ec54b7f4aa9950b25fca38444e225aa35e1ae77485a90e01a009eecfb23263f358959e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140e931a7745f8b23bb87c2ce35500fc21219887280064ad99c4af51084c7b98e0b12dc3ef230bbb246ce2208d94ca92e86c0052714d769ba82d7e2f67eb7ddcb4840686cb15b0f9b3599d3f8b00a6e9c270fe4a1b932f1934c51bc0d0b9e64c1e7f47c8dc6044047f00e9fd782f7756284121dddc97f21897bb6ad25fc4b4a4f291240e04f821fc74ae96dae2525c642574fa23d5107afbb87e73dedb92042e1156997b9e5663c5e3df3aa9e5565272fde619c2bc716a3e0345b131f3d64d962fb1386402e8d4d46758dc257c19fd9bf5044273d7046702b781d84edb7759a6abf115461bd916daf7f23eee6d5a54ea911b958dfbe0bd859f32e9a4c6666ee032012d11b406c3a727310e2835f60dd96c84e7c4bc60a1404089cc0c713060eeb5b7813b166b51964914b3a7fe815d7c9e2199eeeea7036fe87a660cba15cf6576aaca14e7ef1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0f00009eecfb230000000080000001cb41b5f3be850abeb01eceb6bc819cc2db107c771fe59b9bef785de510eda1a80200029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ac420601000000c2aabb61d16817a2c881bc19a4ea3e18b4fe71199b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b00000000b5f068b5e0fa181d7f91ddc2b3ea12277a26a5540141400d012839c23e29a9ca5af819e057a6afb04d9d25cc6c119a5142aac70d10d160e5a4950a07f46a732d41a68ef5fcbdee6bbb32183b0a1bb7a13082f96f90a0e22321030cb42c4b8eaf9ab14d92fe58678c46ac40be844ea6f6ba93528d4dc7a972a176ac020001ed657a478d5692e9f1a35350a23dbe0cf7f9833ab7804102faf13bdf2c5c68690000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60e00a0000000000003566b699499c782836c9aad3eb3de23f6c49aa110141409e9a6c5496ba4a8300caf1293feb9c54b221cd134699c8ccefa5ffa5b92a63ea5c2c35638ce6fd5d81e7e76d757a878857b9a15f93b1f66cf4be70224448c08123210298520051dc1966151105652fbe967b52d36a7b81106b14c58d98b51deed5d41bac0200013f19cbd1be0a521bafcdaad8e5ecd858d8824a2418aa05431edfa823ef93f6b30000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60806904000000000003041a9cf13bdf89b476f9ceb8c09333aa17f731014140294de8f1a30273b1d6d4e0efaf5090af5f01af94e0a9339910d02f606e758703ee058c1ed41fd9159b44526812e6800e73da331f9a9bd82371a9a2f22eba3344232102562cd78ef0ca3ff665ccb980cdb2d2a7a393d0284e758de2857b283262cca6eaac020001e603d53f4fafd396f1efea8c77c74f00090560cf81bd20ae1302b4974479c8290000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6099781a0000000000e6d03619ccdddd576becd148912e009a8c1358f40141408e5427677926b5b0e7cdb6116357dfd46a748e2129e0c171aa18d5ea4daa6c049ad47672cdca93642285283e0720c9cb8ee880231a459c882f22337173a8083123210263817628e1466d238a193f1e30068f91c9aaaf11f32e4aec14462217153327d8acd1015206007e8c71010014d5bb55e5c8bc78d0fd4300078cbbf8978b4c364014d93f9a2d0b28c94811c128df284c0f9eef171b5553c1087472616e7366657267f91d6b7085db7c5aaf09f19eeec1ca3c0db2c6ecf100000000000000000220d93f9a2d0b28c94811c128df284c0f9eef171b55f105685a394a000000014140b3e53a74bc2600b943e314def00d6de3e67c676c46736a61e49cc7ef5984d46225ea0c4de19353e6fb4c86fd8e6024840ea955105405278ad0e986ec665b5f4f232103a221536fc6e361758f5636e8a081cc2f04b178bdc8c3de7e99ced68951337a34ac020001cb296f0b8b589136210b04a1c649b4518a4178b2a9b14d56cef1ea2e4077e5030000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60300c0000000000000f0fb5952a0a714cdef700023c5279ba6ed5a1cf0141407cb1591693aeca5aa45dd09c76494076a665d20fbbaa0e4b724d7a01dffeede5f97ae23a7047d5faba6823a15414a270fd47e54b7e74358499ee56bad98bfc50232102e8828f6094b2b62e5e756bfce3061f81e371c7ccef1a3395bd43c29e15358037acd1015408208f6daa84200200147d936dbf5f039d6ad9749a091dbd3bad2bb2de2b14b8e50f0abf2ab190e583c1a03b642af0285c0b7453c1087472616e7366657267cf9472821400ceb06ca780c2a937fec5bbec51b9f100000000000000000220b8e50f0abf2ab190e583c1a03b642af0285c0b74f1056ea9e6120000000141403dc39980408491c2d2cedf13c79a5767847b9ec591b32542b524cac40664637faded49e1eaecb7eb2d3445e555c3394236172c31ec7621fee166048ae005deb3232102e18bf928f44b6236d4d27f62e7dbcea9dde674dc295b7ddc9f2b342208b7f3c3acd1015206007e8c7101001443cf1bb5d89eccf9e7ba6d2caa9495bf820936e514d93f9a2d0b28c94811c128df284c0f9eef171b5553c1087472616e7366657267f91d6b7085db7c5aaf09f19eeec1ca3c0db2c6ecf100000000000000000220d93f9a2d0b28c94811c128df284c0f9eef171b55f10510ac8334000000014140d764983c73a00ccd0a7d9d54d85388d4780a62b50d8c235d1c3792d07ff3fc7a2ab5d0919d31f823e633301760f7f20e71fd4ae0c5cfd1e89c3b3d91208f7449232103a221536fc6e361758f5636e8a081cc2f04b178bdc8c3de7e99ced68951337a34ac80000001c1ecc3c9bbbcbd60ed999ab73ea51c7b119a618cf7f0422970d598106f2f1ca60000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500ca9a3b00000000179a0844d85dd5c0d4e927534d5afdb59fa982390141403f0664212bf9ed03f4e4cbff0635f31aad56f98ae37deabee33af5772687b8a3253c3f3ea9f75a78c1c60304bd616ce9308b53dbfb2076605417cc04ff6a358a232103ba46bd6c5a943735f371f86d1cc37fe5e69fa2989b9c6245927c4e9a5fcf1371ac020001285d06ae3a75899dc192008d40ff8df992c4815641ee27c58264eb57113121520000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c604b8a6d0000000000b76a3dd605f1f90b628dc2a84b6b6b5cfd510eb501414017bea88736dbf872d2dbd3746fc98aaa7aa9c5be38898a9b8d27a72eb561a6c2b2092770ad064d72e921c927eb4a7f2eb2e6265a643730b0cbea29d9d804b116232103e6b15e601616a953570d5df308bab80ac7fc3b8e2fc637518781e52c8ada6b32acd1014f0300d200147d936dbf5f039d6ad9749a091dbd3bad2bb2de2b14b8e50f0abf2ab190e583c1a03b642af0285c0b7453c1087472616e7366657267cf9472821400ceb06ca780c2a937fec5bbec51b9f100000000000000000220b8e50f0abf2ab190e583c1a03b642af0285c0b74f105a8e69b89000000014140c6677d17665c617e0639151f3d9c438ff86d19ad6d12497a808aa96c0db3c224c1fbb34117ab8c4dd3d724f2610c4522f4daa12303ce20018345ed3ef077d4e5232102e18bf928f44b6236d4d27f62e7dbcea9dde674dc295b7ddc9f2b342208b7f3c3ac80000001e5a79fe0b97799d7d930b14eba98b4030384d757613e3f2118ea35c4d68425910100029b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500216e8301000000799835a3d9b0caeca48034bef737e4ed223b12089b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5004827ad0100000065d9c544180dc308c6028b132c0b7478eb27521701414009c971fe431952bc46fe433d2bdc4553d70e505be9687fe6307e898904a9a1fc5f7c033449e9aaf1b394b923c87f2bb8d0f6254884c96f0473377fadcb5c889423210343625121b380c81eac9fad47b867425fba50b8849afc79796e63f530ab321ffcac0200011e135f2fa5e6e2e707d3fe74e55f8ae9464940093e97a5fe99e6816a379570610000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60a84b210000000000c0c2fa9471f5aad44db4b333b026936755166cb401414087a3ac490fb9c0acab27fe00592f6b4dbc5abd4e81ecbe2d02c821083458419375395536ed2849ab2df1e9149c370183266fa428b0f4a68b6af09f92cd85a7a5232102d66d614593a8b9a232b8216b30694d3c077f1247f84da6da39d3d9c45304d6d2acd1015206007e8c710100141f9bd317950cc23701a8212cfe6c1c971e21932314d93f9a2d0b28c94811c128df284c0f9eef171b5553c1087472616e7366657267f91d6b7085db7c5aaf09f19eeec1ca3c0db2c6ecf100000000000000000220d93f9a2d0b28c94811c128df284c0f9eef171b55f105f55e5817000000014140d54c36d3c8abaa1ccb7559efe05d92c7648e1dba177ccd1a9de5647728abeabb466459d626aac2c1c96f5afa11d7745bc6723e499b583de39d593a887bd9a642232103a221536fc6e361758f5636e8a081cc2f04b178bdc8c3de7e99ced68951337a34ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 15 trans
	{ ID:"193808b7334356fe94eb51bfb0433c60ef01dc3a30970969303c4856adf5b37a", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"efff3fd0e4e402c7e7011bb8a04b5c0e6bf7054482620ae33e5846c1c3201e5f", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ae2a84a8d42103ce7ebd51875abc839fce1f38c156bb23848e6efbbb09352aac", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"65ef61c6edfb3494b1ca547339692170b28ec40b3ae2dca1fee80e28cf96dd57", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"df85d8e75bbe8a5173c29369990295bb86d152566b75ac1a625a56a817ef6fd7", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"2ea8d53ee5606eb9dc0b07b5c2acfdc60647b50676c0802c38a4eed362f4a9a1", Type: "InvocationTransaction", Size: 227, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"520bf74017253341d080341567505c017a374dda31d0d6855d4db34fdfe7b552", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"250325e3ec89a25eb888b3683d7f547b60ced398cbc86dbbd6cb8c9d91b94b7a", Type: "InvocationTransaction", Size: 229, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"724064972af1cbe89f7f9f1cd1bd8bea737de8e4982c8e0f4da5f6ab297ed613", Type: "InvocationTransaction", Size: 227, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"7969e59471d7d8ab2a32c16b6b9435091093fcf59fd8f979bc6be5f01c07a414", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"374edbd52179a831c177a92cde9476d21ab543cc064630a8b20750c28e694da4", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a5e44d51fff6c5a43d2c5dbd511a1700aa0f7d5e5fc7da4aafbce3a0c73a724a", Type: "InvocationTransaction", Size: 224, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 
{ ID:"720139fe39ae739d63558569455538761d2b7e7998c4e8b20c72006e7fd6eb76", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"74a25a6192e20b02dcde37abd6648d67c503341ef1f58c446bdc6eaca26edf6e", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"12eb3a695856e9e74b97e0c1eb58a11dde92bade9fe0818108310fa8b6f67836", Type: "InvocationTransaction", Size: 227, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:2, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "11cdaf2cd4f5aed1044fceda9da232ba9595e780f4b0edc8ac437c0b54f943b0", b.PrevHash.ReverseString())
   assert.Equal(t, "e135aa25e24484a3fc250b95a94a7f4bc59eae6b1693bc820a938b079c167a19", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1514698670, int(b.Timestamp))
   assert.Equal(t, 1761424, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40e931a7745f8b23bb87c2ce35500fc21219887280064ad99c4af51084c7b98e0b12dc3ef230bbb246ce2208d94ca92e86c0052714d769ba82d7e2f67eb7ddcb4840686cb15b0f9b3599d3f8b00a6e9c270fe4a1b932f1934c51bc0d0b9e64c1e7f47c8dc6044047f00e9fd782f7756284121dddc97f21897bb6ad25fc4b4a4f291240e04f821fc74ae96dae2525c642574fa23d5107afbb87e73dedb92042e1156997b9e5663c5e3df3aa9e5565272fde619c2bc716a3e0345b131f3d64d962fb1386402e8d4d46758dc257c19fd9bf5044273d7046702b781d84edb7759a6abf115461bd916daf7f23eee6d5a54ea911b958dfbe0bd859f32e9a4c6666ee032012d11b406c3a727310e2835f60dd96c84e7c4bc60a1404089cc0c713060eeb5b7813b166b51964914b3a7fe815d7c9e2199eeeea7036fe87a660cba15cf6576aaca14e7e", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0016482ad1b9ac296f8361b8f753c743487e89b29a669b7e938abfbcbc1e2a38",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 3764, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode990(t *testing.T) {
	// block taken from mainnet: 00164a42e01adb5387a6314a312a1800f50f0c49dda071bbec0f1563531438e8
   
   rawBlock := "0000000040baf5dd3add5bc837407bb8cc7272fe367385f062d239afa859aacc02773457eab1241ae98f8b78e71e4f9b3c60a803e165bbd8c295f7cea09bce6a1f9323f54d13965bed642900b9afe0659fbf51db83f5011bdaaccee8c4d2555c829fa51e31551ef201fd450140ca0f1d5ed7f9f4ff397a852a5bae304858cf700b4d2ea6b5a25744037268324633bdad0f60a9d20f8b1cb4840e15d4007977865bc60a978df1d74692a8afe2b94088f92bac5d43b486eaafd62d5549fca91c79396f8b32d4359ef82a289cb4a401c080d3e1570b411587030e26e254b1127f7cff8b1e3512c51814c07d2ca44001409a67d8feb34101f4e3140f68f59b4cc5bc7cb59952b3505f3279a3bce0afed18222b4bb57f19e73b51a44973fdcd49cd3d33f6fbeb8d4e948494f92eccf5de934020848e2ec8f151694a4e02100193c8e20e007f224900b8b78a95eb8e27d20d5cc62c3ee2915f8851a8262880d58527cd91359afaef00090d0587e994c085a4b840b8b081179a8600f34b1f872795177cfd73745567f99532e0003bc506babd7c14b7b2e18a852b87273199e66bc4c6229aefc079d710b638a3ebed9b3bbc63d4b4f15521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae060000b9afe06500000000020001edcf3a46120bcf0ce704e341daa3050ce2f6c11a0056d0b6705f15d955df517b0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000a7250000000000cb84733471a3864eead7e9897f51ee35ad8653ba0141404b5ab80da0b1653aed81ad0ff179473bdd8118f542879cceb86a7dc452b60f0247d4383b26bbf7000e93551ed56b94ef53165b7c8d7f0dbf7d9476649257b016232102a1889126c49543d0f1c377f5ff402d172dd80e7d2df9cb6e06a187240efd3e01ac8000000152b384399086e25b7e22f3a8a739382d689bce5b0e97aaa2888aa22e56e53bdb0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50046c3230000000017bebe864c77f9b5ada72bcbcb58b708eec718e301414065e4e38f4e3daa23eb6580363d596f6d55c34a29cbb7e77004f21f2d4726f1182dcc767c9913b41706a53d00d2e0e698e4bf1408fb2840d5e407b8974b162af6232102031a84cd277b774d62e50b095ed1738046b899afca84d8346501391ab8075c3cac020001c016bfce105ab3dc1e188963fe51e050ebb3f9e17f6d3d858bd8d97e2df8e5500000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c605d0300000000000007d925c20ae30deb67ad4adfe86fbfb358129f91014140264323705210399d58e279f3efacda66a377ec5147d464486c1688c04fe99d922e26152e2f3b1b4013f7a32dc8cc7c6b13e8fafbcba5ec7164783b5da26e8f7d2321031d9da38bfb59339ac458ec3d8038dcca1b32ac6e3f863544d43cdf5e9d34842eac8000000190fc32ecfeece04459211c496bb894f1d114dce0d4d923983f6c56c7f02e28730100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500e1f50500000000738851b477d2a4c7db0c43fc9485fe3128d2c82301414094143c8f4faffcc01765e7a67e99f22cf870ed47d83e9100726232beeff7cb5e99e8a71a6817e1f6e187a1f750b18486a71a2869b2566d999c299402248f2ee623210343625121b380c81eac9fad47b867425fba50b8849afc79796e63f530ab321ffcac800000012399eb585607066e6c8ba5b5f4efe62a768e1ff524fd2b3849e46f16eaccba4b0100019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c817a80400000020d21595aa17c3f409b282c47ded1a7e86e8724b0141409362da9116f8aec6802a501b98cd0a52c002e63f74044baf48e1d6a3be54e16d4932cfbbe9f2c8d5b06bfe03b3ea9486d05ff816829baf6138f72ccd4a8990e6232102938fb45b7aefc6e3e8d7c591a0ae2f3d9ec7c8db8040701cbe18311826362f4cac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"c02acd93605c60d9e564941452c021a77ca5fa747035bdb72a1865097912bd60", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"c4621f0a8bf012c8a90f3342a093095f9f70fa52db81368b15b9918cd65cd415", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ea317af802c391d2da9c33e5ea299b62c169208100063abc1519b6467c86cf35", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ccab865c54ad3b58bd2b899cf0d3ff242c152136e674e67c93d03e3c54611feb", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"5128c7425925efe0e15c6074f86429031b331847c65b9cd82ececbc538468927", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b4092d0b571e133a4ade2e614fc6c46397f6fbcd34d2d7210798b46c315b62e4", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "57347702ccaa59a8af39d262f0857336fe7272ccb87b4037c85bdd3addf5ba40", b.PrevHash.ReverseString())
   assert.Equal(t, "f523931f6ace9ba0cef795c2d8bb65e103a8603c9b4f1ee7788b8fe91a24b1ea", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1536561997, int(b.Timestamp))
   assert.Equal(t, 2712813, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "ATobfpwv6JBXciEC4bL8GL8PjQkssDsmCR", nextConsensus)
   
   assert.Equal(t, "40ca0f1d5ed7f9f4ff397a852a5bae304858cf700b4d2ea6b5a25744037268324633bdad0f60a9d20f8b1cb4840e15d4007977865bc60a978df1d74692a8afe2b94088f92bac5d43b486eaafd62d5549fca91c79396f8b32d4359ef82a289cb4a401c080d3e1570b411587030e26e254b1127f7cff8b1e3512c51814c07d2ca44001409a67d8feb34101f4e3140f68f59b4cc5bc7cb59952b3505f3279a3bce0afed18222b4bb57f19e73b51a44973fdcd49cd3d33f6fbeb8d4e948494f92eccf5de934020848e2ec8f151694a4e02100193c8e20e007f224900b8b78a95eb8e27d20d5cc62c3ee2915f8851a8262880d58527cd91359afaef00090d0587e994c085a4b840b8b081179a8600f34b1f872795177cfd73745567f99532e0003bc506babd7c14b7b2e18a852b87273199e66bc4c6229aefc079d710b638a3ebed9b3bbc63d4b4", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "5521024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d21025bdf3f181f53e9696227843950deb72dcd374ded17c057159513c3d0abe20b642102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00164a42e01adb5387a6314a312a1800f50f0c49dda071bbec0f1563531438e8",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1698, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode991(t *testing.T) {
	// block taken from mainnet: 00164b73a8c9b43f85085129a7a2195985acc2c189663608f93dabc8a8e794dd
   
   rawBlock := "0000000041518031e727b1bf16af58c12a1bc5a10fc815dd9cfe52c1a86f1d89909e94e03024e6cb30b6eac4a3a43760c0ced920c8b908d72aa8393b89293d6678d87d5a6e9dbf59841d15007f4e8f014a8f22c659e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140f3e95901cda3f4aeccafb5bee262f5174a8f0a489cf09889f4a5535ebf532afa3ac8fb6d315a54b6fa4ed802f123dd380f0c4538c731bb98b4f3152ef98dc41b40d1bfed4c36a6625d7a1fdeeed839b11dd70b4dc53050b072317cb59e0047f69084b33566aef23ffa7bc2f9f45d58aff4d606b30515040ba26aee51a32a7c958340721d7ad41b4ee580e085d2911bd9e6e2f70a7224582e274de044a95448a2c113d472639922a668b7802c847ef1d970e04ac7882daa0cd774779c0e6913d9c64e403267c33238195044b7e4ea4fdadf5d37999bb3f878262ab54da23730dc5f57bc5da5751668b54c01fa16e9ae4e66ea69852787b49c01836071d056d5750ba76a40a8c48c3cf5b6a5fb536ceac89a4b9f4f910793ea9ddac1e4aa1f284d1f84c53d62fd4e627ca9001c05a6777a278e4a6e402c9bf2d173bc584bf8dc39c2c1e471f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0600007f4e8f010000000080000001e8c861fff258bc5eeb17287b7ad391ee266f4864a2239c8475ae5890154352cb0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c7cab0210000007d8c00bd015788f5c20ea54ab467c6b42558941e0141406018a8e09fb86769bc131ed18c1840e964df92b15fc225b3a0547dc1cfff74a020c6644b342d1086024102a93c19f650ebd7acfde20f987b01ea558cb3902f3623210347369a80e5eb337dc06305f2800f9e29d803ae9e718ad9490fda39056c58f5baac0200015d85a85ed2828942f65398d836e4ff6a800422f4ae1a30ed0a5d86bad52633430000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000830100000000009503b6a68f4224b1502e5bb17b5450d0e6a8713201414037769683e382dac0541e1bdd0bbb33417fd918813d71de952654f8531129a2d4171e1105ec13d7a58bb95effef6f40f33fdcd2d00e04fccaed25bf4d96c192992321037887cd4fd5fe7b8283bb94918d37e0a859b4b7f09879791be9f6c4ded14e01d1ac800000014fb9ebc6647b8d8ff68fc836c231217c19d22e8ef1ff18cffbef3216d8c1304e0000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500c2eb0b000000002216eb16004a6d827655973a3b785b266692f77d014140cf83458bc6e4207d099ab718f576bd393fbe75008d9e32d1dc999c72f788f5fc60def50b090831bda4d143efb7bf361fbbe7a6d5ed59838f66158e6e8a7c43be232103e0e7842541113b90d535b351a7e1bb6896acb767731fa28327363db867f62009ac800000014b590bdfd980b2e5c65240f68a5c903cef4ac9ee92ac019b0c007c6b01abcce00000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50046c323000000005eedd8d884dc2bec22b0f2936f6336b6f08896f201414041c76963417e7ad5264af6bb3b854f254ca6ce83604b86da9f717565637bf6f581d688413c062174b0c821ec04e1668f1d58fe738eed57232f1d0c6762dac585232102a62cb865ca8b3b619d25d719a9f656737755edbce31932faf182658ac9deba72ac02000179bb5c3c0fa53bacfe360cfeead81ed183d52e81df206264922b6b117a98e6850000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c608805000000000000198362d0c97f7b6fe75a16bb6df7ba561e28001f014140c58455ed9120322a07ec1a6c03cd8c614958e2e354d361b9f2d24382324788502ff6e150b21055a0151e490f0c8448c73c189f1e7e24868ee4dcb3232147c8f3232103acc21e356af677f784d208824eb49e5645a12a61dd2320c9803003601ec121efac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"11449ba81cb69da86f72de748de62cb72d10cef956d8c89046e527dc88b0112d", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"0696fab08e005478b27a06da2878fc6be001d503a26ac50a1ff0a7892033f76d", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"9f5f81f821f074d13b9dbe03dd54f615b0b669f1d038968cca1bf2906abc5e27", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"1b817e307220f036ae9613de22f85b9119a087f17a2795c1809e3fc2f21a8295", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ed1d2490835e99c948faf5cafa7a10317558ff501c189be1c9a47389adc4f571", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"78e02273f8629a4992c03a5630155f27d989df3a926b1595524464ad9d2eeb9e", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "e0949e90891d6fa8c152fe9cdd15c80fa1c51b2ac158af16bfb127e731805141", b.PrevHash.ReverseString())
   assert.Equal(t, "5a7dd878663d29893b39a82ad708b9c820d9cec06037a4a3c4eab630cbe62430", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1505729902, int(b.Timestamp))
   assert.Equal(t, 1383812, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40f3e95901cda3f4aeccafb5bee262f5174a8f0a489cf09889f4a5535ebf532afa3ac8fb6d315a54b6fa4ed802f123dd380f0c4538c731bb98b4f3152ef98dc41b40d1bfed4c36a6625d7a1fdeeed839b11dd70b4dc53050b072317cb59e0047f69084b33566aef23ffa7bc2f9f45d58aff4d606b30515040ba26aee51a32a7c958340721d7ad41b4ee580e085d2911bd9e6e2f70a7224582e274de044a95448a2c113d472639922a668b7802c847ef1d970e04ac7882daa0cd774779c0e6913d9c64e403267c33238195044b7e4ea4fdadf5d37999bb3f878262ab54da23730dc5f57bc5da5751668b54c01fa16e9ae4e66ea69852787b49c01836071d056d5750ba76a40a8c48c3cf5b6a5fb536ceac89a4b9f4f910793ea9ddac1e4aa1f284d1f84c53d62fd4e627ca9001c05a6777a278e4a6e402c9bf2d173bc584bf8dc39c2c1e471", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00164b73a8c9b43f85085129a7a2195985acc2c189663608f93dabc8a8e794dd",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1698, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode992(t *testing.T) {
	// block taken from mainnet: 0016544e0c4945ddae386c0aecba5a7948328736d18b63c654e760054435c3cd
   
   rawBlock := "000000004ad63aae18bdfbe2d4f7bb2d054dd95e32874725f1dccc4068de2bdf4f859cbd1d4a338e806d82f18f9ed995ee74de8a15c6bbc81746342b6dfdf9ccdcd0f2a365f2d558fc780a007f80fb0f29a603e659e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140e7c47af8278c46eb74cc90144719af45b062ffc62bf86fa1b66246e76a202dd594130b44d320c9ff85b858a07172a0fd29da714ed2124917e4dd3fde7e1e74144043c962c54e1fad9b0a863c71ba212ae2ecab676254843fde7e2515b1484b5cb404269e26e8c80d9a73686ff55f740d2f2123f74723a9fbfe6fc9eb382f244d97406fefb553279523000cce0f7569357ee5ffb68f5db4296b7014f7bf357e052bf8634420618dfbc1376dd168a82f79e20438bbb9c69805af43536abf65d26306b4404fc091eafa7b30e04c71cb91d80fc4974bde1a22054477d20a4ef2c2ce1589c3de4dfd94ec7e0af4786c8d8ee4672a26f05dd6d38734e1558faf2d0d08f3f547406a6a1e216325a2e7192623a9c21a1bd04a023c18d01c8630d6e1dccf3d6cd85880a28a27a21808e7cdbad2560d93521d98babc6d11fa9f973774f3a4a4d9a8def1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100007f80fb0f00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"a3f2d0dcccf9fd6d2b344617c8bbc6158ade74ee95d99e8ff1826d808e334a1d", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "bd9c854fdf2bde6840ccdcf1254787325ed94d052dbbf7d4e2fbbd18ae3ad64a", b.PrevHash.ReverseString())
   assert.Equal(t, "a3f2d0dcccf9fd6d2b344617c8bbc6158ade74ee95d99e8ff1826d808e334a1d", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1490416229, int(b.Timestamp))
   assert.Equal(t, 686332, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40e7c47af8278c46eb74cc90144719af45b062ffc62bf86fa1b66246e76a202dd594130b44d320c9ff85b858a07172a0fd29da714ed2124917e4dd3fde7e1e74144043c962c54e1fad9b0a863c71ba212ae2ecab676254843fde7e2515b1484b5cb404269e26e8c80d9a73686ff55f740d2f2123f74723a9fbfe6fc9eb382f244d97406fefb553279523000cce0f7569357ee5ffb68f5db4296b7014f7bf357e052bf8634420618dfbc1376dd168a82f79e20438bbb9c69805af43536abf65d26306b4404fc091eafa7b30e04c71cb91d80fc4974bde1a22054477d20a4ef2c2ce1589c3de4dfd94ec7e0af4786c8d8ee4672a26f05dd6d38734e1558faf2d0d08f3f547406a6a1e216325a2e7192623a9c21a1bd04a023c18d01c8630d6e1dccf3d6cd85880a28a27a21808e7cdbad2560d93521d98babc6d11fa9f973774f3a4a4d9a8de", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0016544e0c4945ddae386c0aecba5a7948328736d18b63c654e760054435c3cd",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode993(t *testing.T) {
	// block taken from mainnet: 0016586343fa707bac737f3847decbd089bdc35089355e7ca80e58ce2e767a77
   
   rawBlock := "00000000ac73a14a1646d99af14b0f6f40ffe788bffdafc8b886d79c8ba7858d3d58db644328025b07149fef02ec5995ea6b11b5ffce068504a9da7d3c1ecb4635fb484016d378580ddc05003d709cffd962c70759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140beb77555fe461e1a1d8a9cdd2f94f8f9910a6ec82894f516782dfc81735883b2dbaeca2eafe3c22223728376b1ae3a234367fe362c3bf92e43cdb6becd630ccd406101aab98b2694b345d36f3de0439c8ca3ed0127c4708b0f8d0e4f99470964750953652b35e9a678e80219b5befda0e1467cebfe9da4889984043a85150355a140d2e7f0b92829a6936c48918ce1fe72b8bb0671a8e8dd9631a55b43998264a2870be18be597e9295daac6de236c9eea3814b80387677c82022f3b39653af7a3a140fcb05809c4d2cc81e6a506d33169df72baaf3a8db7bd6060508141bce24faa5f1f532c1ee9c65aac080e3b7661474700d444e24bebcf64f14dae2a7e35428401409a1aa70ca9dbedde3e3c938927e5a02dde4bc81197c4fea5574d71bc85dd27c5f22f3c561a25c166e42e9df7b0ae937e091eec28ac253c4ec117c460b9f1b323f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100003d709cff00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"4048fb3546cb1e3c7ddaa9048506ceffb5116bea9559ec02ef9f14075b022843", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "64db583d8d85a78b9cd786b8c8affdbf88e7ff406f0f4bf19ad946164aa173ac", b.PrevHash.ReverseString())
   assert.Equal(t, "4048fb3546cb1e3c7ddaa9048506ceffb5116bea9559ec02ef9f14075b022843", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1484313366, int(b.Timestamp))
   assert.Equal(t, 384013, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40beb77555fe461e1a1d8a9cdd2f94f8f9910a6ec82894f516782dfc81735883b2dbaeca2eafe3c22223728376b1ae3a234367fe362c3bf92e43cdb6becd630ccd406101aab98b2694b345d36f3de0439c8ca3ed0127c4708b0f8d0e4f99470964750953652b35e9a678e80219b5befda0e1467cebfe9da4889984043a85150355a140d2e7f0b92829a6936c48918ce1fe72b8bb0671a8e8dd9631a55b43998264a2870be18be597e9295daac6de236c9eea3814b80387677c82022f3b39653af7a3a140fcb05809c4d2cc81e6a506d33169df72baaf3a8db7bd6060508141bce24faa5f1f532c1ee9c65aac080e3b7661474700d444e24bebcf64f14dae2a7e35428401409a1aa70ca9dbedde3e3c938927e5a02dde4bc81197c4fea5574d71bc85dd27c5f22f3c561a25c166e42e9df7b0ae937e091eec28ac253c4ec117c460b9f1b323", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0016586343fa707bac737f3847decbd089bdc35089355e7ca80e58ce2e767a77",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode994(t *testing.T) {
	// block taken from mainnet: 0016660d16211fffba39bf43aa0d4ab9a9c3cf44542be144a531372344a4ff6e
   
   rawBlock := "00000000418a6dce3ce56f38bd3d5135ae02991668c3d0ab1b51ee955969246aed3fc33fc2e729290dee9802cdd797d483fa94d387fa5ac853d46da0006cff20c428601188d98959ccd01200827a2736ea59557d59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014048074215ab6f34267b629d88d03d2d223e1eb0b81b4655b0ade4bd209f09a2c840b5e66b5b53607c0d4667f723771d4b1bfb6e3b86e8b6a24616468e8d5f52494065fb9dc7131af94caebd32243397594e5617f1fba438f0eb7f8b8cd3f5ebb90d124cbe1662cf53ac550bdc5c17bd2a5cc90b9cf74e46b75d45d1d6d88a4b070640a150a3d2b8341797e0a94c9194ea8e93162cbecd5bd324d309d9a9f93f18cc31ff1f18f635df53cfa08a04656a8e761d0a1c2b5afdee471f13c5cddcfa983d6b40273c88b9c4b514aa0ed0ab6f16c8c4c19f1a3d34f2e8651cd406907374bbceb2a5dc0a9c68cc15c1bef9a6179225bab83644a07e46b3fc6f30900e3c589057584033a061cb2cf46797c288428180bb8844de0997f4f0ffa28a80ec83fa360945326685db59faca99c4d7410248cb534deb3ce6015410d502be7e4f97249dcf467ff1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae030000827a27360000000002000139f534822e62623f7df3bfb0794373ef78a4baeb8dbbcc2c5f5072b4846e4d260000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6010d56b03000000007c056a97f3107678cb030fef74a8bf75274a7dd2014140969e9312f8ef5cf6543e0ca41654acc34a5083ba66615f1851f5657ac3464451b8b186103f5c2d314fa2dbf75c3a0439665781c44c8582880996d0f6529089ba2321039d0138fd61e700fe2b38b5a0a8fe813540696746d44bbaac68a67f8726331ab8ac8000000148d30948e9296346cccd533385830c6a7f0a2f190e96bc34cbd61fffaa8d62d70000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500b24f980b0000007a23301970d340ae6dc3af7279440e68fff91c33014140ae4575aed85bfec1903897bc0ccffee9273e43a3962c2ed23e119f2844943292e6ee2875e42b7ca1696f543d58ba66edee1dcdfb40a7f8b48b458e40303e8f122321026782757885593029142af4e8fb6d7aaf4a376e7e165c6a6608497b54bb87bd43ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 3 trans
	{ ID:"b5ac9b592513703ca50f3f2edf67222ae5487145876de8fb468a79a023bcd307", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"d305c96ee071f80732bc85867b8b307b42040b35c71cb9b22272329414c92b0c", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"b8f6a8ba7da1a1e4a500be2063d3ae3eeda44686ab6824fd6a5df6c30803317f", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "3fc33fed6a24695995ee511babd0c368169902ae35513dbd386fe53cce6d8a41", b.PrevHash.ReverseString())
   assert.Equal(t, "116028c420ff6c00a06dd453c85afa87d394fa83d497d7cd0298ee0d2929e7c2", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1502206344, int(b.Timestamp))
   assert.Equal(t, 1233100, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4048074215ab6f34267b629d88d03d2d223e1eb0b81b4655b0ade4bd209f09a2c840b5e66b5b53607c0d4667f723771d4b1bfb6e3b86e8b6a24616468e8d5f52494065fb9dc7131af94caebd32243397594e5617f1fba438f0eb7f8b8cd3f5ebb90d124cbe1662cf53ac550bdc5c17bd2a5cc90b9cf74e46b75d45d1d6d88a4b070640a150a3d2b8341797e0a94c9194ea8e93162cbecd5bd324d309d9a9f93f18cc31ff1f18f635df53cfa08a04656a8e761d0a1c2b5afdee471f13c5cddcfa983d6b40273c88b9c4b514aa0ed0ab6f16c8c4c19f1a3d34f2e8651cd406907374bbceb2a5dc0a9c68cc15c1bef9a6179225bab83644a07e46b3fc6f30900e3c589057584033a061cb2cf46797c288428180bb8844de0997f4f0ffa28a80ec83fa360945326685db59faca99c4d7410248cb534deb3ce6015410d502be7e4f97249dcf467f", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0016660d16211fffba39bf43aa0d4ab9a9c3cf44542be144a531372344a4ff6e",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1091, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode995(t *testing.T) {
	// block taken from mainnet: 0016681137281e63b409eaeaa2cf758be7f470003c7fa3449a56abea6571b274
   
   rawBlock := "00000000f47c9d35f3afaebb446a24ba606715f7775945880b30c1acb5029576db9b5dbf9bbef41bc5101c7b9371a4b8f4f3f7b4fcaf3350e20f6ad2aa8b911d139bb9f6d4657c58710a0600896b7aa368ddb5e759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd45014031a600a6ead5701263e51c5f578121d3cd6b669fd3d56930a1de1140b0f99a4f97408b4374d2b3019e0728e6cc23e44da2b88b58a108165ead77ab09d0c094e8405ea762773595496c4fafda4d57ac55d2fb66d8dded441e58f6a0768fd90b55849534457c7e311441e31ff4bf89a862e0f756da5cc310695812b916fa37b19be440eb3ebca5b77ae9f146abe9c57a343063c4a510154596205c4547321343a857fed1df0b98acba0b4e267051ee62650e3e499785edb1bb5fab8ebaf67c7cb0d25b40976c60ff418d3b90d56159143ae5956b52ee4b9c4132728e146d2b438f140e300193f8b30bb5fd7f8ba34cf44733d6f151cdc6fc9bb1fdfb81678b1486600cb640071b18092cb24f745d76287d9ea57d6ff54b57f6f8f78cfbd91cede03cc957a9934a23b622f30cedb1cae4636cdea55e1e7d86fae0045ac5f51be598fa91be9af1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae010000896b7aa300000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"f6b99b131d918baad26a0fe25033affcb4f7f3f4b8a471937b1c10c51bf4be9b", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "bf5d9bdb769502b5acc1300b88455977f7156760ba246a44bbaeaff3359d7cf4", b.PrevHash.ReverseString())
   assert.Equal(t, "f6b99b131d918baad26a0fe25033affcb4f7f3f4b8a471937b1c10c51bf4be9b", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1484547540, int(b.Timestamp))
   assert.Equal(t, 395889, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "4031a600a6ead5701263e51c5f578121d3cd6b669fd3d56930a1de1140b0f99a4f97408b4374d2b3019e0728e6cc23e44da2b88b58a108165ead77ab09d0c094e8405ea762773595496c4fafda4d57ac55d2fb66d8dded441e58f6a0768fd90b55849534457c7e311441e31ff4bf89a862e0f756da5cc310695812b916fa37b19be440eb3ebca5b77ae9f146abe9c57a343063c4a510154596205c4547321343a857fed1df0b98acba0b4e267051ee62650e3e499785edb1bb5fab8ebaf67c7cb0d25b40976c60ff418d3b90d56159143ae5956b52ee4b9c4132728e146d2b438f140e300193f8b30bb5fd7f8ba34cf44733d6f151cdc6fc9bb1fdfb81678b1486600cb640071b18092cb24f745d76287d9ea57d6ff54b57f6f8f78cfbd91cede03cc957a9934a23b622f30cedb1cae4636cdea55e1e7d86fae0045ac5f51be598fa91be9a", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0016681137281e63b409eaeaa2cf758be7f470003c7fa3449a56abea6571b274",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode996(t *testing.T) {
	// block taken from mainnet: 00166900746e21139fd5af713637e8ea0873fb150a46ec3313f4534e10d942ca
   
   rawBlock := "0000000063be55aa6834237e2ef040dd87152f71260ca359f62eb4a9649286656c0d893a126cdedad3b5d216ec0a4be26b3e4888b3418c24723df64922f08e6efe304f580eb049591e1610009c3f069d1404c5f759e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140f8ebe0eafb86f8e27774594ffb3fd4c036013bed6e90d238b343eeda645e959c70f802ff7b838cc752a2440119d8136d2366bf6ac8f13df8aa20c666fb5284624041ae046375ce08e8b6572d138a35f4d4cd8cca79528c9340cd2e21c6deeb7f6df01271b0fefb5412b4a11d7d88ddee2d7dad39b6fc868afb26e65e9236ece4ca402c03947536d0e5c9a71ed3c830b200059aedf8085e6a5edf96be677a533d4b8266076615aa7535ff23907ceda152729a70613a43d5253739ad6cf7a8aadf665e40eddd52a4e393d4cd319d4b6066e7c941e058ba5b82d96adccc9525a6a56b7d422c4b9db74e3b2fe19e0d5d261657c2f68456f777dda09d81cd0ce750cc1a4e0640df54653c02766044f5e949e07fc6dde5b4e393b88406fcf77d899c8b3b9cc457a8c6c0ecd96b21d3b6661d6a5a3f527185bbbfff2c8798a04fd1871bb616a74af1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100009c3f069d00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"584f30fe6e8ef02249f63d72248c41b388483e6be24b0aec16d2b5d3dade6c12", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "3a890d6c65869264a9b42ef659a30c26712f1587dd40f02e7e233468aa55be63", b.PrevHash.ReverseString())
   assert.Equal(t, "584f30fe6e8ef02249f63d72248c41b388483e6be24b0aec16d2b5d3dade6c12", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1498001422, int(b.Timestamp))
   assert.Equal(t, 1054238, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40f8ebe0eafb86f8e27774594ffb3fd4c036013bed6e90d238b343eeda645e959c70f802ff7b838cc752a2440119d8136d2366bf6ac8f13df8aa20c666fb5284624041ae046375ce08e8b6572d138a35f4d4cd8cca79528c9340cd2e21c6deeb7f6df01271b0fefb5412b4a11d7d88ddee2d7dad39b6fc868afb26e65e9236ece4ca402c03947536d0e5c9a71ed3c830b200059aedf8085e6a5edf96be677a533d4b8266076615aa7535ff23907ceda152729a70613a43d5253739ad6cf7a8aadf665e40eddd52a4e393d4cd319d4b6066e7c941e058ba5b82d96adccc9525a6a56b7d422c4b9db74e3b2fe19e0d5d261657c2f68456f777dda09d81cd0ce750cc1a4e0640df54653c02766044f5e949e07fc6dde5b4e393b88406fcf77d899c8b3b9cc457a8c6c0ecd96b21d3b6661d6a5a3f527185bbbfff2c8798a04fd1871bb616a74a", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00166900746e21139fd5af713637e8ea0873fb150a46ec3313f4534e10d942ca",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode997(t *testing.T) {
	// block taken from mainnet: 0016779b440efe0f266e095fb3189506baa38916c2e30e343929b2e047bbc143
   
   rawBlock := "00000000c6307f725637fb311146aeff48c45c69581660a50cc541ab00d841efeefd226ba4f883ff62f534a696f28413ba2202cd5c3d49b70dfd42e189d1b46ee9ed0fed98a37458e7a505007cf8185d57004f0c59e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140ea2b09fc47b2cc3c845cd43a29136ba1a887164feddfc90929c9f7434f04bf2eacb3c93bace4370d93220a9550ad9b2178471dc9e72af003e2094d06c8c3e6d04062e1f7e9ae011fc848e738cf1e362305d3edbf8e184e91610e127fd757117c5148bd1d4e9a02a815259042fc5c889cc6267107b4ac2aded4e6312279ab83bfbd402fdf5dac40e951779a8a854933e490212160b71d5fd878c255c63aa7c465c15d421ba7c65d84ef0ccaee85dc0b286d4e26ec653c41d06dd0519dc241a1671aaf40dbb9662bbb40c4cb5712974b337324d159c6b87898d2df3954142cc06f6fedb806e5c8514c52ee341a1b853a6c28b8c034ce477ed7a3860a661e774b58737540402e2ee40c2d0e8975491e1dc98936f0786b06fb523315ddc561bdb6eaad68fdab258809d16593e8316ba49e06fd135c30aeedfc082275b94328f71b08a5db605bf1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0100007cf8185d00000000"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 1 trans
	{ ID:"ed0fede96eb4d189e142fd0db7493d5ccd0222ba1384f296a634f562ff83f8a4", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "6b22fdeeef41d800ab41c50ca5601658695cc448ffae461131fb3756727f30c6", b.PrevHash.ReverseString())
   assert.Equal(t, "ed0fede96eb4d189e142fd0db7493d5ccd0222ba1384f296a634f562ff83f8a4", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1484039064, int(b.Timestamp))
   assert.Equal(t, 370151, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40ea2b09fc47b2cc3c845cd43a29136ba1a887164feddfc90929c9f7434f04bf2eacb3c93bace4370d93220a9550ad9b2178471dc9e72af003e2094d06c8c3e6d04062e1f7e9ae011fc848e738cf1e362305d3edbf8e184e91610e127fd757117c5148bd1d4e9a02a815259042fc5c889cc6267107b4ac2aded4e6312279ab83bfbd402fdf5dac40e951779a8a854933e490212160b71d5fd878c255c63aa7c465c15d421ba7c65d84ef0ccaee85dc0b286d4e26ec653c41d06dd0519dc241a1671aaf40dbb9662bbb40c4cb5712974b337324d159c6b87898d2df3954142cc06f6fedb806e5c8514c52ee341a1b853a6c28b8c034ce477ed7a3860a661e774b58737540402e2ee40c2d0e8975491e1dc98936f0786b06fb523315ddc561bdb6eaad68fdab258809d16593e8316ba49e06fd135c30aeedfc082275b94328f71b08a5db605b", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "0016779b440efe0f266e095fb3189506baa38916c2e30e343929b2e047bbc143",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 686, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode998(t *testing.T) {
	// block taken from mainnet: 00167b1c0d560b5ccde834cc9df9f282fea6ab08fa752056029f5b825ba7086d
   
   rawBlock := "00000000f301046fc206ab4ba2c3f57956f909cc09a0ba0a36c8e358c1654d41fdd2a4a6f541eb235757c52e60aa135e7e74a0a7972341b917b32c9a428357bbfa8acc72ea24cd59089c15000b038cf52111075859e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd4501405ba82e9156833588025b0b682bd4421e11587c61748de1ac46475c10371b1f8a123bcddb4034051fc1ae37bfdf8af79811999bcac915fb2b8e08e156400b70d640fc868fb39ec41e213018dde86477a5420df362f4965045dbd0ce287248eed1231d429dbd03361b822114999c5e9f02f8ce1a0e5dc1a0b12cf2dd31949ae557a0403b96522905db1a1432e9d97e99233befc26e97ac2a43dd10da2d7f9ee292936968738b7c9041d8e50edf9bd7463c69b1f494de7d63a8174c35c87a8ed5df2bd5404e11f79c52bddafdfeb72710a82f8a56eb317a4aa125628323d433542112ae82cef6ad9cd6430e4df07f399c8ecc59222a4e7005168d3e14fcfd701afc7dd85c402eeaecec7a908234bc5efdaa443fca0afbec20209cc9ccd4c949a0fb8cb3b43cdda0d44e9aecc1cb787d45e4268e730b99c17605a36e9a16c78cdf265a2d9b1ff1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae0500000b038cf5000000000200012782047472b0072c29b17b0caaf909f8504f7657000b6e9a201081de1c1aceb30000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60601bd31700000000f49c6970c3f68651923557d86e94332d3efe0a3d014140f620f89562952ff83b9b4a1dbc18751745c2358f8dadcb0a3336ee278717919c4e91e31cce2c708ec8b5c9de211c9f9ef737b82eecd84123355c8214257062e82321026377073ca25c3ec4703edd5f400f15fd98d1cb595e0982b6601a62055626fc0dac0200016b4b0162e43e18d9fbc4dde49d6c64e00c25aa9c559890090efdbfc7fe09561b0000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60e0d602000000000072e330d0be912bc1c6d6d6cb5f06ac1b27e469f601414073e453c49598ee7f6c193236e4b2d7a4a05245661cdb4187357b295d8714edf6ce6439f246e88acb49c060a05eeea12af6bbf5532098f0e185638c7cec954ac52321026d96738f2ab8e244cda32119a3fe698c004b70d598b0d1662c816d61486acc5fac80000001bb218b3f3c7f27b7bdf648b32e0849eb409bda44823e5d8ae1834f76a80bd6600000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc5004775e800000000ac878c16d299f5030a09325a7bd105541286be000141408e350fb944669696fed090837bff9b222965dfe0bc2cf019e62f9dbeeeab371779163241e4ed5505f92a0919706e986971b613b4e1903b11a022f738198bfbe723210359bc66455452f07dc0a9568c3bfe619e0c3329025b531d2c19ff72b818159e38ac80000001404cd5deb623e487ce64a1b4694678f74459506e60fecfd257ad246a1a7e40800000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc50038c94d0100000023290a4d847af9e32986aab4b5f500bf07f8cfb301414098a5877c3c9f27ea683a1fe0a34873517528b366a834f9fc0f91b5a49875802075b71e2ec4bebc5bedd82e0ef5cebccd85304401f5b2128902c328f98a13b6cb232103ca640a9ba7e4c085a71783b3501e123e9d1469d858c300368394cb0222466adfac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 5 trans
	{ ID:"abd37e187b37a3eaadf5edee503863d2641d535281c569a3cd14a590859b14a4", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"d0293a98ef470794b023f52cac098ff5d9108dec22b29d563fcc22bdcb2cef33", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"956edba0e931cd7140c1f125d8ff8368bdd3eb554490681ffe78a91720ac01dc", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"ef7fa7de120a7345422cff0f45bfbd26977d6b2ae2f514c98ee39dd502f10498", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"a14ceec7629105abdf943f4a87535d2f716667a1539f1fe9046b05f4f383e759", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "a6a4d2fd414d65c158e3c8360abaa009cc09f95679f5c3a24bab06c26f0401f3", b.PrevHash.ReverseString())
   assert.Equal(t, "72cc8afabb5783429a2cb317b9412397a7a0747e5e13aa602ec5575723eb41f5", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1506616554, int(b.Timestamp))
   assert.Equal(t, 1416200, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "405ba82e9156833588025b0b682bd4421e11587c61748de1ac46475c10371b1f8a123bcddb4034051fc1ae37bfdf8af79811999bcac915fb2b8e08e156400b70d640fc868fb39ec41e213018dde86477a5420df362f4965045dbd0ce287248eed1231d429dbd03361b822114999c5e9f02f8ce1a0e5dc1a0b12cf2dd31949ae557a0403b96522905db1a1432e9d97e99233befc26e97ac2a43dd10da2d7f9ee292936968738b7c9041d8e50edf9bd7463c69b1f494de7d63a8174c35c87a8ed5df2bd5404e11f79c52bddafdfeb72710a82f8a56eb317a4aa125628323d433542112ae82cef6ad9cd6430e4df07f399c8ecc59222a4e7005168d3e14fcfd701afc7dd85c402eeaecec7a908234bc5efdaa443fca0afbec20209cc9ccd4c949a0fb8cb3b43cdda0d44e9aecc1cb787d45e4268e730b99c17605a36e9a16c78cdf265a2d9b1f", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00167b1c0d560b5ccde834cc9df9f282fea6ab08fa752056029f5b825ba7086d",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1496, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 


func TestBlockDecodeEncode999(t *testing.T) {
	// block taken from mainnet: 00167b41a0b0cc2008978443735b49c56a62e3e927840ddaee9583b26027db74
   
   rawBlock := "000000004f7c42cff3515c1cda388b3479010e9ec0935c9133ba4062b83609afdf373e243959a4b84a757389bec19ed1c6cf1ca7971af8c05e1b26513d4a8ce6e9731fbb0a7f6e5a637c1c00578f3e1791467f6259e75d652b5d3827bf04c165bbe9ef95cca4bf5501fd450140d94653ac85f8e4f3759d5aca91e4f9ee4f79f392a83d8301ec2d242807233dce72e4171238c55ef8d909fabc27d6840cc14d733e37b1cd270a74a4298a92391d406baa397a9c13cd55a422eaf54b8dae1526bef8e4bb1a6e2385b71c584f0bd8b6a2ecf2fd03a8304bdb7db1aaaea5ba880a81959e119a178c999005df303758d64037e48e8e827f6576cae643dfc61c721ae365704f8b03471a207c90b8d29b35a6de548510fbda4f222ff29d1de40631d29221e27ac3b381b8b25346cd3ee3588a409e6e971b6d455ed16bf3c409982c01ac00ff9318569a077c394ed8aaede812554447fe54d41012043e339af535aef2c32ec4ae3ce19e0fc531f0072e7f1a986a407b3318d18fe582ebb74c95007543059a873fc59b9044ee62764b782520dc2fd856024b2705ca2114b4e947b994a503d519fd6b5d1b1b6e58b0dce77f37db6057f1552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae060000578f3e17000000008000000155e9c7f352112aa1ec58d113f881310a7e7c93dd041e667a29860ea87ead4f780000019b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc500d2496b0000000015065fcdc6e7332a02ca80115614ca9bb0e50950014140d3f70888f70460607cc80ced52599cbfdc86351de9f9a556b98fe913d02422bab20fd4b995a6d8e96b75173711887427fed035896ae5aadc31e4f9c8013e8322232102b1689c3ab81f1b7aca34c813604ba5cced39b6ed640cfd9490283f862d2872abac8000000107eb5052f7046fe917cb44d7af3c676cb0c555daa973ba20e0efb414d933a0f0010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60002d31010000000023dc1e360a17c3501b034e01e97871088af3d467e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000d505570000000044197c23484ebe6f3aa72fd7a717540db4d690ec014140b1ec017b92128b727f5b4f422cc8189434be074fe15ae78e8e6032f1e86f5e674c37fd613260d3579612f94e95c0fff3449ac120a7de220de1dfbe29920e487e232102a541bb68ddf4f87a79f98f6cfe984d8c592ba884abc048918cf3e79c74ed8f01acd1015a05c079b0f27714c1cace24aba6a2bd1e5c20b367bfdfe2cdc8fb32146063795d3b9b3cd55aef026eae992b91063db0db53c1087472616e7366657267b6155db85e53298f01e0280cc2f21a0f40c4e808f166ea90d4b47951b1e1000000000000000001206063795d3b9b3cd55aef026eae992b91063db0db00000141406553a4e8fb21791e7079901d97b0108d9ac93aef676ca06883ac71e41c13aa901c739bf3246dc0566392e77d2638e35d25228b36a750f72699c10193902bd742232102d41ddce2c97be4c9aa571b8a32cbc305aa29afffbcae71b0ef568db0e93929aaac8000000101243b539f876b8e2b6eb678f65a86fa8ba89e2a4d72fc8710fe618e161b87e2010002e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60002d3101000000007a30034034673d4b76e17eb8698d3da474687e85e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c6000d50557000000008f921d7946eda8a8cb64838c7ec9a5d9557db65c014140280144e35a9143b4d1c6aa98508f4b3396944dcf28f7248d2836c752048a316c6837238f9cbf2c57e193a33707e20dee87e6afae5bb100dd284c0dade774dc69232102079dffce11ef0d004657d0602211aca0ccfd5c157393e03cb898c927824daeb2ac02000105b70f6715230df9491ef1267d5c6aa21b476b176a38dbf52e76273b25998b080000000001e72d286979ee6cb1b7e65dfddfb2e384100b8d148e7758de42e4168b71792c60800c000000000000775aa38d8f2cc4abd8391682f903e433672c34aa01414058d509028d2e9a62ec6ec9f8b9c58a326e61b05a7917850169c0f02be103cf14bf47181a87e018af693f4f9edd41df4864bb6ac530386c20f356e8fb593a4e28232102546a5f348aad951feaa6215eab239d3be6f4575ac97092ff38d8f8c700155f09ac"
   rawBlockBytes, _ := hex.DecodeString(rawBlock)

   b := Block{}

   r := bytes.NewReader(rawBlockBytes)
   b.Decode(r)

   expected := []txAttributes{ // 6 trans
	{ ID:"6d9df0011be02211d8e40622b7d0ad77f13337ea7c2c16617bea4a1590c31452", Type: "MinerTransaction", Size: 10, Version: 0, InputsLen: 0, OutputsLen: 0, AttributesLen:0, WitnessesLen:0}, 
{ ID:"0c9333c61f88e82e92ad4f5460e943a49121836640a679cbebe7c1979518a990", Type: "ContractTransaction", Size: 202, Version: 0, InputsLen: 1, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 
{ ID:"295fc475b3527fd80113fe2520b74289669e46dbc1aec04ae1aa353b22f3a553", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"7a45664187afe2160671658fa8902cc82a69eabe741ec67b44efb0e947e1ba7c", Type: "InvocationTransaction", Size: 228, Version: 1, InputsLen: 0, OutputsLen: 0, AttributesLen:1, WitnessesLen:1}, 
{ ID:"c37c4841b8b40899fc687b0c141fdbf14662b0aa89171bb6b3c40c6bb64b9ea5", Type: "ContractTransaction", Size: 262, Version: 0, InputsLen: 1, OutputsLen: 2, AttributesLen:0, WitnessesLen:1}, 
{ ID:"d1e1e14ae4694758329e9c937218c6bef632b0044847544010b010df0be8d0b2", Type: "ClaimTransaction", Size: 203, Version: 0, InputsLen: 0, OutputsLen: 1, AttributesLen:0, WitnessesLen:1}, 

   }

   for i, tx := range b.Txs {
		   txID, err := tx.ID()
		   assert.Equal(t, nil, err)
		   assert.Equal(t, expected[i].ID, txID.ReverseString())
		   
		   assert.Equal(t, expected[i].Size, tx.BaseTx().Size())
		   assert.Equal(t, expected[i].Type, tx.BaseTx().TypeTx().String())
		   assert.Equal(t, expected[i].Version, int(tx.BaseTx().VersionTx()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].OutputsLen, len(tx.BaseTx().UTXOs()))
		   assert.Equal(t, expected[i].InputsLen, len(tx.BaseTx().TXOs()))
		   assert.Equal(t, expected[i].AttributesLen, len(tx.BaseTx().Attrs()))
		   assert.Equal(t, expected[i].WitnessesLen, len(tx.BaseTx().Witness()))
	   }

   

   assert.Equal(t, len(expected), len(b.Txs))
   
   // Block specifc tests
   assert.Equal(t, 0, int(b.Version))
   assert.Equal(t, "243e37dfaf0936b86240ba33915c93c09e0e0179348b38da1c5c51f3cf427c4f", b.PrevHash.ReverseString())
   assert.Equal(t, "bb1f73e9e68c4a3d51261b5ec0f81a97a71ccfc6d19ec1be8973754ab8a45939", b.MerkleRoot.ReverseString())
   assert.Equal(t, 1517190922, int(b.Timestamp))
   assert.Equal(t, 1866851, int(b.Index))
   
   nextConsensus, err := address.FromUint160(b.NextConsensus)
   assert.Equal(t, nil, err)
   assert.Equal(t, "APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR", nextConsensus)
   
   assert.Equal(t, "40d94653ac85f8e4f3759d5aca91e4f9ee4f79f392a83d8301ec2d242807233dce72e4171238c55ef8d909fabc27d6840cc14d733e37b1cd270a74a4298a92391d406baa397a9c13cd55a422eaf54b8dae1526bef8e4bb1a6e2385b71c584f0bd8b6a2ecf2fd03a8304bdb7db1aaaea5ba880a81959e119a178c999005df303758d64037e48e8e827f6576cae643dfc61c721ae365704f8b03471a207c90b8d29b35a6de548510fbda4f222ff29d1de40631d29221e27ac3b381b8b25346cd3ee3588a409e6e971b6d455ed16bf3c409982c01ac00ff9318569a077c394ed8aaede812554447fe54d41012043e339af535aef2c32ec4ae3ce19e0fc531f0072e7f1a986a407b3318d18fe582ebb74c95007543059a873fc59b9044ee62764b782520dc2fd856024b2705ca2114b4e947b994a503d519fd6b5d1b1b6e58b0dce77f37db6057", hex.EncodeToString(b.Witness.InvocationScript))
   assert.Equal(t, "552102486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a7021024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d2102aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e2103b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c2103b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a2102ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba5542102df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e89509357ae", hex.EncodeToString(b.Witness.VerificationScript))
   assert.Equal(t, "00167b41a0b0cc2008978443735b49c56a62e3e927840ddaee9583b26027db74",b.Hash.ReverseString())
   
   bs, err := b.Size()
   assert.Equal(t, nil, err)
   assert.Equal(t, 1843, bs)

   buf := new(bytes.Buffer)

   b.Encode(buf)

   assert.Equal(t, rawBlock, hex.EncodeToString(buf.Bytes()))
}
	 
